{
	"docs": [{
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"fields": "Parameter for requesting optional response properties"
		},
		"path": "\/2\/categories",
		"http_method": "GET",
		"examples": "",
		"response": {
			"name": "Display name of the category",
			"id": "Numeric identifier of the category",
			"shortname": "String identifier of the category"
		},
		"name": "Categories",
		"orders": {
			"member": "order by recommendations for authorized member (deprecated)",
			"shortname": "(default order) ascending"
		},
		"scopes": ["basic"],
		"param_notes": "No parameters required parameters",
		"group": "categories",
		"desc": "Returns a list of Meetup group categories"
	}, {
		"formats": ["json"],
		"api_version": "2",
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output"
		},
		"path": "\/dashboard",
		"http_method": "GET",
		"examples": "",
		"response": {
			"stats": ["A map of statistics for the current member", {
				"fb_friend_events": "Number of upcoming events Facebook friends of the current member are attending returned when there are no upcoming events",
				"upcoming_events": "Number of upcoming Meetup events in member's groups",
				"city_top_groups": "Number of top groups in the member's city",
				"global_top_groups": "Number of top groups globally",
				"memberships": "Number of Meetup groups member is in",
				"nearby_events": "Number of upcoming events in the member's local area, returned when there are no upcoming events"
			}],
			"last_event": ["The last meetup the current member RSVP'd to", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
				"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
				"venue": ["Venue, if selected and not hidden", {
					"zip": "ZIP code if, venue is in US or Canada",
					"lat, lon": "Geographic coordinates of venue",
					"localized_country_name": "Name of country the city belongs to",
					"phone": "Phone number of venue",
					"address_1": "Line 1 of venue address",
					"city, state, country": "City, Country Code and if in US state of venue",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"name": "Venue name",
					"id": "Venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
				}],
				"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
				"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
				"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
					"id": "Question identifier",
					"question": "Question text",
					"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
				}],
				"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
				"distance": "Distance in miles from the search location, if one was specified",
				"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
				"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
				"fee": ["Fee info returned when payment is defined", {
					"amount": "Amount of the fee",
					"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per person\"",
					"currency": "Currency accepted for fee",
					"label": "Fee label, typically \"Price\"",
					"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
				}],
				"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
					"count": "Number of ratings been collected",
					"average": "Average of collected ratings"
				}],
				"why": "We should do this because...",
				"description": "Description of the event.",
				"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
				"short_link": "Returned when fields request parameter contains \"short_link\"",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
				"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
					"member_id": "The host's member id",
					"photo": ["Member photo if one is exists", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"member_name": "The host's member name"
				}],
				"id": "The event id. May be numeric or alphanumeric, always served as a string",
				"simple_html_description": "Optional field, description of the event in simple HTML format.",
				"photo_url": "URL of the event photo, if one exists",
				"publish_status": "\"published\" or \"draft\" only visible to organizers",
				"group": ["Group that is hosting the event", {
					"topics": ["Optional field. Topics related to this group", {
						"urlkey": "Unique keyword used to identify this topic",
						"name": "Topic name",
						"id": "Topic ID"
					}],
					"created": "Date and time that the group was founded, in milliseconds since the epoch",
					"group_lon": "Approximate group longitude",
					"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"join_mode": "\"open\", \"approval\", or \"closed\"",
					"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
					"name": "Group name",
					"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
						"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
						"status": "The member's status. May be one of 'active' or 'pending'"
					}],
					"id": "Group id",
					"category": ["Optional field. Category of this group", {
						"name": "Display name of the category",
						"id": "Numeric identifier of the category",
						"shortname": "String identifier of the category"
					}],
					"urlname": "Group URL name",
					"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
						"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
						"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
						"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
						"fee": "Numeric fee value",
						"currency": "Currency in which the fee is declared",
						"fee_desc": "Description of fee",
						"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
						"reasons_other": "An additional reason if specified.",
						"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
						"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
					}],
					"group_lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}],
				"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
				"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
					"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
						"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
						"days": "if member_cancellation is present, it's relative to this many days before the event",
						"notes": "additional refund policy notes"
					}],
					"open_time": "UTC time that members may begin to RSVP",
					"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
					"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
					"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
				}],
				"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
				"created": "UTC creation time of the event, in milliseconds since the epoch",
				"maybe_rsvp_count": "Number of maybe RSVPs including guests",
				"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
				"event_url": "URL of the event's page on meetup.com",
				"announced": "Organizers and hosts can see if the event was announced",
				"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
				"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
				"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
					"member": ["Member who RSVP'd", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"self": ["A small set of data representing the authenticated member's context with this member", {
							"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
						}]
					}],
					"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
					"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
					"created": "Creation time of the RSVP, in milliseconds since the epoch.",
					"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}]
				}],
				"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "The name of the event",
				"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
					"rated": "Boolean indicator of whether the current member rated the event or not",
					"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
					"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
					"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
					"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
					"rsvp": ["Member's RSVP, if any", {
						"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
						"guests": "number of guests",
						"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
					}]
				}],
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "UTC last modified time of the event, in milliseconds since the epoch",
				"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
				"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
			}],
			"service_status": ["An optional field which represents the current API service status", {
				"message": "A human displayable message",
				"status": "May be one of 'ok', 'notice', or 'unavailable'"
			}],
			"ongoing_event": ["The meetup event the current member has RSVP'd to that's currently happening", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
				"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
				"venue": ["Venue, if selected and not hidden", {
					"zip": "ZIP code if, venue is in US or Canada",
					"lat, lon": "Geographic coordinates of venue",
					"localized_country_name": "Name of country the city belongs to",
					"phone": "Phone number of venue",
					"address_1": "Line 1 of venue address",
					"city, state, country": "City, Country Code and if in US state of venue",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"name": "Venue name",
					"id": "Venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
				}],
				"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
				"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
				"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
					"id": "Question identifier",
					"question": "Question text",
					"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
				}],
				"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
				"distance": "Distance in miles from the search location, if one was specified",
				"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
				"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
				"fee": ["Fee info returned when payment is defined", {
					"amount": "Amount of the fee",
					"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per person\"",
					"currency": "Currency accepted for fee",
					"label": "Fee label, typically \"Price\"",
					"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
				}],
				"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
					"count": "Number of ratings been collected",
					"average": "Average of collected ratings"
				}],
				"why": "We should do this because...",
				"description": "Description of the event.",
				"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
				"short_link": "Returned when fields request parameter contains \"short_link\"",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
				"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
					"member_id": "The host's member id",
					"photo": ["Member photo if one is exists", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"member_name": "The host's member name"
				}],
				"id": "The event id. May be numeric or alphanumeric, always served as a string",
				"simple_html_description": "Optional field, description of the event in simple HTML format.",
				"photo_url": "URL of the event photo, if one exists",
				"publish_status": "\"published\" or \"draft\" only visible to organizers",
				"group": ["Group that is hosting the event", {
					"topics": ["Optional field. Topics related to this group", {
						"urlkey": "Unique keyword used to identify this topic",
						"name": "Topic name",
						"id": "Topic ID"
					}],
					"created": "Date and time that the group was founded, in milliseconds since the epoch",
					"group_lon": "Approximate group longitude",
					"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"join_mode": "\"open\", \"approval\", or \"closed\"",
					"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
					"name": "Group name",
					"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
						"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
						"status": "The member's status. May be one of 'active' or 'pending'"
					}],
					"id": "Group id",
					"category": ["Optional field. Category of this group", {
						"name": "Display name of the category",
						"id": "Numeric identifier of the category",
						"shortname": "String identifier of the category"
					}],
					"urlname": "Group URL name",
					"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
						"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
						"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
						"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
						"fee": "Numeric fee value",
						"currency": "Currency in which the fee is declared",
						"fee_desc": "Description of fee",
						"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
						"reasons_other": "An additional reason if specified.",
						"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
						"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
					}],
					"group_lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}],
				"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
				"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
					"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
						"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
						"days": "if member_cancellation is present, it's relative to this many days before the event",
						"notes": "additional refund policy notes"
					}],
					"open_time": "UTC time that members may begin to RSVP",
					"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
					"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
					"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
				}],
				"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
				"created": "UTC creation time of the event, in milliseconds since the epoch",
				"maybe_rsvp_count": "Number of maybe RSVPs including guests",
				"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
				"event_url": "URL of the event's page on meetup.com",
				"announced": "Organizers and hosts can see if the event was announced",
				"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
				"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
				"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
					"member": ["Member who RSVP'd", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"self": ["A small set of data representing the authenticated member's context with this member", {
							"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
						}]
					}],
					"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
					"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
					"created": "Creation time of the RSVP, in milliseconds since the epoch.",
					"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}]
				}],
				"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "The name of the event",
				"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
					"rated": "Boolean indicator of whether the current member rated the event or not",
					"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
					"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
					"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
					"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
					"rsvp": ["Member's RSVP, if any", {
						"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
						"guests": "number of guests",
						"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
					}]
				}],
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "UTC last modified time of the event, in milliseconds since the epoch",
				"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
				"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
			}],
			"notifications": ["Optional field for including a list of member notifications", {
				"read": "True or False indicating whether a notification has been read",
				"kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
				"link": "Link to resource notification was triggered by",
				"photo": ["A photo related to the notifications. Potentially absent", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"setting": ["The setting that controls the member's preference for receiving sendings of this kind of notification", {
					"email": ["A push setting if available", {
						"name": "display code"
					}],
					"push": ["An email setting if available", {
						"name": "display code"
					}]
				}],
				"target": ["kind specific properties which may be used to navigate back to the source of the notification", {
					"event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
					"group_id": "If needed, the numeric ID of the group which relates to this notification",
					"comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
					"comment_id": "If needed, the numeric ID of the comment which relates to this notification",
					"type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location",
					"group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
				}],
				"important": "True or False indicating a notification's level of importance",
				"photo_type": "Type of photo, event or member",
				"self": ["Information pertaining the authorized member associated with this notification", {
					"action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
				}],
				"text": "Notification content as text",
				"id": "A unique identifier for a notification",
				"category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
				"updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
			}],
			"next_event": ["The next meetup event the current member has RSVP'd to", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
				"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
				"venue": ["Venue, if selected and not hidden", {
					"zip": "ZIP code if, venue is in US or Canada",
					"lat, lon": "Geographic coordinates of venue",
					"localized_country_name": "Name of country the city belongs to",
					"phone": "Phone number of venue",
					"address_1": "Line 1 of venue address",
					"city, state, country": "City, Country Code and if in US state of venue",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"name": "Venue name",
					"id": "Venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
				}],
				"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
				"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
				"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
					"id": "Question identifier",
					"question": "Question text",
					"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
				}],
				"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
				"distance": "Distance in miles from the search location, if one was specified",
				"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
				"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
				"fee": ["Fee info returned when payment is defined", {
					"amount": "Amount of the fee",
					"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per person\"",
					"currency": "Currency accepted for fee",
					"label": "Fee label, typically \"Price\"",
					"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
				}],
				"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
					"count": "Number of ratings been collected",
					"average": "Average of collected ratings"
				}],
				"why": "We should do this because...",
				"description": "Description of the event.",
				"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
				"short_link": "Returned when fields request parameter contains \"short_link\"",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
				"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
					"member_id": "The host's member id",
					"photo": ["Member photo if one is exists", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"member_name": "The host's member name"
				}],
				"id": "The event id. May be numeric or alphanumeric, always served as a string",
				"simple_html_description": "Optional field, description of the event in simple HTML format.",
				"photo_url": "URL of the event photo, if one exists",
				"publish_status": "\"published\" or \"draft\" only visible to organizers",
				"group": ["Group that is hosting the event", {
					"topics": ["Optional field. Topics related to this group", {
						"urlkey": "Unique keyword used to identify this topic",
						"name": "Topic name",
						"id": "Topic ID"
					}],
					"created": "Date and time that the group was founded, in milliseconds since the epoch",
					"group_lon": "Approximate group longitude",
					"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Unique photo id",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}],
					"join_mode": "\"open\", \"approval\", or \"closed\"",
					"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
					"name": "Group name",
					"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
						"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
						"status": "The member's status. May be one of 'active' or 'pending'"
					}],
					"id": "Group id",
					"category": ["Optional field. Category of this group", {
						"name": "Display name of the category",
						"id": "Numeric identifier of the category",
						"shortname": "String identifier of the category"
					}],
					"urlname": "Group URL name",
					"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
						"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
						"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
						"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
						"fee": "Numeric fee value",
						"currency": "Currency in which the fee is declared",
						"fee_desc": "Description of fee",
						"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
						"reasons_other": "An additional reason if specified.",
						"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
						"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
					}],
					"group_lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}],
				"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
				"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
					"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
						"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
						"days": "if member_cancellation is present, it's relative to this many days before the event",
						"notes": "additional refund policy notes"
					}],
					"open_time": "UTC time that members may begin to RSVP",
					"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
					"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
					"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
				}],
				"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
				"created": "UTC creation time of the event, in milliseconds since the epoch",
				"maybe_rsvp_count": "Number of maybe RSVPs including guests",
				"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
				"event_url": "URL of the event's page on meetup.com",
				"announced": "Organizers and hosts can see if the event was announced",
				"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
				"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
				"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
					"member": ["Member who RSVP'd", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"self": ["A small set of data representing the authenticated member's context with this member", {
							"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
						}]
					}],
					"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
					"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
					"created": "Creation time of the RSVP, in milliseconds since the epoch.",
					"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
						"highres_link": "URL for the photo at its maximum size",
						"photo_id": "Photo ID",
						"photo_link": "URL for a standard size of the photo",
						"thumb_link": "URL for a thumbnail of the photo"
					}]
				}],
				"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "The name of the event",
				"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
					"rated": "Boolean indicator of whether the current member rated the event or not",
					"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
					"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
					"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
					"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
					"rsvp": ["Member's RSVP, if any", {
						"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
						"guests": "number of guests",
						"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
					}]
				}],
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "UTC last modified time of the event, in milliseconds since the epoch",
				"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
				"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
			}]
		},
		"name": "Dashboard",
		"scopes": ["basic"],
		"param_notes": "no parameters are required",
		"group": "dashboard",
		"desc": "A dashboard of aggregated Meetup information for the authorized member"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"fields": "Parameter for requesting optional response properties",
			"lat,lon,radius": "Use a given lat\/lon\/radius (miles) to search best_topics for instead of using the member's lat\/lon.  When present, all three are required."
		},
		"path": "\/2\/topic_categories",
		"http_method": "GET",
		"examples": "",
		"response": {
			"best_topics": ["Optional fields parameter representing the best topic matches for the category", {
				"urlkey": "The unique keyword used to identify this topic",
				"name": "The name of the topic",
				"id": "Topic ID"
			}],
			"icon": ["An icon representing the category", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for the thumbnail sized photo"
			}],
			"name": "Display name of the category",
			"photo": ["A photo representing the category", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for the thumbnail sized photo"
			}],
			"topic": ["A topic linked to the category", {
				"urlkey": "The unique keyword used to identify this topic",
				"name": "The name of the topic",
				"id": "Topic ID"
			}],
			"sort_name": "Name used for sorting",
			"category_ids": "list of category ids associated with this topic category",
			"shortname": "String identifier of the category"
		},
		"name": "Topic Categories",
		"orders": {
			"shortname": "(default order) ascending"
		},
		"scopes": ["basic"],
		"param_notes": "No parameters required parameters",
		"group": "topics",
		"desc": "Returns a list of Meetup topic categories"
	}, {
		"formats": ["json", "rss", "atom", "xml"],
		"params": {
			"member_id": "Return topics a target member is subscribed to",
			"name": "Return topics that match the specified name (e.g. 'Digital Photography', 'Classical Music')",
			"topic": "Return topics for this topic urlkey",
			"search": "Return topics related to a list of search terms [separate search keywords with +'s]"
		},
		"path": "\/topics",
		"http_method": "GET",
		"examples": "\nGet a list of topics related to \"Dogs\"\n\n    https:\/\/api.meetup.com\/topics.xml\/?name=dog&key=ABDE12456AB2324445\n\nGet a list of topics with the search keywords \"movies\" or \"sports\" in the description\n\n    https:\/\/api.meetup.com\/topics.xml\/?search=movies+sports&key=ABDE12456AB2324445\n    ",
		"response": {
			"urlkey": "The unique keyword used to identify this topic",
			"members": "The number of members who belong to groups under this topic",
			"link": "A URL of the topic's page on meetup.com updated The last date and time that this topic's information changed",
			"name": "The name of the topic",
			"description": "A description of the topic",
			"id": "The ID of the topic"
		},
		"name": "Topics",
		"orders": {
			"name": "the topic name",
			"topic": "the topic key",
			"alertees": "total alertees in the topic",
			"members": "total members in the topic"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "topics",
		"desc": "API method for accessing meetup topics"
	}, {
		"formats": ["json", "rss", "atom", "xml", "kml"],
		"prefer": "\/2\/events",
		"params": {
			"*topic, groupnum": "Return events for the group with given topic and number",
			"rsvp_limit": "The number of \"yes\" rsvps an event can have before members will be added to the waiting list",
			"*id": "Return events with the specified IDs, separated by commas. When id is supplied, the date and status parameters are by default unlimited so that all events with matching IDs will be returned",
			"before": "Return events that started before the specified date, formatted as described by the \"after\" parameter. Defaults to after + 60 days. Limited to one year beyond the after date",
			"*topic": "Return events in the specified topic(s), one topic allowed",
			"*group_urlname": "Return events for the group with this custom URL path",
			"*group_id": "Return events from groups with the specified IDs, separated by commas",
			"text_format": "Format of the description text, \"html\", \"plain\", or \"simplehtml\". Defaults to \"html\"",
			"*member_id": "A member id number, limits results set to events in groups that the member specified by this id is currently a member of (excludes private groups, unless the member_id is the same as that of the member making the request)",
			"after": "Return events that start after the specified date, formatted as either a relative date such as \"-1w\" for one week ago or by absolute time in milliseconds since the epoch. Relative dates are annotated using one of the following time intervals: \"d\" for day, \"w\" for week, or \"m\" for month. Defaults to today. See also status",
			"fields": "Request that additional fields (separated by commas) be included in the output. \"photo_album_id\" will include photo album info, and \"waiting_rsvpcount\" will include waitlist rsvp info in response items",
			"status": "Return events matching one of the given status values, separated by commas. Possible statuses are \"upcoming\", \"autoscheduled\", \"proposed\", \"suggested\", and \"past\". The default status parameter is \"upcoming\". If a date of today or earlier is specified for after, the default becomes \"past,upcoming\". Specifying a status of \"autoscheduled\" by itself, or in addition to others, will display events which have been created using the autoscheduling tool."
		},
		"path": "\/events",
		"http_method": "GET",
		"examples": "",
		"response": {
			"venue_name": "name of venue",
			"venue_visibility": "Set to \"members\" or \"public\". All other venue fields will be blank if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event.",
			"feedesc": "Fee description, or blank if this event has no fee",
			"fee": "Fee for this event (or 0.0 if this event has no fee)",
			"rating": "The event's rating. If the event hasn't happened yet or there are no ratings submitted, this field will default to 0",
			"description": "Description of the event, see text_format above",
			"ismeetup": "Set to either a \"1\" or a \"0\" if this is a Meetup event or just a calendar note, respectively",
			"venue_address1": "line 1 of venue address",
			"short_link": "Optional field. If hosting group is private, this will return the group's short_link",
			"venue_address2": "line 2 of venue address",
			"attendee_count": "Number of attendees at the event",
			"waiting_rsvpcount": "Number of waitlist rsvps to this event, including guests, only supplied if fields contains \"waiting_rsvpcount\"",
			"event_hosts": ["Members chosen to host this event, may include the organizer", {
				"member_id": "Member ID of the event host",
				"member_name": "Name of the event host"
			}],
			"utc_time": "The date and time that the event will take place, in milliseconds since the epoch.",
			"member_status": "Set to \"member\" or \"nonmember\" if member is member of the group hosting the event",
			"organizer_id": "Member ID of the organizer of this Meetup group",
			"venue_lat, venue_lon": "the latitude and longitude of the venue",
			"guest_limit": "Maximum number of guests that a member can RSVP for",
			"id": "The ID of the event",
			"photo_url": "URL of the event photo",
			"venue_phone": "phone number of venue",
			"venue_id": "ID of venue",
			"allow_maybe_rsvp": "Set to \"1\" if this meetup allows members to rsvp \"Maybe\", or",
			"utc_rsvp_cutoff": "The date and time that members can RSVP until, in milliseconds since the epoch",
			"my_waitlist_status": "The current waitlist status for this event of the user making the request (could be \"waitlist\" or blank)",
			"photo_album_id": "ID of photo album attached to this event, only supplied if fields contains \"photo_album_id\"",
			"venue_zip": "zipcode of venue",
			"feelabel": "Fee label, or blank if this event has no fee or fee label",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"venue_city": "city of venue",
			"utc_rsvp_open_time": "The date and time that members can begin to RSVP, in milliseconds since the epoch",
			"rating_count": "The number of ratings that have been submitted for the event. If the event hasn't happened yet or there are no ratings submitted, this field will default to 0",
			"venue_state": "state of venue",
			"lat, lon": "Latitude and longitude coordinates of group location",
			"rsvpcount": "Number of \"yes\" or \"maybe\" rsvps to this event, including guests.",
			"photo_count": "Number of photos in an album associated with this event, only supplied if fields contains \"photo_album_id\"",
			"no_rsvpcount": "Number of \"no\" rsvps to this event",
			"feecurrency": "Currency of the fee for this event",
			"name": "The name (title) of the event",
			"myrsvp": "The current RSVP status for this event of the user making the request (could be \"yes\",\"no\",\"maybe\", or \"none\")",
			"time": "The date and time that the event will take place",
			"maybe_rsvpcount": "Number of \"maybe\" rsvps to this event, including guests",
			"organizer_name": "Name of the organizer of this Meetup group",
			"updated": "The last date and time that the event's information was modified",
			"venue_map": "URL of a map indicating the venue location",
			"status": "Description of the event, see text_format above"
		},
		"name": "Events",
		"orders": {
			"topic": "the topic of the event",
			"location": "group location, country, state [if present], city",
			"time": "event time",
			"updated": "event updated field",
			"group": "the name of the group having the event"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameters must be supplied with the request. Location-based queries are deprecated. Use the \/2\/open_events API for location-based queries instead.",
		"group": "deprecated",
		"desc": "Deprecated API method for accessing meetup events. Please see [\/2\/events](\/meetup_api\/docs\/2\/events\/) and [\/2\/open_events](\/meetup_api\/docs\/2\/open_events\/) for replacements."
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"and_text": "Changes the interpretation of the \"text\" field from OR'd terms to AND'd terms",
			"*lat": "A valid latitude, limits the returned group events to those within radius miles",
			"*zip": "A valid US zip code, limits the returned groups to those within radius miles",
			"*country": "A valid country code",
			"*topic": "Return events in the specified topic or topics specified by commas. This is the topic \"urlkey\" returned by the Topics method. If all supplied topics are unknown, a 400 error response is returned with the code \"badtopic\".",
			"*city": "A valid city",
			"limited_events": "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility, timezone. Value must be true or false.",
			"text_format": "Format of the description text, \"html\" or \"plain\". Defaults to \"html\"",
			"*state": "If searching in a country with states, a valid 2 character state code",
			"*text": "Events that contain the given term or terms somewhere in their content. The terms are OR'd by default. Separate terms with \" AND \" for events that have combined terms. To have terms automatically AND'd, set the \"and_text\" to true",
			"*category": "Return events in the specified category or categories specified by commas. This is the category id returned by the Categories method.",
			"*lon": "A valid longitude, limits the returned group events to those within radius miles",
			"time": "Return events scheduled within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above). Note: to retrieve past events you must also update status value",
			"radius": "Radius, in miles for geographic requests, default 25.0 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area",
			"fields": "Request that additional fields (separated by commas) be included in the output",
			"status": "Status may be \"upcoming\", \"past\" or both separated by a comma. The default is \"upcoming\" only"
		},
		"path": "\/2\/open_events",
		"http_method": "GET",
		"examples": "\nPhotography Meetups happening within the next week. The time range is unbounded on the left but status defaults to \"upcoming\":\n\n    https:\/\/api.meetup.com\/2\/open_events.xml?topic=photo&time=,1w&key=ABDE12456AB2324445\n\nMeetups around New York within the past week. The time range is unbounded on the right:\n\n    https:\/\/api.meetup.com\/2\/open_events.xml?zip=10012&time=-1w,&amp;status=past&key=ABDE12456AB2324445\n\nMeetups mentioning racquetball in the past or next week:\n\n    https:\/\/api.meetup.com\/2\/open_events.xml?text=racquetball&time=-1w,1w&status=past,upcoming&key=ABDE12456AB2324445\n",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
			"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
			"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
			"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
				"id": "Question identifier",
				"question": "Question text",
				"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
			}],
			"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
			"distance": "Distance in miles from the search location, if one was specified",
			"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
			"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
			"fee": ["Fee info returned when payment is defined", {
				"amount": "Amount of the fee",
				"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per person\"",
				"currency": "Currency accepted for fee",
				"label": "Fee label, typically \"Price\"",
				"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
			}],
			"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
				"count": "Number of ratings been collected",
				"average": "Average of collected ratings"
			}],
			"why": "We should do this because...",
			"description": "Description of the event.",
			"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
			"short_link": "Returned when fields request parameter contains \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
			"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
				"member_id": "The host's member id",
				"photo": ["Member photo if one is exists", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_name": "The host's member name"
			}],
			"id": "The event id. May be numeric or alphanumeric, always served as a string",
			"simple_html_description": "Optional field, description of the event in simple HTML format.",
			"photo_url": "URL of the event photo, if one exists",
			"publish_status": "\"published\" or \"draft\" only visible to organizers",
			"group": ["Group that is hosting the event", {
				"topics": ["Optional field. Topics related to this group", {
					"urlkey": "Unique keyword used to identify this topic",
					"name": "Topic name",
					"id": "Topic ID"
				}],
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"group_lon": "Approximate group longitude",
				"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
				"name": "Group name",
				"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
					"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
					"status": "The member's status. May be one of 'active' or 'pending'"
				}],
				"id": "Group id",
				"category": ["Optional field. Category of this group", {
					"name": "Display name of the category",
					"id": "Numeric identifier of the category",
					"shortname": "String identifier of the category"
				}],
				"urlname": "Group URL name",
				"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
					"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
					"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
					"fee": "Numeric fee value",
					"currency": "Currency in which the fee is declared",
					"fee_desc": "Description of fee",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"reasons_other": "An additional reason if specified.",
					"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
				}],
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
			"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"open_time": "UTC time that members may begin to RSVP",
				"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"created": "UTC creation time of the event, in milliseconds since the epoch",
			"maybe_rsvp_count": "Number of maybe RSVPs including guests",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"event_url": "URL of the event's page on meetup.com",
			"announced": "Organizers and hosts can see if the event was announced",
			"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
			"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
			"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"member_id": "Member's ID",
					"name": "Name of the member",
					"self": ["A small set of data representing the authenticated member's context with this member", {
						"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
					}]
				}],
				"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
				"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
				"created": "Creation time of the RSVP, in milliseconds since the epoch.",
				"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}]
			}],
			"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "The name of the event",
			"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"rated": "Boolean indicator of whether the current member rated the event or not",
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
				"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
				"rsvp": ["Member's RSVP, if any", {
					"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
					"guests": "number of guests",
					"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
				}]
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "UTC last modified time of the event, in milliseconds since the epoch",
			"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
		},
		"name": "OpenEvents",
		"orders": {
			"trending": "you will likely want to specify \"desc=true\" to get the best trending results first.",
			"time": "(default order) ascending",
			"distance": "ordering is approximate and will not exactly match the values in the \"distance\" field."
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.\n\nFor geo-based requests, you may provide a location in one of three ways. By `lat` and `lon`, by `zip`, or by `country`, `city`, and optionally a `state`, if the provided country has states.\n\nSome groups, while remaining private, still wish to show some information about their events. You can include these events in results using the `limited_events` request parameter.",
		"group": "events",
		"desc": "Searches for recent and upcoming public events hosted by Meetup groups. Its search window  is the past one month through the next three months, and is subject to change. Open Events is optimized to search for current events by location, category, topic, or text, and only lists Meetups that have **3 or more RSVPs**. The number or results returned with each request is not guaranteed to be the same as the page size due to secondary filtering. If you're looking for a particular event or events within a particular group, use the standard [Events](\/meetup_api\/docs\/2\/events\/) method."
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"zip": "A valid US zip code, limits the returned groups to those within radius miles",
			"country": "A valid country code",
			"city": "A valid city",
			"lon": "A valid longitude, limits the returned group events to those within radius miles",
			"text_format": "Format of the description text, \"html\", \"plain\", or \"simplehtml\". Defaults to \"html\"",
			"category_id": "Comma delimited list of category ids to limit recommendations to",
			"page_token": "An opaque string used to page through results. This can be found appended to the 'next' link in the meta section of the response.",
			"state": "If searching in a country with states, a valid 2 character state code",
			"time": "Return events scheduled within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above). Note: to retrieve past events you must also update status value",
			"topic_id": "Comma delimited list of topics to help inform recommendation",
			"radius": "Radius, in miles for geographic requests, defaults to the member's preferred radius or 0.5 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area",
			"fields": "Request that additional fields (separated by commas) be included in the output",
			"with_friends": "Boolean parameter. When set to true, events hosted by groups you have friends in will be recommended",
			"self_groups": "set to \"include\" or \"exclude\" groups the authorized member belongs to. The default is \"include\". This includes groups in locations that may differ than the provided location",
			"lat": "A valid latitude, limits the returned group events to those within radius miles"
		},
		"path": "\/2\/concierge",
		"http_method": "GET",
		"examples": "\nWith only authorization parameters supplied, concierge recommends\nupcoming Meetup events in the member's default location.\n\n    curl https:\/\/api.meetup.com\/2\/concierge?key=API_KEY_HERE\n",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
			"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
			"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
			"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
				"id": "Question identifier",
				"question": "Question text",
				"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
			}],
			"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
			"distance": "Distance in miles from the search location, if one was specified",
			"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
			"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
			"fee": ["Fee info returned when payment is defined", {
				"amount": "Amount of the fee",
				"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per person\"",
				"currency": "Currency accepted for fee",
				"label": "Fee label, typically \"Price\"",
				"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
			}],
			"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
				"count": "Number of ratings been collected",
				"average": "Average of collected ratings"
			}],
			"why": "We should do this because...",
			"description": "Description of the event.",
			"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
			"short_link": "Returned when fields request parameter contains \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
			"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
				"member_id": "The host's member id",
				"photo": ["Member photo if one is exists", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_name": "The host's member name"
			}],
			"id": "The event id. May be numeric or alphanumeric, always served as a string",
			"simple_html_description": "Optional field, description of the event in simple HTML format.",
			"photo_url": "URL of the event photo, if one exists",
			"publish_status": "\"published\" or \"draft\" only visible to organizers",
			"group": ["Group that is hosting the event", {
				"topics": ["Optional field. Topics related to this group", {
					"urlkey": "Unique keyword used to identify this topic",
					"name": "Topic name",
					"id": "Topic ID"
				}],
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"group_lon": "Approximate group longitude",
				"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
				"name": "Group name",
				"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
					"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
					"status": "The member's status. May be one of 'active' or 'pending'"
				}],
				"id": "Group id",
				"category": ["Optional field. Category of this group", {
					"name": "Display name of the category",
					"id": "Numeric identifier of the category",
					"shortname": "String identifier of the category"
				}],
				"urlname": "Group URL name",
				"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
					"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
					"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
					"fee": "Numeric fee value",
					"currency": "Currency in which the fee is declared",
					"fee_desc": "Description of fee",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"reasons_other": "An additional reason if specified.",
					"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
				}],
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
			"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"open_time": "UTC time that members may begin to RSVP",
				"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"created": "UTC creation time of the event, in milliseconds since the epoch",
			"maybe_rsvp_count": "Number of maybe RSVPs including guests",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"event_url": "URL of the event's page on meetup.com",
			"announced": "Organizers and hosts can see if the event was announced",
			"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
			"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
			"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"member_id": "Member's ID",
					"name": "Name of the member",
					"self": ["A small set of data representing the authenticated member's context with this member", {
						"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
					}]
				}],
				"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
				"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
				"created": "Creation time of the RSVP, in milliseconds since the epoch.",
				"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}]
			}],
			"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "The name of the event",
			"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"rated": "Boolean indicator of whether the current member rated the event or not",
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
				"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
				"rsvp": ["Member's RSVP, if any", {
					"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
					"guests": "number of guests",
					"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
				}]
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "UTC last modified time of the event, in milliseconds since the epoch",
			"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
		},
		"name": "Concierge",
		"orders": {
			"time": "ascending time is the default and only ordering"
		},
		"scopes": ["basic"],
		"param_notes": "For geo-based requests, you may provide a location in one of three ways. By `lat` and `lon`, by `zip`, or by `country`, `city`, and optionally a `state`, if the provided country has states.\n\nIf the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned. If no parameters are specified, Meetups are recommended for the upcoming week in the member's default location.\n\nPagination works a little differently in this method than in others. Rather than using \"offset\" and \"page\" request parameters, this method uses an opaque \"page_token\" request parameter to determine the page of results returned. If there are more results, the \"next\" property of the [meta section](\/meetup_api\/docs\/#meta) of the response will contain the next page's page_token. The number of results returned is not deterministic but a best-effort attempt will be made to return at least some.\n",
		"group": "events",
		"desc": "Recommends upcoming meetups for the authorized member in a given location and in thier groups"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*topic, groupnum": "Return the group with this topic and number",
			"*zip": "A valid US zip code, limits the returned groups to those within radius miles.",
			"*lat,lon": "A valid latitude and longitude, limits the returned groups to those within radius miles",
			"*group_urlname": "one or more separated by commas, includes no slashes",
			"*topic": "Only return groups in the specified topic [one topic allowed]",
			"*group_id": "one or more separated by commas",
			"*organizer_id": "one or more organizer IDs, separated by commas",
			"*domain": "one or more custom group domains, separated by commas",
			"*member_id": "one or more separated by commas, for groups this member belongs to",
			"radius": "Radius, in miles for geographic requests, default 25 -- maximum 100",
			"fields": "optional result fields, separated by commas.",
			"*category_id": "Only return groups in the specified category. [one category allowed]",
			"*country, city, state": "A valid country code, city and for the US, State. limits the returned groups to those within radius miles"
		},
		"path": "\/2\/groups",
		"http_method": "GET",
		"examples": "",
		"response": {
			"utc_offset": "This represents the utc time offset of the group's local time",
			"country": "Country of the group",
			"pending_members": "Optional fields parameter, visible only to the organizers, that represents the number of pending members for groups that require membership approval",
			"similar_groups": ["List of similar groups, best suited for the authorized member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups\/", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"photos": "Optional field, a small set of photos from the group. See documentation for \"photos\" above.",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"city": "City of the group",
			"timezone": "This represents the universal timezone identifier for the group",
			"primary_topic": "The groups primary topic",
			"rating": "0 to 5, average of group reviews",
			"link": "URL of group home",
			"description": "Group description",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, \"true\" when the group description has been saved in a simplified HTML format, \"false\" otherwise.",
			"group_photo": ["Main photo associated with the group", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "-",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for the thumbnail sized photo"
			}],
			"photos": ["Optional field, a small set of photos from the group", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "-",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for the thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"other_services": ["Optional fields parameter for linked services", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"join_mode": "\"open\", \"closed\", or \"approval\"",
			"approved": "Optional field, true if this group has been approved. New groups are generally approved (or removed) soon after creation.",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"sponsors": ["Optional field, sponsors of this group", {
				"image_url": "Image representing the sponsorship",
				"name": "Name of the sponsor",
				"details": "Longer information about the sponsorship, may include HTML",
				"redeem": "If the sponsorship is a perk and the authorized user belongs to the group, instructions for redeeming the perk",
				"url": "Link to sponsor's site",
				"info": "Short description of the sponsorship"
			}],
			"members": "Current number of members in the group",
			"id": "Group ID",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML format. This value is translated to HTML to update the description.",
			"urlname": "Unique group name as it appears in the URL, no slashes",
			"membership_dues": ["Optional fields parameter. Returns the Group's membership dues info", {
				"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
				"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
				"fee": "Numeric fee value",
				"currency": "Currency in which the fee is declared",
				"fee_desc": "Description of fee",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"reasons_other": "An additional reason if specified.",
				"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
			}],
			"lat": "Latitude",
			"next_event": ["Optional fields parameter. the next upcoming event, if the group has one", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any Member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list",
			"ga_code": "Optional field return the google analytics code for the group. Only members that can edit group settings can see this",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"questions": ["List of questions asked by organizer", {
					"question": "The text of the question",
					"id": "Unique identifier for the questions."
				}],
				"photo_req": "\"1\" if required, \"0\" otherwise",
				"questions_req": "\"1\" if required, \"0\" otherwise"
			}],
			"visibility": "\"public\", \"public_limited\", or \"members\" only",
			"topics": ["Topics related to this group", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"created": "Date and time that the group was founded, in milliseconds since the epoch",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"member_id": "Member's ID",
				"member_state": "Optional field",
				"member_city": "Optional field",
				"name": "Name of the member",
				"photo": ["The organizer photo, where defined", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_country": "Optional field"
			}],
			"last_event": ["Optional fields parameter. The last hosted event, if the group has one", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Group name",
			"self": ["Optional field, contains details specific to the authorized user if an active member of this group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"membership_dues": ["If the group requires membership dues, this field will include the authenticated member's dues info", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
						"days_remaining": "The number of days remaining in the member's trial period"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
				}],
				"status": "Optional fields property returned when 'self_status' is provided. Indicates the authorized user's membership with this group. Value may be one of pending, active, blocked, pending_payment or none"
			}],
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"category": ["Category associated with this group", {
				"name": "Display name of the category",
				"id": "Numeric identifier of the category",
				"shortname": "String identifier of the category"
			}],
			"who": "what the group calls its members"
		},
		"name": "Groups",
		"orders": {
			"name": "the name of the group",
			"location": "group location, country, state [if present], city",
			"id": "group creation time [newest first]",
			"members": "number of members [largest first]"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. Answers to questions are expected to follow the naming convention: answer_{question_id}=myanswer when joining with the [Profile Create](\/meetup_api\/docs\/2\/profile) method.",
		"group": "groups",
		"desc": "Fetch information about Meetup Groups."
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*rsvp": "Filters events by the currently authenticated member's RSVP status. May be a comma delimited list of \"yes\", \"no\", \"waitlist\", \"maybe\" or \"none\"",
			"*group_urlname": "Path to group from meetup.com, no slashes",
			"*event_id": "Multiple ids may be separated with commas",
			"*group_id": "Multiple ids may be separated with commas",
			"limited_events": "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility, timezone. Value must be true or false.",
			"text_format": "Format of the description text, \"html\" or \"plain\". Defaults to \"html\"",
			"*group_domain": "Group custom domain",
			"*venue_id": "Multiple ids may be separated with commas",
			"*member_id": "Single member id, to find events in this member's groups",
			"time": "Return events scheduled within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above). Note: to retrieve past events you must also update status value",
			"fields": "Request that additional fields (separated by commas) be included in the output",
			"status": "Status may be \"upcoming\", \"past\", \"proposed\", \"suggested\", \"cancelled\", \"draft\" or multiple separated by a comma. The default is \"upcoming\", which includes Meetups that are happening now according to their **duration**. Meetups that are \"proposed\" or \"suggested\" do not have a date assigned; the former are listed on the site as <i>official<\/i> while the latter appear as <i>in the making<\/i>. Drafts are only visible to organizers of groups hosting the events."
		},
		"path": "\/2\/events",
		"http_method": "GET",
		"examples": "\nUpcoming and current events in ny-tech: [Console &rarr;](\/meetup_api\/console\/?path=\/2\/events&group_urlname=ny-tech)\n\nUpcoming and current events in ny-tech including my status: [Console &rarr;](\/meetup_api\/console\/?path=\/2\/events&group_urlname=ny-tech&fields=self)\n    ",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
			"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
			"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
			"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
				"id": "Question identifier",
				"question": "Question text",
				"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
			}],
			"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
			"distance": "Distance in miles from the search location, if one was specified",
			"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
			"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
			"fee": ["Fee info returned when payment is defined", {
				"amount": "Amount of the fee",
				"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per person\"",
				"currency": "Currency accepted for fee",
				"label": "Fee label, typically \"Price\"",
				"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
			}],
			"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
				"count": "Number of ratings been collected",
				"average": "Average of collected ratings"
			}],
			"why": "We should do this because...",
			"description": "Description of the event.",
			"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
			"short_link": "Returned when fields request parameter contains \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
			"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
				"member_id": "The host's member id",
				"photo": ["Member photo if one is exists", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_name": "The host's member name"
			}],
			"id": "The event id. May be numeric or alphanumeric, always served as a string",
			"simple_html_description": "Optional field, description of the event in simple HTML format.",
			"photo_url": "URL of the event photo, if one exists",
			"publish_status": "\"published\" or \"draft\" only visible to organizers",
			"group": ["Group that is hosting the event", {
				"topics": ["Optional field. Topics related to this group", {
					"urlkey": "Unique keyword used to identify this topic",
					"name": "Topic name",
					"id": "Topic ID"
				}],
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"group_lon": "Approximate group longitude",
				"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
				"name": "Group name",
				"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
					"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
					"status": "The member's status. May be one of 'active' or 'pending'"
				}],
				"id": "Group id",
				"category": ["Optional field. Category of this group", {
					"name": "Display name of the category",
					"id": "Numeric identifier of the category",
					"shortname": "String identifier of the category"
				}],
				"urlname": "Group URL name",
				"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
					"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
					"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
					"fee": "Numeric fee value",
					"currency": "Currency in which the fee is declared",
					"fee_desc": "Description of fee",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"reasons_other": "An additional reason if specified.",
					"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
				}],
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
			"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"open_time": "UTC time that members may begin to RSVP",
				"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"created": "UTC creation time of the event, in milliseconds since the epoch",
			"maybe_rsvp_count": "Number of maybe RSVPs including guests",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"event_url": "URL of the event's page on meetup.com",
			"announced": "Organizers and hosts can see if the event was announced",
			"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
			"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
			"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"member_id": "Member's ID",
					"name": "Name of the member",
					"self": ["A small set of data representing the authenticated member's context with this member", {
						"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
					}]
				}],
				"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
				"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
				"created": "Creation time of the RSVP, in milliseconds since the epoch.",
				"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}]
			}],
			"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "The name of the event",
			"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"rated": "Boolean indicator of whether the current member rated the event or not",
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
				"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
				"rsvp": ["Member's RSVP, if any", {
					"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
					"guests": "number of guests",
					"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
				}]
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "UTC last modified time of the event, in milliseconds since the epoch",
			"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
		},
		"name": "Events",
		"orders": {
			"time": "(default order) ascending"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. Some groups, while remaining private, still wish to show some information about their events. You can include these events in results using the `limited_events` request parameter.",
		"group": "events",
		"desc": "Access Meetup events using a group, member, or event id. Events in private groups are available only to authenticated members of those groups. To search events by topic or location, see [Open Events](\/meetup_api\/docs\/2\/open_events)."
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event",
		"response_notes": "If successful, this method returns an HTTP 201 Created response with a Location header containing the Event Get method for this event. 401 Unauthorized is returned if the currently authenticated member can not create meetups in the specified group. A 400 error response with a code field set to \"spam_error\" may be returned if any of the provided event content appears to contain spam. The content body is the same as that returned by [Event Get](#get).",
		"api_version": "2",
		"params": {
			"rsvp_limit": "Total number of RSVPs available for the event",
			"rsvp_open": "Users with permission may set the RSVP open time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.",
			"venue_visibility": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\"",
			"hosts": "Up to 5 comma-separated valid member ids to be hosts for the event. If hosts is not provided, the authorized member is the default host",
			"question_{index}": "Those with permission may include up to 6 survey questions for the event with each being up to 250 characters. See the parameter notes section for more information",
			"*group_urlname": "URL name of the Group hosting the event",
			"why": "We should do this because... May not be longer than 250 characters.",
			"description": "Longer description of the event, in HTML. May not be longer than 50000 characters.",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"*group_id": "Group hosting the event",
			"rsvp_close": "Users with permission may set the RSVP close time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.",
			"duration": "Event duration in milliseconds. When not specified, a default of 3 hours may be assumed by applications. To clear event duration, set this to 0",
			"*name": "Name of the event. May not be longer than 80 characters.",
			"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
			"simple_html_description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters.",
			"time": "Event start time in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.",
			"venue_id": "Numeric identifier of a venue",
			"publish_status": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on \/2\/event queries."
		},
		"path": "\/2\/event",
		"http_method": "POST",
		"examples": "",
		"name": "Event Create",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "All required parameters must be supplied. This method requires parameters encoded in application\/x-www-form-urlencoded format as an HTTP POST.\n\nSurvey questions may be submitted in the format \"question_{index}=questiontext\" where \"index\" is an integer representing the order the questions should be presented in. e.g. question_0=question1&question_1=question2.\n\nOrganizers of the hosting group may optionally save this event as a draft by setting \"publish_status\" to \"draft\". Drafts are then discoverable using the [\/2\/events](\/meetup_api\/docs\/2\/events) API setting the \"status\" request parameter to \"draft\"",
		"group": "events",
		"desc": ""
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event",
		"response_notes": "If successful, this method returns an HTTP 200 OK response. 401 Unauthorized is returned if the currently authenticated member can not edit the specified Meetup. A 400 error response with a code field set to \"spam_error\" may be returned if any of the provided event content appears to contain spam. The content body is the same as that returned by [Event Get](#get).",
		"api_version": "2",
		"params": {
			"lat,lon": "Updates to the venue's latitude and longitude. When present, both must be provided",
			"rsvp_limit": "Total number of RSVPs available for the event. To remove this limit, set this to 0",
			"rsvp_open": "Users with permission may set the RSVP open time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.",
			"venue_visibility": "Controls the visibility of venue. May be one of \"public\" or \"members\"",
			"hosts": "Up to 5 valid member ids to be hosts for the event.",
			"question_{index}": "Those with permission may include up to 6 survey questions with each being up to 250 characters, including edited questions, for the event. See the parameter notes section for more information",
			"why": "We should do this because... May not be longer than 250 characters.",
			"description": "Longer description of the event, in HTML. May not be longer than 50000 characters.",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"rsvp_close": "Users with permission may set the RSVP close time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format. To unset rsvp_close, set this to 0",
			"announce": "Organizers and hosts may set this to true to announce a Meetup.",
			"duration": "Event duration in milliseconds. When not specified, a default of 3 hours may be assumed by applications. To clear event duration, set this to 0",
			"group_id": "Group to hold the event",
			"name": "Event name. May not be longer than 80 characters.",
			"guest_limit": "number of guests members may include in their RSVP, 0 or more",
			"simple_html_description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters.",
			"time": "event start time in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.",
			"question_edit_{id}": "Those with permission may include up to 6 survey questions with each being up to 250 characters, including new questions. To delete a question submit this parameter with an empty value",
			"venue_id": "Numeric identifier of a venue. To unset the event's venue, set this to 0",
			"publish_status": "If you are an organizer of the group, you may set this to \"draft\" or \"published\". Setting state to \"draft\" will require a status=draft filter on \/2\/event queries."
		},
		"path": "\/2\/event\/:id",
		"http_method": "POST",
		"examples": "",
		"name": "Event Edit",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. This method requires an HTTP POST.\n\nIf a lat & lon are provided, the event's venue will be updated accordingly.\n\nSurvey questions may be submitted in the format \"question_{index}=questiontext\" where \"index\" is an integer representing the order the questions should be presented in. e.g. question_0=question1&question_1=question2.\n\nTo view existing survey questions supply the request parameter fields=survey_questions with the [Event Get](#get) To edit questions you may submit questions in the format \"question_edit_{id}=updatedquestion\" where id is the id of the question. To clear an existing question for the event survey, just submit question_edit_{id} with an empty value.\n\nOrganizers may publish a draft event by posting with the \"publish_status\" request parameter set to \"published\". Organizers and hosts of the event may also optionally announce an unannounced event by posting with the \"announce\" request parameter set to \"true\"",
		"group": "events",
		"desc": "Update an existing Meetup"
	}, {
		"formats": ["json", "xml"],
		"prefer": "\/:urlname\/events\/:id",
		"doc_path": "\/2\/event",
		"api_version": "2",
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"limited_events": "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility, timezone. Value must be true or false.",
			"text_format": "Format of the description in the response, \"html\" or \"plain\". Defaults to \"html\""
		},
		"path": "\/2\/event\/:id",
		"http_method": "GET",
		"examples": "",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
			"rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
			"photo_sample": ["A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
			"survey_questions": ["Returned when fields request parameter contains \"survey_questions\" for events with surveys", {
				"id": "Question identifier",
				"question": "Question text",
				"required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
			}],
			"announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
			"distance": "Distance in miles from the search location, if one was specified",
			"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
			"timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
			"fee": ["Fee info returned when payment is defined", {
				"amount": "Amount of the fee",
				"accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per person\"",
				"currency": "Currency accepted for fee",
				"label": "Fee label, typically \"Price\"",
				"required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
			}],
			"rating": ["Only past events have this field, an aggregate of anonymous ratings", {
				"count": "Number of ratings been collected",
				"average": "Average of collected ratings"
			}],
			"why": "We should do this because...",
			"description": "Description of the event.",
			"is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
			"short_link": "Returned when fields request parameter contains \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
			"event_hosts": ["List of members hosting the event, only returned if requested in the fields parameter.", {
				"member_id": "The host's member id",
				"photo": ["Member photo if one is exists", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_name": "The host's member name"
			}],
			"id": "The event id. May be numeric or alphanumeric, always served as a string",
			"simple_html_description": "Optional field, description of the event in simple HTML format.",
			"photo_url": "URL of the event photo, if one exists",
			"publish_status": "\"published\" or \"draft\" only visible to organizers",
			"group": ["Group that is hosting the event", {
				"topics": ["Optional field. Topics related to this group", {
					"urlkey": "Unique keyword used to identify this topic",
					"name": "Topic name",
					"id": "Topic ID"
				}],
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"group_lon": "Approximate group longitude",
				"photos": ["Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"group_photo": ["Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Unique photo id",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
				"name": "Group name",
				"self": ["Returned when fields request parameter contains 'self_membership_dues' or 'group_status'", {
					"membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
					"status": "The member's status. May be one of 'active' or 'pending'"
				}],
				"id": "Group id",
				"category": ["Optional field. Category of this group", {
					"name": "Display name of the category",
					"id": "Numeric identifier of the category",
					"shortname": "String identifier of the category"
				}],
				"urlname": "Group URL name",
				"membership_dues": ["Returned when fields request parameter contains \"group_membership_dues\"", {
					"refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
					"reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
					"fee": "Numeric fee value",
					"currency": "Currency in which the fee is declared",
					"fee_desc": "Description of fee",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"reasons_other": "An additional reason if specified.",
					"required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
				}],
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
			"rsvp_rules": ["Conditions set by the organizer, only returned if requested in the fields parameter.", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"open_time": "UTC time that members may begin to RSVP",
				"closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"created": "UTC creation time of the event, in milliseconds since the epoch",
			"maybe_rsvp_count": "Number of maybe RSVPs including guests",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"event_url": "URL of the event's page on meetup.com",
			"announced": "Organizers and hosts can see if the event was announced",
			"photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
			"rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
			"rsvp_sample": ["A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"member_id": "Member's ID",
					"name": "Name of the member",
					"self": ["A small set of data representing the authenticated member's context with this member", {
						"friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
					}]
				}],
				"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
				"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
				"created": "Creation time of the RSVP, in milliseconds since the epoch.",
				"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}]
			}],
			"series": ["Returned when fields request parameter contains \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "The name of the event",
			"self": ["Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"rated": "Boolean indicator of whether the current member rated the event or not",
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
				"actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
				"rsvp": ["Member's RSVP, if any", {
					"answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
					"guests": "number of guests",
					"response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
				}]
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "UTC last modified time of the event, in milliseconds since the epoch",
			"trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
		},
		"name": "Event Get",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. Some groups, while remaining private, still wish to show some information about their events. You can include these events in results using the `limited_events` request parameter.",
		"group": "deprecated",
		"desc": "Deprecated API method for retrieving a single meetup. Please see [\/:urlname\/events\/:id](\/meetup_api\/docs\/:urlname\/events\/:id#get) for its replacement"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/event\/:id",
		"http_method": "DELETE",
		"examples": "",
		"name": "Event Delete",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "events",
		"desc": "Deletes a specified meetup"
	}, {
		"formats": ["json", "xml"],
		"prefer": "\/2\/photos",
		"params": {
			"*topic, groupnum": "return photos for the group with given topic and number",
			"*topic": "Return photos in this topic",
			"*group_urlname": "return photos for the group with given custom URL path",
			"*group_id": "Return photos in groups with these ID numbers [separated by commas]",
			"*topic_id": "Return photos in topics with this ID number",
			"*album_id": "return photos for the albums with the given id, separated by commas"
		},
		"path": "\/photos",
		"http_method": "GET",
		"examples": "\nReturn public photos from the Moms topics.\n\n    https:\/\/api.meetup.com\/photos.json\/?topic=moms&key=ABDE12456AB2324445\n    ",
		"response": {
			"descr": "A description of the photo",
			"created": "The time and date that the photo was created",
			"link": "URL where the photo can be viewed",
			"albumtitle": "The name of the photo album that the photo belongs to",
			"album_id": "Unique identifier of the photo album",
			"captions": "An array containing the captions of the photos in the album",
			"member_url": "URL of the public profile of the member who posted the photo"
		},
		"name": "Photos",
		"orders": {
			"photo_album_id": "the id of the photo, (newer = higher) "
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "deprecated",
		"desc": "API method for accessing meetup photos"
	}, {
		"formats": ["json", "xml"],
		"prefer": "\/2\/cities",
		"params": {
			"country": "Return cities in these countries [separate countries with commas]",
			"state": "Return cities in these states [separate states with commas]"
		},
		"path": "\/cities",
		"http_method": "GET",
		"examples": "\nReturn all cities in New York.\n\n    https:\/\/api.meetup.com\/cities.xml\/?state=ny&key=ABDE12456AB2324445\n",
		"response": {
			"lat,lon": "The latitude and longitude of the city's location",
			"country, state, zip": "The country that the city is in, plus state and zip for cities in the U.S",
			"city": "The name of the city",
			"members": "The number of members located in the city"
		},
		"name": "Cities",
		"orders": {
			"name": "the city name",
			"members": "total members in the city"
		},
		"scopes": ["basic"],
		"group": "deprecated",
		"desc": "API method for accessing meetup cities"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"country": "A valid country code",
			"query": "Search term and\/or zip to look for (if this is specified, max result size limited to 10)",
			"lon": "Longitude to search",
			"state": "A valid state code for the given country, if the country has states",
			"radius": "When searching by lat\/lon only, specify a radius to search (default 50 miles)",
			"lat": "Latitude to search"
		},
		"path": "\/2\/cities",
		"http_method": "GET",
		"examples": "",
		"response": {
			"zip": "The zip code of the city. For cities in countries without ZIP codes, a placeholder will be returned",
			"country": "The ISO_3166-1 country code for the country which contains the city",
			"localized_country_name": "The name of the country which contains the city",
			"distance": "The distance away from the provided coordinates, if applicable",
			"city": "The name of the city",
			"lon": "The longitude of the city",
			"ranking": "Indicates the best-match ranking of this result",
			"id": "Numeric identifier of the city",
			"state": "The state which contains the city, if applicable",
			"member_count": "The number of Meetup members in the city",
			"name_string": "The full name of the city, as returned by query search, if applicable",
			"lat": "The latitude of the city"
		},
		"name": "Cities",
		"orders": {
			"distance": "When lat\/lon\/query provided, sort matches by distance to coordinates",
			"size": "(default order) number of members in the city: descending",
			"smart": "Sort by size, but if a match is close to given lat\/lon, float to top. Only works when query provided"
		},
		"param_notes": "This method requires no authentication but is subject to [request limiting](\/meetup_api\/docs\/#limits) based on client IP . This search is location based. A lat and lon must be supplied together or a query or the search will be based on your geo-located ip",
		"group": "cities",
		"desc": "Returns Meetup cities. This method supports search by latitude\/longitude\/radius, by country\/state, by query term\/zip, or a combination of all of these. Location-only searches by lat and lon return all cities within a radius of the provided coordinates. Searches with a query return up to 10 cities matching the term, and can be sorted by size or distance to a given coordinate. 'smart' ordering can be used to return the match(es) with the highest member_count, unless a smaller size match exists nearby the given coordinates. Query searches are supported for country but not country and state"
	}, {
		"formats": ["json", "rss", "atom", "xml"],
		"prefer": "\/2\/members",
		"params": {
			"*topic,groupnum": "Return members for the group with given topic and number",
			"*group_urlname": "Return members for the group with the given custom URL path",
			"*relation": "Supply the string \"self\" as the value for this parameter to get the information of the member linked to the API key making the request",
			"*member_id": "Return the member with this ID",
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"*group_id": "Return members in groups with these ID numbers, separated by commas",
			"*service": "Match users by the external services they've linked to their member account, specified as \"servicename:identifier\". For example, \"service=twitter:@MeetupAPI\" finds any member account that lists @MeetupAPI as its Twitter name (none, currently). You can query against several at a time by separating them with commas."
		},
		"path": "\/members",
		"http_method": "GET",
		"examples": "\nReturn active members in group 176399\n\n    https:\/\/api.meetup.com\/members.json\/?group_id=176399&key=ABDE12456AB2324445\n\nGet your meetup identify\n\n    https:\/\/api.meetup.com\/members.json\/?relation=self&key=ABDE12345AB2324445\n\n[Try it out](\/meetup_api\/console\/?path=\/members&relation=self#browser)\n    ",
		"response": {
			"topics": ["A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"joined": "Date and time a member joined",
			"link": "URL to the member's profile page on meetup.com",
			"bio": "A description of the member",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"lat, lon": "Latitude and longitude coordinates of the members reported city",
			"name": "",
			"visited": "Date and time of member's last activity",
			"id": "The member's id",
			"photo_url": "Link to the profile photo of the member",
			"lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
			"country, city, state": "Country, City, (and for the US, State) the member has provided",
			"messaging_pref": "returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\""
		},
		"name": "Members",
		"orders": {
			"name": "the name of the member",
			"visited": "member's most recent activity"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group.",
		"group": "deprecated",
		"desc": "API method for accessing members of Meetup Groups"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*topic,groupnum": "Return members for the group with given topic and number",
			"*group_urlname": "Return members for the group with the given custom URL path",
			"*member_id": "Return the member with this ID",
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"*group_id": "Return members in groups with these ID numbers, separated by commas",
			"*service": "Match users by the external services they've linked to their member account, specified as \"servicename:identifier\". For example, \"service=twitter:@MeetupAPI\" finds any member account that lists @MeetupAPI as its Twitter name (none, currently). You can query against several at a time by separating them with commas. Facebook identifiers should be provided as numeric values"
		},
		"path": "\/2\/members",
		"http_method": "GET",
		"examples": "Return active members in group 176399\n\n    https:\/\/api.meetup.com\/2\/members?group_id=176399&key=ABDE12456AB2324445\n\nGet your meetup identify\n\n    https:\/\/api.meetup.com\/members?member_id=self&key=ABDE12345AB2324445\n\n[Try it out](\/meetup_api\/console\/?path=\/2\/members&member_id=self#browser)",
		"response": {
			"birthday": ["If the authorized is the current member, the member's birthday based on provided information", {
				"month": "Month of birth",
				"year": "Year of birth",
				"day": "Day of birth"
			}],
			"gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
			"link": "URL to the member's profile page on meetup.com",
			"bio": "A description of the member",
			"privacy": ["Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member", {
				"groups": "may be 'hidden' or 'visible'",
				"bio": "may be 'hidden' or 'visible'",
				"photos": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
			}],
			"photos": "List of all the member's photos returned as an array of the representation of the photo property",
			"messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"id": "The member's id",
			"photo_url": "Link to the profile photo of the member",
			"lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
			"hometown": "Hometown of member",
			"topics": ["A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"joined": "Date and time a member joined in milliseconds since the epoch",
			"photo": ["The member's photo if available", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
			"lat, lon": "Latitude and longitude coordinates of the members reported city",
			"membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
			"facebook_connection": ["Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account", {
				"status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
			}],
			"name": "The member's name",
			"visited": "Date and time of member's last activity in milliseconds since the epoch",
			"self": ["Optional field, details particular to the authorized user.", {
				"common": ["What the authorized user and queried member have in common", {
					"groups": ["Groups the members both belong to", {
						"join_mode": "\"open\", \"approval\", or \"closed\"",
						"created": "Date and time that the group was founded, in milliseconds since the epoch",
						"name": "Group name",
						"group_lon": "Approximate group longitude",
						"id": "Group id",
						"urlname": "Group URL name",
						"group_lat": "Approximate group latitude",
						"who": "What the group calls its members"
					}],
					"friends": ["Members who are Facebook friends with both members", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"member_country": "Optional field",
						"member_state": "Optional field",
						"member_city": "Optional field"
					}]
				}],
				"blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
			}],
			"country, city, state": "Country, City, (and for the US, State) the member has provided",
			"messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
			"status": "The member's status. Currently always 'active' for registered members"
		},
		"name": "Members",
		"orders": {
			"name": "the name of the member (default order)",
			"visited": "member's most recent activity",
			"joined": "time member joined Meetup"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group.",
		"group": "members",
		"desc": "API method for accessing members of Meetup Groups"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/member",
		"api_version": "2",
		"params": {
			"fields": "comma-separate list of optional fields"
		},
		"path": "\/2\/member\/:id",
		"http_method": "GET",
		"examples": "",
		"response": {
			"birthday": ["If the authorized is the current member, the member's birthday based on provided information", {
				"month": "Month of birth",
				"year": "Year of birth",
				"day": "Day of birth"
			}],
			"gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
			"link": "URL to the member's profile page on meetup.com",
			"bio": "A description of the member",
			"privacy": ["Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member", {
				"groups": "may be 'hidden' or 'visible'",
				"bio": "may be 'hidden' or 'visible'",
				"photos": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
			}],
			"photos": "List of all the member's photos returned as an array of the representation of the photo property",
			"messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"id": "The member's id",
			"photo_url": "Link to the profile photo of the member",
			"lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
			"hometown": "Hometown of member",
			"topics": ["A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"joined": "Date and time a member joined in milliseconds since the epoch",
			"photo": ["The member's photo if available", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
			"lat, lon": "Latitude and longitude coordinates of the members reported city",
			"membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
			"facebook_connection": ["Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account", {
				"status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
			}],
			"name": "The member's name",
			"visited": "Date and time of member's last activity in milliseconds since the epoch",
			"self": ["Optional field, details particular to the authorized user.", {
				"common": ["What the authorized user and queried member have in common", {
					"groups": ["Groups the members both belong to", {
						"join_mode": "\"open\", \"approval\", or \"closed\"",
						"created": "Date and time that the group was founded, in milliseconds since the epoch",
						"name": "Group name",
						"group_lon": "Approximate group longitude",
						"id": "Group id",
						"urlname": "Group URL name",
						"group_lat": "Approximate group latitude",
						"who": "What the group calls its members"
					}],
					"friends": ["Members who are Facebook friends with both members", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"member_country": "Optional field",
						"member_state": "Optional field",
						"member_city": "Optional field"
					}]
				}],
				"blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
			}],
			"country, city, state": "Country, City, (and for the US, State) the member has provided",
			"messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
			"status": "The member's status. Currently always 'active' for registered members"
		},
		"name": "Member Get",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "members",
		"desc": "Retrieve a single member"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/member",
		"api_version": "2",
		"params": {
			"birthday": "Day you were born. Format should be in the form of yyyy or mmddyyyy. A value of -1 indicates that birthday data should be cleared.",
			"zip": "Valid zip code for city",
			"country": "Valid country code for your location",
			"hometown": "Hometown of member. Can not be longer than 64 characters",
			"remove_topics": "Comma-delimited list of topic ids to remove from your alert list",
			"gender": "Your gender (used for better recommendations). Value may be one of other, none, female, male",
			"photo_id": "A valid photo_id from the member's photos to set as the main profile photo. A value of 0 will unset the current photo",
			"city": "City name for your location",
			"topics_privacy": "Controls the visibility of the member's topics. May be one of visible, hidden",
			"facebook_privacy": "Controls the visibility of the member's facebook connection. May be one of visible, hidden. If the member has not connected their Facebook account, attempts to set this preference will do nothing.",
			"bio": "Free form text passage about you. must be less than 250 characters",
			"lon": "longitude of city",
			"groups_privacy": "Controls the visibility of the member's groups. May be one of visible, hidden",
			"add_topics": "Comma-delimited list of topics ids to add to your alert list",
			"sync_photo": "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id",
			"name": "The name of the current member",
			"bio_privacy": "Controls the visibility of the member's bio. May be one of visible, hidden",
			"photos_privacy": "Controls the visibility of the member's photos. May be one of visible, hidden",
			"lang": "Language preference used on the site. Valid values are en-us, en-au, de-de, es, es-es, fr-fr, it-it, pt-br, ja-jp, ko-kr, nl-nl, en_us, en_au, de_de, es, es_es, fr_fr, it_it, pt_br, ja_jp, ko_kr, nl_nl, en, en, de, es, es, fr, it, pt, ja, ko, nl",
			"radius": "radius, in miles to search for city given a lat and lon. default 25.0, max 100.0",
			"lat": "latitude of city",
			"messaging_pref": "This specifies the member's preference for being contacted from members on the site. Possible values are \"orgs_only\" meaning only group organizers can contact you, \"groups_only\" meaning only members of your group can contact you, or \"all_members\" meaning all members may contact you.",
			"city_id": "Valid city id from \/2\/cities method"
		},
		"path": "\/2\/member\/:id",
		"http_method": "POST",
		"examples": "",
		"response": {
			"birthday": ["If the authorized is the current member, the member's birthday based on provided information", {
				"month": "Month of birth",
				"year": "Year of birth",
				"day": "Day of birth"
			}],
			"gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
			"link": "URL to the member's profile page on meetup.com",
			"bio": "A description of the member",
			"privacy": ["Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member", {
				"groups": "may be 'hidden' or 'visible'",
				"bio": "may be 'hidden' or 'visible'",
				"photos": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
			}],
			"photos": "List of all the member's photos returned as an array of the representation of the photo property",
			"messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"id": "The member's id",
			"photo_url": "Link to the profile photo of the member",
			"lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
			"hometown": "Hometown of member",
			"topics": ["A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"joined": "Date and time a member joined in milliseconds since the epoch",
			"photo": ["The member's photo if available", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
			"lat, lon": "Latitude and longitude coordinates of the members reported city",
			"membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
			"facebook_connection": ["Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account", {
				"status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
			}],
			"name": "The member's name",
			"visited": "Date and time of member's last activity in milliseconds since the epoch",
			"self": ["Optional field, details particular to the authorized user.", {
				"common": ["What the authorized user and queried member have in common", {
					"groups": ["Groups the members both belong to", {
						"join_mode": "\"open\", \"approval\", or \"closed\"",
						"created": "Date and time that the group was founded, in milliseconds since the epoch",
						"name": "Group name",
						"group_lon": "Approximate group longitude",
						"id": "Group id",
						"urlname": "Group URL name",
						"group_lat": "Approximate group latitude",
						"who": "What the group calls its members"
					}],
					"friends": ["Members who are Facebook friends with both members", {
						"member_id": "Member's ID",
						"name": "Name of the member",
						"member_country": "Optional field",
						"member_state": "Optional field",
						"member_city": "Optional field"
					}]
				}],
				"blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
			}],
			"country, city, state": "Country, City, (and for the US, State) the member has provided",
			"messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
			"status": "The member's status. Currently always 'active' for registered members"
		},
		"name": "Member Edit",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "This method requires tls. Only the authorized user may edit their own properties. A city may be provided by either a city_id or a combination of lat and lon",
		"group": "members",
		"desc": "Edit the authorized member's attributes"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*topic, groupnum": "Group identification by topic, deprecated",
			"role": "if \"leads\", only profiles for members of the leadership team are included",
			"*group_urlname": "Return profiles for the group with the given custom URL path",
			"*member_id": "Return the profiles for members with these IDs, separated by commas",
			"fields": "comma delimited list of optional response properties. A value of \"membership_dues\" will populate membership dues for the authorized user or members of the groups the authorized user organizes",
			"*group_id": "Return profiles in the group with this ID",
			"status": "Status filter for members. Only organizers may see pending. Request must also contain a `group_id` or `group_urlname`. Status may be one of active, pending"
		},
		"path": "\/2\/profiles",
		"http_method": "GET",
		"examples": "\nReturn active member profiles in group 176399\n\n    https:\/\/api.meetup.com\/2\/profiles.json\/?group_id=176399&key=ABDE12456AB2324445\n    ",
		"response": {
			"member_id": "The member's id",
			"created, updated": "When this member profile was created and last updated, in milliseconds since the epoch.",
			"role": "If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)",
			"profile_url": "Link to the member's group profile page",
			"member_city": "Optional fields parameter for the Member's city",
			"additional": "Additional information supplied by the member",
			"answers": ["Array of answers to group profile questions. Unanswered questions are returned without the answer field", {
				"question": "Text of the question",
				"answer": "Text of the answer if answered",
				"question_id": "Unique ID of the question this answers"
			}],
			"bio": "Member's 'introduction' to the group",
			"photo": ["The member's photo if available", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"title": "Title assigned to the member in this group",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"site_url, site_name": "External site listed by the member",
			"member_state": "Optional fields parameter for the Member's state (when country is us)",
			"name": "The member's name",
			"visited": "Member's last visit to the group site, in milliseconds since the epoch",
			"comment": "What this member says about this group",
			"member_country": "Optional fields parameter for the Member's country code",
			"photo_url": "Link to the group profile photo of the member",
			"membership_dues": ["Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues", {
				"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
				"total_amount": "Total amount paid",
				"transaction_time": "Time the transaction was made in milliseconds since the epoch",
				"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
				"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
				"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
					"days": "The total number of trial days offered by the group",
					"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
					"days_remaining": "The number of days remaining in the member's trial period"
				}],
				"period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
			}],
			"group": ["The group this profile belongs to", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"status": "Value may be one of pending, active, blocked, pending_payment"
		},
		"name": "Profiles",
		"orders": {
			"member_id": "the id of the member",
			"joined": "time member joined this group",
			"interesting": "Order which may be interesting to the authorized member",
			"name": "the name of the member",
			"visited": "last visit to group pages (default order)",
			"updated": "profile updated field"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group. If querying for member_id alone, the member's 'hide groups' preference will be honored. 'Interesting' ordered searches only support searching by group_urlname or group_id. Only one of those may be supplied. ",
		"group": "profiles",
		"desc": "This method returns member *profiles* associated with a particular group. Meetup members have separate profiles for each group they join."
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/profile",
		"response_notes": "If successful, this method returns a 201 Created response with a Location header containing the [Profile Get](\/meetup_api\/docs\/2\/profile\/#get) URI to access this profile.\n\n400 Bad requests may be returned under certain conditions along with a response object containing information about the failure. The __code__ property of this may be one of\n\n * bad_group: an invalid group was provided\n * bad_member: an invalid member was provided\n * invalid_photo: an invalid photo_id was provided\n * missing_photo: a photo was required to join but one could not be resolved\n * member_exists: this member has already joined the group\n * member_banned: this member has been banned from the group\n * unjoinable_group: this group is no longer joinable\n * pending_payment: this member is pending a payment for the group\n * member_email: Meetup is not able to successfully send email to this member\n * member_unapproved: a previous membership request was declined\n * member_removed: this member was previously removed from the group\n * join_closed: this group is not allowing new members\n * join_viaweb: this join is not supported in the API, try joining via the website\n * membership_pending: this membership awaiting organizer approval\n * missing_intro: the request required a valid intro\n * missing_answer: the request was missing an answer to a required question\n * invalid_answer: the request contained invalid question answer\n * invalid_url: the invalid site_url\n * invalid_site_name: the site name was too long\n * unknown_error: a generic error\n\nThe __details__ property of this object will contain additional information. The content body of a successful request is the same of that returned by the [Profile Get](\/meetup_api\/docs\/2\/profile\/#getresponse) query method.",
		"api_version": "2",
		"params": {
			"site_name": "Name of member's site. Max length is 32",
			"photo_id": "photo_id of the photo to use for this profile",
			"site_url": "Link to member's site. Max length is 80",
			"*group_urlname": "Urlname of group to join",
			"intro": "Provides a Member an opportunity to tell the group about themselves",
			"new_photo": "file upload for a new member photo",
			"*group_id": "Id of group to join",
			"answer_{qid}": "Answers to questions from groups API join_info question fields"
		},
		"path": "\/2\/profile",
		"http_method": "POST",
		"examples": "\nJoin the open group foo-bar\n\n    curl -X POST 'https:\/\/api.meetup.com\/2\/profile'\n       -F 'group_urlname=foo-bar'\n       -F 'key=YOURKEY'\n\nJoin a group named foo-bar that requires answers to questions and an intro\n\n    # get the group's join info\n    curl 'https:\/\/api.meetup.com\/2\/groups\/?key=YOURKEY&group_urlname=foo-bar&fields=join_info'\n\n    # answer in POST to \/2\/profile\n    curl -X POST 'https:\/\/api.meetup.com\/2\/profile'\n       -F 'group_urlname=foo-bar'\n       -F 'intro=well hello'\n       -F 'answer_123=answering question 123'\n       -F 'answer_456=answer question 456'\n       -F 'key=YOURKEY'\n    ",
		"name": "Profile Create (Group Join)",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "This method requires an HTTP POST. All required parameters must be supplied. An intro and answers may be required based on the group the member is joining. To find out if a group requires an intro or answers to questions, query for the group through one of the [Groups methods](\/meetup_api\/docs\/2\/groups) providing setting the __fields__ parameter to __join_info__ and inspecting the __join_info__ in the results. Answers to the questions must be named using the convention __answer_{question_id}__.",
		"group": "profiles",
		"desc": "This method allows an authenticated member to join a group by creating a profile"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/profile",
		"response_notes": "If successful, this method responds with 200 OK. 401 Unauthorized is returned if the currently authenticated member can not edit the specified profile. The content body is the same as  that returned by the [Profile Get](\/meetup_api\/docs\/2\/profile\/#getresponse) query method. 400 responses may also contain the error codes listed in the [Profile Create](\/meetup_api\/docs\/2\/profile\/#createresponse) method with the addition of `invalid_role` which is returned when the role adjustment was failed to be applied.",
		"api_version": "2",
		"params": {
			"site_name": "Name of member's site. Max length is 32",
			"add_role": "Allows those with permission to assign one of the following roles: coorganizer, event_organizer, assistant_organizer",
			"photo_id": "photo_id of the photo to use for this profile. set to 0 to unset the current photo",
			"site_url": "Link to member's site. Max length is 80",
			"intro": "Provides a Member an opportunity to tell the group about themselves",
			"new_photo": "file upload for a new member photo",
			"title": "An organizer-defined member title.",
			"remove_role": "Allows those with permission to remove one of the following roles: coorganizer, event_organizer, assistant_organizer",
			"answer_{qid}": "Answers to questions from groups API join_info question fields"
		},
		"path": "\/2\/profile\/:gid\/:mid",
		"http_method": "POST",
		"examples": "",
		"name": "Profile Edit",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "The `gid` and `mid` in this method's path are group and member IDs, both needed to uniquely identify the member profile to be edited. An authenticated user may update their own profile by substituting \"self\" for the `mid`. All POST parameters are optional unless required by the group. Only the organizer of the group may edit the member's `title` and `role` within the group. Those are the only things the organizer may edit. When requesting to set a role with `add_role` the member's previous role will be cleared. Members may edit all other fields of their own profiles with the exception of `title`, `add_role`, and `remove_role`. This method requires an HTTP POST.",
		"group": "profiles",
		"desc": "Update a member's group profile"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/profile",
		"api_version": "2",
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output"
		},
		"path": "\/2\/profile\/:gid\/:mid",
		"http_method": "GET",
		"examples": "",
		"response": {
			"member_id": "The member's id",
			"created, updated": "When this member profile was created and last updated, in milliseconds since the epoch.",
			"role": "If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)",
			"profile_url": "Link to the member's group profile page",
			"member_city": "Optional fields parameter for the Member's city",
			"additional": "Additional information supplied by the member",
			"answers": ["Array of answers to group profile questions. Unanswered questions are returned without the answer field", {
				"question": "Text of the question",
				"answer": "Text of the answer if answered",
				"question_id": "Unique ID of the question this answers"
			}],
			"bio": "Member's 'introduction' to the group",
			"photo": ["The member's photo if available", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"title": "Title assigned to the member in this group",
			"other_services": ["Third-party services associated with the member account", {
				"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
					"identifier": "identifier for the service, a username or URL"
				}]
			}],
			"site_url, site_name": "External site listed by the member",
			"member_state": "Optional fields parameter for the Member's state (when country is us)",
			"name": "The member's name",
			"visited": "Member's last visit to the group site, in milliseconds since the epoch",
			"comment": "What this member says about this group",
			"member_country": "Optional fields parameter for the Member's country code",
			"photo_url": "Link to the group profile photo of the member",
			"membership_dues": ["Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues", {
				"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
				"total_amount": "Total amount paid",
				"transaction_time": "Time the transaction was made in milliseconds since the epoch",
				"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
				"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
				"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
					"days": "The total number of trial days offered by the group",
					"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
					"days_remaining": "The number of days remaining in the member's trial period"
				}],
				"period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
			}],
			"group": ["The group this profile belongs to", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"status": "Value may be one of pending, active, blocked, pending_payment"
		},
		"name": "Profile Get",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "profiles",
		"desc": "Retrieves a single group profile"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/profile",
		"response_notes": "If successful, this method responds with 200 OK, otherwise a 400 Bad request is returned or 401 if the profile being deleted does not belong to the authorized member. This method requires HTTP DELETE.",
		"api_version": "2",
		"params": {
			"exit_comment": "Optional message to the organizer when leaving"
		},
		"path": "\/2\/profile\/:gid\/:mid",
		"http_method": "DELETE",
		"examples": "",
		"name": "Profile Delete (Leave Group)",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. Only the authorized member is permitted leave groups they do not organize. This method may not be used by organizers to remove members.",
		"group": "profiles",
		"desc": "Deletes a member's group profile"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/photo",
		"response_notes": "Returns a HTTP 200 response if the delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/photo\/:id",
		"http_method": "DELETE",
		"examples": "",
		"name": "Event Photo Delete",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. Authorized user must be the original poster of the photo or the organizer of the group the photo was posted in",
		"group": "photos",
		"desc": "Deletes a specified event photo"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/photo",
		"api_version": "2",
		"params": {
			"caption": "Photo caption of up to 255 characters"
		},
		"path": "\/2\/photo\/:id",
		"http_method": "POST",
		"examples": "",
		"response": {
			"comment_count": "Optional fields parameter. When requested, this returns the number of comments made about this photo",
			"site_link": "URL for photo in photo album on meetup.com",
			"highres_link": "URL for the photo at its maximum size",
			"photo_id": "Unique identifier of the photo",
			"created": "Created time in milliseconds since the epoch",
			"member_photo": ["Optional member photo of the uploading member", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"caption": "Photo caption",
			"thumb_link": "URL for a thumbnail the photo",
			"photo_album": ["-", {
				"photo_album_id": "Unique identifier of the album",
				"event_id": "Event ID if this is an event photo album",
				"event": ["Extra event info returned when requested in the \"fields\" parameter", {
					"name": "Name of the event",
					"id": "String ID of the event",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"event_url": "URL of the event's page on meetup.com"
				}],
				"group_id": "ID of the group that created the album"
			}],
			"member": ["Member that uploaded the photo", {
				"member_id": "Member's ID",
				"name": "Name of the member",
				"member_country": "Optional field",
				"member_state": "Optional field",
				"member_city": "Optional field"
			}],
			"self": ["Optional field, contains details specific to the authorized user", {
				"actions": "list of actions the current user may perform, potentially \"delete\" or \"edit\"",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
			}],
			"photo_link": "URL for a standard size of the photo",
			"updated": "Last updated time in milliseconds since the epoch"
		},
		"name": "Event Photo Edit",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. Authorized user must be the original poster of the photo or the organizer of the group the photo was posted in",
		"group": "photos",
		"desc": "Edits a specified event photo"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/member_photo",
		"response_notes": "Returns a HTTP 200 response if the delete was successful, 401 if unauthorized",
		"api_version": "2",
		"path": "\/2\/member_photo\/:id",
		"http_method": "DELETE",
		"examples": "Delete a member photo\n\n    curl -X DELETE https:\/\/api.meetup.com\/2\/member_photo\/PHOTO_ID?key=API_KEY\n    ",
		"name": "Member Photo Delete",
		"tag": "delete",
		"param_notes": "Only authorization parameters are needed. Authorized user must be the member owning the photo",
		"group": "members",
		"desc": "Delete the specified member photo"
	}, {
		"formats": ["json", "xml", "rss", "atom"],
		"params": {
			"*topic, groupnum": "Return comments for the group with given topic and number",
			"*group_id": "Return comments in groups with these ID numbers [separated by commas]",
			"*group_urlname": "Return comments for the group with this custom URL path"
		},
		"path": "\/comments",
		"http_method": "GET",
		"examples": "\nReturn comments from the NY Tech Group.\n\n    https:\/\/api.meetup.com\/comments.json\/?topic=newtech&groupnum=1&key=ABDE12456AB2324445\n    ",
		"response": {
			"lat,lon": "Latitude and longitude coordinates of the members reported city",
			"country,city,state": "Country, City, (and for the US, State) the member has provided",
			"created": "The time and date that the comment was created",
			"link": "Link to the members profile page",
			"name": "The name of the member that posted the comment",
			"comment": "Text of the comment that was posted",
			"photo_url": "Link to the profile photo of the member"
		},
		"name": "Comments",
		"orders": {
			"ctime": "the date the comment was posted"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "groups",
		"desc": "API method for accessing meetup group comments"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*comment_id": "Return comments for a given set of comment IDs, separated by commas",
			"*member_id": "Return comments for the given member_ids, separated by commas",
			"fields": "Optionally accepts the value \"member_photo\" or \"notifications\"",
			"*group_id": "Return comments in groups with these ID numbers, separated by commas",
			"*event_id": "Return comments on these events, separated by commas."
		},
		"path": "\/2\/event_comments",
		"http_method": "GET",
		"examples": "",
		"response": {
			"member_id": "The ID of the member that posted the comment. May be 0 for former members",
			"like_count": "optional fields parameter which adds the number of likes this comment has received",
			"member_photo": ["If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment", {
				"photo_id": "ID of the photo",
				"photo_link": "URL for the standard sized photo",
				"thumb_link": "URL for the thumbnail sized photo",
				"hires_link": "URL for the original sized photo"
			}],
			"comment_url": "URL for the event comment on meetup.com",
			"member_name": "The name of the member that posted the comment. May be \"Former Member\" for former members",
			"in_reply_to": "If this is a reply, the ID of the comment replied to",
			"event_comment_id": "The ID of this comment",
			"event_id": "The string ID of the event the comment belongs to",
			"group_id": "The ID of the group that the event belongs to",
			"self": ["Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"actions": "list of actions the current user may perform on this comment, potentially: 'flag_spam', 'delete', 'like' or 'unlike'"
			}],
			"comment": "The comment the member left for the event",
			"event": ["Optional field, basic info on event associated with comment", {
				"name": "Name of the event",
				"id": "String ID of the event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"event_url": "URL of the event's page on meetup.com"
			}],
			"notifications": "optional fields parameter to append the authorized member's current notification preference for the given comment"
		},
		"name": "Comments v2",
		"orders": {
			"name": "Order by the name of the member",
			"thread": "Order by comment threads, those with the most recent activity are listed first. Only one event may be provided and desc not supported. Also note that with this ordering, *replies* are excluded from pagination accounting. Only top-level comments will be capped at the page size.",
			"time": "Order by the time that each rating was posted (default: descending)"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameters must be supplied with the request.",
		"group": "events",
		"desc": "This method returns messages that appear under \"Talk about this Meetup\". To post messages, see the corresponding write method."
	}, {
		"formats": ["json", "xml"],
		"response_notes": "If successful, this method responds with a \"201 Created\" status and a JSON or XML body consisting of the posted comment in the same fields as the response items of the [Event Comment Get](\/meetup_api\/docs\/2\/event_comment\/#get) method.",
		"api_version": "2",
		"params": {
			"*comment": "The comment text",
			"*in_reply_to": "If this comment is a reply, the ID of the comment being replied to",
			"notifications": "Notification control for authorized member on this comment thread. \"on\" will result in notifications being sent. \"off\" will opt the member out of notifications for this comment thread. Defaults to \"on\" unless the member previous opted out of notifications on the thread.",
			"*event_id": "The event related to this comment."
		},
		"path": "\/2\/event_comment",
		"http_method": "POST",
		"examples": "\nPost a comment to event ID 1234.\n\n    curl -i \"https:\/\/api.meetup.com\/2\/event_comment\" -d \"event_id=1234&comment=hello+world&key=ABDE12456AB232445\"\n\nPost a reply for comment ID 4567\n\n    curl -i \"https:\/\/api.meetup.com\/2\/event_comment\" -d \"in_reply_to=4567&comment=i'm+in&key=ABCDE12345\"\n\n    ",
		"name": "Event Comment v2",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the event",
		"group": "events",
		"desc": "This method posts messages that appear under \"Talk about this Meetup\"."
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment",
		"api_version": "2",
		"params": {
			"fields": "comma-separate list of optional fields"
		},
		"path": "\/2\/event_comment\/:id",
		"http_method": "GET",
		"examples": "",
		"response": {
			"member_id": "The ID of the member that posted the comment. May be 0 for former members",
			"like_count": "optional fields parameter which adds the number of likes this comment has received",
			"member_photo": ["If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment", {
				"photo_id": "ID of the photo",
				"photo_link": "URL for the standard sized photo",
				"thumb_link": "URL for the thumbnail sized photo",
				"hires_link": "URL for the original sized photo"
			}],
			"comment_url": "URL for the event comment on meetup.com",
			"member_name": "The name of the member that posted the comment. May be \"Former Member\" for former members",
			"in_reply_to": "If this is a reply, the ID of the comment replied to",
			"event_comment_id": "The ID of this comment",
			"event_id": "The string ID of the event the comment belongs to",
			"replies": "Optional fields parameter returning array of the last 20 replies to comment",
			"group_id": "The ID of the group that the event belongs to",
			"self": ["Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group", {
				"actions": "list of actions the current user may perform on this comment, potentially: 'flag_spam', 'delete', 'like' or 'unlike'"
			}],
			"comment": "The comment the member left for the event",
			"event": ["Optional field, basic info on event associated with comment", {
				"name": "Name of the event",
				"id": "String ID of the event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"event_url": "URL of the event's page on meetup.com"
			}],
			"notifications": "optional fields parameter to append the authorized member's current notification preference for the given comment"
		},
		"name": "Event Comment Get",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "events",
		"desc": "Retrieve a single event comment or reply"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"params": {
			"fields": "comma-separate list of optional fields"
		},
		"path": "\/2\/event_comment\/:id",
		"http_method": "DELETE",
		"examples": "",
		"name": "Event Comment Delete",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "events",
		"desc": "Delete a single event comment or reply"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "If successful, this method returns a 202 Accepted response.",
		"api_version": "2",
		"params": {
			"*comment_id": "The id of the comment",
			"reason": "Reason for flagging the comment. May be one of inappropriate, spam"
		},
		"path": "\/2\/event_comment_flag",
		"http_method": "POST",
		"examples": "",
		"name": "Event Comment Flag",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "All required parameters must be supplied.",
		"group": "events",
		"desc": "This method creates a spam report for comment content"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment_subscribe",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/event_comment_subscribe\/:id",
		"http_method": "DELETE",
		"examples": "",
		"name": "Event Comment Unsubscribe",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. :id in the path should be the id of comment being replied to which you are unsubscribing to notifications from",
		"group": "events",
		"desc": "Unsubscribe to notifications for updates to a given comment thread"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment_subscribe",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/event_comment_subscribe\/:id",
		"http_method": "POST",
		"examples": "",
		"name": "Event Comment Subscribe",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. :id in the path should be id of comment being replied to which you are subscribing to notifications for",
		"group": "events",
		"desc": "Subscribe to notifications on updates to a given comment thread"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment_like",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/event_comment_like\/:id",
		"http_method": "POST",
		"examples": "",
		"name": "Event Comment Like",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. :id in the path should be the id of the comment you are liking",
		"group": "events",
		"desc": "Like a given Event comment"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/event_comment_like",
		"response_notes": "Returns an HTTP 200 response if delete was successful, 401 if unauthorized.",
		"api_version": "2",
		"path": "\/2\/event_comment_like\/:id",
		"http_method": "DELETE",
		"examples": "",
		"name": "Event Comment Unlike",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed. :id in the path should be the id of the comment you are unliking",
		"group": "events",
		"desc": "Unlike a given Event comment"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*comment_id": "Return likes for a given comment_id"
		},
		"path": "\/2\/event_comment_likes",
		"http_method": "GET",
		"examples": "",
		"response": {
			"member": ["member who liked the comment", {
				"member_id": "Member's ID",
				"member_state": "Optional field",
				"member_city": "Optional field",
				"name": "Name of the member",
				"photo": ["if available, the member's photo", {
					"highres_link": "URL for the photo at its maximum size",
					"photo_id": "Photo ID",
					"photo_link": "URL for a standard size of the photo",
					"thumb_link": "URL for a thumbnail of the photo"
				}],
				"member_country": "Optional field"
			}],
			"event_comment_id": "ID of the comment liked",
			"created": "UTC creation time of the event, in milliseconds since the epoch"
		},
		"name": "Comment Likes",
		"orders": {
			"created": "Order by the time the member liked like comment (default: descending)"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameters must be supplied with the request.",
		"group": "events",
		"desc": "Api for listing likes of a given event comment"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"member_id": "Return comments for the given member_ids, separated by commas. The member ids must match up with one of the provided photo ids",
			"*photo_id": "Return comments on these photos, separated by commas",
			"fields": "Request that additional fields (separated by commas) be included in the output."
		},
		"path": "\/2\/photo_comments",
		"http_method": "GET",
		"examples": "",
		"response": {
			"photo_comment_id": "Unique identifier for this comment ",
			"photo_id": "Photo ID where the comment was posted",
			"created": " The time and date that the comment was posted, in milliseconds since the epoch",
			"member_photo": ["If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment", {
				"photo_id": "ID of the photo",
				"photo_link": "URL for the standard sized photo",
				"thumb_link": "URL for the thumbnail sized photo",
				"hires_link": "URL for the original sized photo"
			}],
			"member": ["Author of comment", {
				"member_id": "Member's ID",
				"name": "Name of the member",
				"member_country": "Optional field",
				"member_state": "Optional field",
				"member_city": "Optional field"
			}],
			"self": ["Returned when the optional \"fields\" request parameter contains \"self\" and authenticated member is a member of Group this comment was posted within. Represents the authenticated member's context.", {
				"actions": "An array of actions the authenticated member may perform. May be one of \"edit\", if the member can edit the comment or \"delete\" if the member can delete the comment",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
			}],
			"comment": "Text of the comment that was posted"
		},
		"name": "Photo Comments v2",
		"orders": {
			"name": "the name of the member",
			"time": "Order by the time that each comment was posted"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameters must be supplied by the request.",
		"group": "photos",
		"desc": "This method returns comments on meetup photos. To post messages, see the corresponding write method"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "If successful, this method responds with a \"201 Created\" status and a JSON or XML body consisting of the posted comment in the same fields as the response items of the Photo Comments method.",
		"api_version": "2",
		"params": {
			"*photo_id": "The photo related to this comment.",
			"*comment": "The comment text"
		},
		"path": "\/2\/photo_comment",
		"http_method": "POST",
		"examples": "\nPost a comment to photo ID 1234.\n\n    curl -i \"https:\/\/api.meetup.com\/2\/photo_comment.xml\" -d \"event_id=1234&comment=hello+world&key=ABDE12456AB232445\"\n    ",
		"name": "Photo Comment v2",
		"scopes": ["basic"],
		"param_notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the photo",
		"group": "photos",
		"desc": "This method posts comments that appear below photos"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"member_id": "The ID of a member to filter ratings on",
			"*event_id": "The ID of the event to fetch ratings data for"
		},
		"path": "\/2\/event_ratings",
		"http_method": "GET",
		"examples": "\nRatings information for a single event\n\n    https:\/\/api.meetup.com\/2\/event_ratings.json\/?event_id=1300571&key=ABDE12456AB2324445\n",
		"response": {
			"member_id": "id of the member leaving the review",
			"event_id": "The string ID of the event",
			"group_id": "The ID of the group that the event belongs to",
			"rating": "Only present if the authenticated member is the reviewer; number of stars given",
			"time": "The date\/time that the review was created",
			"member_name": "name of member leaving th review"
		},
		"name": "Ratings v2",
		"orders": {
			"rating": "Order by the value for each rating posted",
			"time": "Order by the time that each rating was posted"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameters must be supplied with the request.",
		"group": "events",
		"desc": "API method for accessing Meetup comments"
	}, {
		"path": "\/2\/event_rating",
		"formats": ["json", "xml"],
		"http_method": "POST",
		"examples": "\nPost a rating to event ID 1234.\n\n    curl -i \"https:\/\/api.meetup.com\/2\/event_rating.xml\" -d \"event_id=1234&rating=5&comment=hello+world&key=ABDE12456AB2324445\"\n    ",
		"response": {
			"rating": "The overall average rating of the event",
			"event_id": "The string ID of the event",
			"time": "The time that the event was created",
			"group_id": "The ID of the group",
			"rating_count": "The number of reviews posted for the event"
		},
		"name": "Event Rating",
		"scopes": ["basic"],
		"api_version": "2",
		"params": {
			"attendee_count": "DEPRECATED: The number of attendees for the event (organizers\/assistant organizers\/co-organizers\/event organizers\/event hosts only)",
			"*rating": "The member's rating (either 1, 2, 3, 4, or 5)",
			"*event_id": "The ID of the event to fetch ratings data for"
		},
		"desc": "This method allows members to posts rating for an event after it's occurred. Only permitted for members who rsvp'd \"yes\" or \"maybe\" to the event",
		"group": "events"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*photo_album_id": "Return albums with these IDs, separated by commas",
			"*group_id": "Return albums in groups with these ID, separated by commas",
			"*event_id": "Return photo albums for these event ids, separated by commas"
		},
		"path": "\/2\/photo_albums",
		"http_method": "GET",
		"examples": "",
		"response": {
			"photo_album_id": "Unique identifier of the album",
			"photo_count": "Number of photos in the album",
			"event_id": "Event ID if this is an event photo album",
			"group_id": "ID of the group that created the album",
			"ordering": "If a custom ordering is defined, a list of photo IDs",
			"created": "Created time in milliseconds since the epoch",
			"link": "Link to photo album on meetup.com",
			"title": "Photo album title",
			"album_photo": ["Selected photo from the album to display in listings", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "-",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail the photo"
			}],
			"updated": "Last updated time in milliseconds since the epoch"
		},
		"name": "Photo Albums",
		"orders": {
			"time": "creation date and time",
			"title": "title of the album",
			"updated": "album updated field"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "photos",
		"desc": "This method returns photo albums associated with Meetup groups. To create albums, see the corresponding write method."
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*photo_id": "Photo IDs, separated by commas",
			"*group_urlname": "Group urlnames, separated by commas",
			"*event_id": "Event ids, separated by commas. These may contain alphanumeric autoscheduled event ids, only photos of reified events will be returned",
			"*tagged": "Tagged with members with these IDs, separated by commas",
			"*photo_album_id": "Photo Album IDs, separated by commas",
			"*member_id": "Uploaded by members with these IDs, separated by commas",
			"time": "Return photos uploaded within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above).",
			"fields": "comma-delimited optional response properties such as member_country, member_city, member_state, and self",
			"*group_id": "Group IDs, separated by commas"
		},
		"path": "\/2\/photos",
		"http_method": "GET",
		"examples": "",
		"response": {
			"comment_count": "Optional fields parameter. When requested, this returns the number of comments made about this photo",
			"site_link": "URL for photo in photo album on meetup.com",
			"highres_link": "URL for the photo at its maximum size",
			"photo_id": "Unique identifier of the photo",
			"created": "Created time in milliseconds since the epoch",
			"member_photo": ["Optional member photo of the uploading member", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"caption": "Photo caption",
			"thumb_link": "URL for a thumbnail the photo",
			"photo_album": ["-", {
				"photo_album_id": "Unique identifier of the album",
				"event_id": "Event ID if this is an event photo album",
				"event": ["Extra event info returned when requested in the \"fields\" parameter", {
					"name": "Name of the event",
					"id": "String ID of the event",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"event_url": "URL of the event's page on meetup.com"
				}],
				"group_id": "ID of the group that created the album"
			}],
			"member": ["Member that uploaded the photo", {
				"member_id": "Member's ID",
				"name": "Name of the member",
				"member_country": "Optional field",
				"member_state": "Optional field",
				"member_city": "Optional field"
			}],
			"self": ["Optional field, contains details specific to the authorized user", {
				"actions": "list of actions the current user may perform, potentially: delete, comment, edit",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
			}],
			"photo_link": "URL for a standard size of the photo",
			"updated": "Last updated time in milliseconds since the epoch"
		},
		"name": "Photos",
		"orders": {
			"time": "creation date and time"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "photos",
		"desc": "This method returns photos by member, group, album, event, photo ID, or tagged member."
	}, {
		"formats": ["json", "xml"],
		"response_notes": "If successful, this method responds with a \"201 Created\" status and a json or XML body consisting of the album data in the same fields as the response items of the Photo Albums method.",
		"api_version": "2",
		"params": {
			"*group_id": "Group to create the album in",
			"*title": " Title of the new album"
		},
		"path": "\/2\/photo_album",
		"http_method": "POST",
		"examples": "\n    Create an album in group id 1234.\n\n    curl -i \"https:\/\/api.meetup.com\/2\/photo_album.xml\" -d \"group_id=1234&title=my+album&key=ABDE12456AB2324445\"\n    ",
		"name": "Photo Album2",
		"scopes": ["basic"],
		"param_notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be an organizer (main, assistant, or co-) of the specified group",
		"group": "photos",
		"desc": "This method creates photo albums within a Meetup group"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*lat": "A valid latitude, limits the returned venues to those within radius miles",
			"*state": "For the US, a valid 2 character state code",
			"*text": "Venues that contain the given term or terms somewhere in their content. Separate terms with \" AND \" for venues that have combined terms. Append a trailing * to treat this as a prefix search",
			"*zip": "A valid US zip code, limits the returned venues to those within radius miles",
			"*country": "A valid country code.",
			"*lon": "A valid longitude, limits the returned venues to those within radius miles",
			"*group_urlname": "Returns venues with location relative to the group associated with this urlname",
			"*city": "A valid city",
			"radius": "Radius, in miles for geographic requests, default 25.0 -- maximum 100.0",
			"fields": "Request that additional fields (separated by commas) be included in the output"
		},
		"path": "\/2\/open_venues",
		"http_method": "GET",
		"examples": "\nSearch for public venues near the zipcode 10021\n\n    https:\/\/api.meetup.com\/2\/open_venues\n        ?zip=10021\n        &key=ABDE12456AB2324445\n   \nSearch for the top 5 public venues near the zipcode 10021 with tagged with \"wifi\" and \"coffee\" with the highest rating\n\n    https:\/\/api.meetup.com\/2\/open_venues\n       ?zip=10021\n       &text=wifi and coffee\n       &page=5\n       &desc=true\n       &order=rating\n       &key=ABDE12456AB2324445\n\n    ",
		"response": {
			"zip": "if US or Canada",
			"localized_country_name": "Name of country of venue",
			"distance": "Distance in miles from the search location, if one was specified",
			"address_1": "line 1 of venue address",
			"address_2": "line 2 of venue address",
			"address_3": "line 3 of venue address",
			"rating": "The average member rating",
			"venue_url": "URL of the venues's page on meetup.com",
			"rating_count": "The number of member ratings",
			"taglist": "Optional array of associated tagnames provided when a value of \"taglist\" is supplied with the \"fields\" request parameter",
			"lat, lon": "coordinates of venue",
			"phone": "phone number of venue",
			"city, state, country": "City, County code and if in US state of venue",
			"name": "Name of the venue",
			"id": "ID of the venue",
			"fax": "fax number of venue",
			"email": "email address of venue"
		},
		"name": "OpenVenues",
		"orders": {
			"rating": "average member rating",
			"distance": "(default order) ordering is approximate and will not exactly match the values in the \"distance\" field.",
			"rating_count": "number of member ratings."
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. If you are not able to provide a relative location you may supply a group_urlname which this method will use to infer location from. You can perform prefix searching by appending a * character to your query",
		"group": "venues",
		"desc": "Searches for public venues within a given geo space. To search for specific venues that your group has used, use the [Venues](\/meetup_api\/docs\/2\/venues) method"
	}, {
		"formats": ["json", "xml"],
		"api_version": "2",
		"params": {
			"*venue_id": "multiple ids may be separated with commas",
			"fields": "Request that additional fields (separated by commas) be included in the output",
			"*group_id": "multiple ids may be separated with commas",
			"*group_urlname": "path to group from meetup.com, no slashes",
			"*event_id": "multiple ids may be separated with commas"
		},
		"path": "\/2\/venues",
		"http_method": "GET",
		"examples": "\n Get all unique venues used by your groups with urlnames group-a and group-b and include their tags\n\n    https:\/\/api.meetup.com\/2\/venues\n        ?group_urlname=group-a,group-b\n        &fields=taglist\n        &key=ABDE12456AB2324445\n    ",
		"response": {
			"zip": "if US or Canada",
			"localized_country_name": "Name of country of venue",
			"distance": "Distance in miles from the search location, if one was specified",
			"address_1": "line 1 of venue address",
			"address_2": "line 2 of venue address",
			"address_3": "line 3 of venue address",
			"rating": "The average member rating",
			"venue_url": "URL of the venues's page on meetup.com",
			"rating_count": "The number of member ratings",
			"taglist": "Optional array of associated tagnames provided when a value of \"taglist\" is supplied with the \"fields\" request parameter",
			"lat, lon": "coordinates of venue",
			"phone": "phone number of venue",
			"city, state, country": "City, County code and if in US state of venue",
			"name": "Name of the venue",
			"id": "ID of the venue",
			"fax": "fax number of venue",
			"email": "email address of venue"
		},
		"name": "Venues",
		"orders": {
			"rating": "average member rating",
			"distance": "(default order) ordering is approximate and will not exactly match the values in the \"distance\" field.",
			"rating_count": "number of member ratings."
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. You can use either group_urlname or group_id to filter by groups but not both.",
		"group": "venues",
		"desc": "Search for Meetup venues by one of your groups, events, or venue identifiers. For a full text search on public venues use [OpenVenues](\/meetup_api\/docs\/2\/open_venues)."
	}, {
		"formats": ["json", "rss", "atom", "xml"],
		"prefer": "\/2\/rsvps",
		"params": {
			"*event_id": "Return members that RSVP'd to events with these ID numbers [separated by commas]"
		},
		"path": "\/rsvps",
		"http_method": "GET",
		"examples": "\nReturn members who RSVP'd to event 437658\n\n    https:\/\/api.meetup.com\/rsvps.json\/?event_id=437658&key=ABDE12456AB2324445\n    ",
		"response": {
			"country": "Country the member has provided",
			"city": "City the member has provided",
			"created": "Timestamps indicating when the RSVP was first set",
			"link": "URL to the member's profile page on meetup.com",
			"answers": "Answers to event survey questions provided when the member RSVP'd, only available to organizers and assistant organizers",
			"lon": "Longitude coordinates of the members reported city",
			"updated:": "Timestamps indicating when the RSVP was last updated",
			"event_id": "The Event id",
			"member_id ": "The member's id",
			"response": "\"yes\", \"no\", \"maybe\", or \"waitlist\"",
			"name": "The member's name",
			"comment": "The message that the member provided when RSVP was made",
			"id": "RSVP id",
			"state": "US State the member has provided",
			"lat": "Latitude coordinates of the members reported city"
		},
		"name": "Rsvps",
		"orders": {
			"name": "the name of the attendee"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "deprecated",
		"desc": "API method for accessing meetup rsvps"
	}, {
		"formats": ["json", "xml"],
		"prefer": "\/2\/rsvp",
		"response_notes": "For this method, response data will only consist of either a success or failure message. If the RSVP was successful, the success message will also contain the event_id of the event that was just RSVP'd to",
		"params": {
			"*rsvp": "The RSVP setting - value must be either \"yes\". \"no\", \"waitlist\" or \"maybe\"",
			"member_id": " Organizers and event hosts may RSVP on behalf of a member by specifying an ID here. As when editing RSVPs on the site, organizers may enter a \"yes\" for a member even if the event requires payment.",
			"comments": "A comment to post along with the RSVP",
			"*event_id": "The event that you are RSVP'ing to",
			"guests": "Number of guests also coming to the event.",
			"answer_{qid}": "Answers to event survey questions. Organizers and hosts my not edit or create answers on behalf of members"
		},
		"path": "\/rsvp",
		"http_method": "POST",
		"examples": "\n\nRSVP 'yes' to the event with id 12345.\n\n    curl https:\/\/api.meetup.com\/rsvp\/\n       -F 'event_id=12345'\n       -F 'rsvp=yes'\n       -F 'key=YOURKEY'\n\nRSVP 'yes' to the event with id 12345 answering survey questions.\n\nFirst get the survey questions for the target event\n\n    curl 'https:\/\/api.meetup.com\/2\/event\/12345\/?key=YOURKEY&fields=survey_questions'\n\nThen answer questions accordingly\n\n    curl https:\/\/api.meetup.com\/rsvp\/\n       -F 'event_id=12345'\n       -F 'rsvp=yes'\n       -F 'answer_123=answering question 123'\n       -F 'answer_456=answer question 456'\n       -F 'key=YOURKEY'\n    ",
		"name": "RSVP",
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. The rsvp is recorded for the currently authenticated member account, unless a member_id is supplied. Member's RSVP'ing as themselves may supply answers to a Meetup event's survey questions by supplying answers as request parameters corresponding to question ids in the format __answer_{question_id}__. To discover available Meetup event survey questions, supply the [Events 2](\/meetup_api\/docs\/2\/events\/) method with the 'fields' parameter set to 'survey_questions'",
		"group": "deprecated",
		"desc": "Creates a new Rsvp"
	}, {
		"formats": ["json", "rss", "atom", "xml"],
		"response_notes": "If the RSVP is for a host of a repeating event that hasn't been RSVP'd to by others, the __id__ in the response will be __-1__ and the __mtime__ will be that of the recurring event",
		"api_version": "2",
		"params": {
			"fields": "Parameter for requesting optional response properties, set to other_services for a list of third party services",
			"rsvp": "Filters response on RSVP status. \"yes\" if member RSVP'd yes otherwise \"no\"",
			"*event_id": "Multiple alphanumeric ids may be separated with commas"
		},
		"path": "\/2\/rsvps",
		"http_method": "GET",
		"examples": "\nGet RSVPs for event 789 ordering by event then the RSVP'd member's name\n\n    https:\/\/api.meetup.com\/2\/rsvps?key=YOUR_KEY&event_id=789&order=name\n    ",
		"response": {
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"comments": "The message that the member provided when RSVP was made",
			"created": "Creation time of the RSVP, in milliseconds since the epoch.",
			"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request", {
				"question": "The text of the question asked of the member",
				"answer": "The members provided answer to the question",
				"question_id": "The unique id of the question answered",
				"updated": "The time the answer was last modified in milliseconds since the epoch"
			}],
			"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
			"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
			"pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
			"response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
			"guests": "Number of guests the RSVP'd member will be bringing",
			"host": "Optional field, `true` if RSVP is for an event host",
			"member": ["Member who RSVP'd", {
				"member_id": "Member's ID",
				"other_services": ["Third-party services associated with the member account", {
					"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
						"identifier": "identifier for the service, a username or URL"
					}]
				}],
				"member_state": "Optional field",
				"member_city": "Optional field",
				"name": "Name of the member",
				"bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
				"member_country": "Optional field"
			}],
			"event": ["The event associated with the RSVP", {
				"name": "Name of the event",
				"id": "String ID of the event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"event_url": "URL of the event's page on meetup.com"
			}],
			"attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
			"group": ["Group hosting the event", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}]
		},
		"name": "RSVPs v2",
		"orders": {
			"name": "the name of the attendee",
			"event": "the id or time of the event",
			"social": "social connections of the authenticated member"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.",
		"group": "rsvps",
		"desc": "Query for Event RSVPs by event"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "If successful, this method returns a 201 Created response with a Location header containing the [RSVP Get](\/meetup_api\/docs\/2\/rsvp\/#get) method for this event. A 400 Bad request response will be returned if the currently authenticated member can not attend this Meetup.\n\nIn cases where a member successfully RSVP's yes to a ticketed event before the payment is processed, the response will be returned as an HTTP 202 Accepted status. A payment_redirect property will be appended to the response body containing the location of the next step you should take to submit the payment online for the event.\n\nIf a validation of Event and RSVP state occurs you may wish to inspect the response body for one of these the following error \"codes\".\n\n'dues_required': You must pay the group's member dues on the full site before you can RSVP for this event\n\n'event_past': This event has already passed\n\n'invalid_event': Invalid event\n\n'invalid_guest_num': Invalid number or guests\n\n'invalid_response': Invalid RSVP response\n\n'payment_required': Payment required to RSVP\n\n'refund_agreement': Member must agree to refund policy\n\n'rsvp_closed': Sorry. RSVPs are now closed so you can't add any more guests.\n\n'rsvp_error': Error RSVPing to event\n\n'rsvper_not_authorized': You need to be an organizer or an event host to RSVP this member\n\n'too_few_spots': There are not enough spots for your rsvp\n\n'too_many_guests': You have specified too many guests",
		"api_version": "2",
		"params": {
			"*rsvp": "The RSVP setting - value must be either \"yes\", \"no\" or \"waitlist\"",
			"member_id": " Organizers and event hosts may RSVP on behalf of a member by specifying an ID here. As when editing RSVPs on the site, organizers may enter a \"yes\" for a member even if the event requires payment.",
			"comments": "A comment to post along with the RSVP",
			"*event_id": "The event that you are RSVP'ing to",
			"guests": "Number of guests also coming to the event.",
			"opt_to_pay": "For events with fees, the authorized member may opt to pay as part of the RSVP request. This may be set to true or false",
			"answer_{qid}": "Answers to event survey questions. Answers may not be longer than 250 characters. Organizers and hosts my not edit or create answers on behalf of members",
			"agree_to_refund": "For events with fees, the authorized member must agree to the event's refund policy. This must be set to either true or false"
		},
		"path": "\/2\/rsvp",
		"http_method": "POST",
		"examples": "\nRSVP 'yes' to the event with id 12345.\n\n    curl https:\/\/api.meetup.com\/2\/rsvp\/\n       -F 'event_id=12345'\n       -F 'rsvp=yes'\n       -F 'key=YOURKEY'\n\nRSVP 'yes' to the event with id 12345 answering survey questions.\n\nFirst get the survey questions for the target event\n\n    curl 'https:\/\/api.meetup.com\/2\/event\/12345\/?key=YOURKEY&fields=survey_questions'\n\nThen answer questions accordingly\n\n    curl https:\/\/api.meetup.com\/2\/rsvp\/\n       -F 'event_id=12345'\n       -F 'rsvp=yes'\n       -F 'answer_123=answering question 123'\n       -F 'answer_456=answer question 456'\n       -F 'key=YOURKEY'\n    ",
		"response": {
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"comments": "The message that the member provided when RSVP was made",
			"payment_redirect": "If the event RSVP'd to requires online payment and a yes response was accepted, this field will contain a payment URL you should redirect the authenticated member to in order to complete the online payment",
			"created": "Creation time of the RSVP, in milliseconds since the epoch.",
			"member_photo": ["Rsvping Member's photo", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request", {
				"question": "The text of the question asked of the member",
				"answer": "The members provided answer to the question",
				"question_id": "The unique id of the question answered",
				"updated": "The time the answer was last modified in milliseconds since the epoch"
			}],
			"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
			"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
			"pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
			"response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
			"tallies": ["The current set of counts for RSVPs", {
				"no": "Number of no rsvps",
				"maybe": "Number of maybe rsvps",
				"yes": "Number of yes rsvps"
			}],
			"host": "Optional field, `true` if RSVP is for an event host",
			"member": ["Member who RSVP'd", {
				"member_id": "Member's ID",
				"other_services": ["Third-party services associated with the member account", {
					"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
						"identifier": "identifier for the service, a username or URL"
					}]
				}],
				"member_state": "Optional field",
				"member_city": "Optional field",
				"name": "Name of the member",
				"bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
				"member_country": "Optional field"
			}],
			"guests": "Number of guests the RSVP'd member will be bringing",
			"event": ["The event associated with the RSVP", {
				"name": "Name of the event",
				"id": "String ID of the event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"event_url": "URL of the event's page on meetup.com"
			}],
			"attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
			"group": ["Group hosting the event", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}]
		},
		"name": "RSVP Create\/Update",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request.\n\nThe RSVP is recorded for the currently authenticated member account, unless a member_id is supplied, in which case the authenticated member must have permissions to edit the event or a host.\n\nMember's RSVP'ing as themselves may supply answers to a Meetup event's survey questions by supplying answers as request parameters corresponding to question ids in the format `answer_{question_id}`. To discover available Meetup event survey questions, supply the [Events 2](\/meetup_api\/docs\/2\/events\/) method with the 'fields' parameter set to 'survey_questions'.\n\nRepeated attempts to RSVP to the same event given the same member credentials will result in an update to previous RSVP. The state of the event may or may not allow for this update to occur depending on the organizer-defined constraints and pre-requisites for the event.\n\nNote: waitlist responses may be coerced into yes responses when there is space available and yes responses may be coerced into waitlist response when space is not.\n\nIf the event requires payment you are required to send an \"agree_to_refund\" parameter set to the true or false. This represents the authorized members agreement to understanding the event's refund policy.\n",
		"group": "rsvps",
		"desc": "Creates or updates an existing RSVP"
	}, {
		"formats": ["json", "xml"],
		"doc_path": "\/2\/rsvp",
		"api_version": "2",
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output"
		},
		"path": "\/2\/rsvp\/:id",
		"http_method": "GET",
		"examples": "",
		"response": {
			"venue": ["Venue, if selected and not hidden", {
				"zip": "ZIP code if, venue is in US or Canada",
				"lat, lon": "Geographic coordinates of venue",
				"localized_country_name": "Name of country the city belongs to",
				"phone": "Phone number of venue",
				"address_1": "Line 1 of venue address",
				"city, state, country": "City, Country Code and if in US state of venue",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"name": "Venue name",
				"id": "Venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
			}],
			"comments": "The message that the member provided when RSVP was made",
			"created": "Creation time of the RSVP, in milliseconds since the epoch.",
			"member_photo": ["The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos", {
				"highres_link": "URL for the photo at its maximum size",
				"photo_id": "Photo ID",
				"photo_link": "URL for a standard size of the photo",
				"thumb_link": "URL for a thumbnail of the photo"
			}],
			"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request", {
				"question": "The text of the question asked of the member",
				"answer": "The members provided answer to the question",
				"question_id": "The unique id of the question answered",
				"updated": "The time the answer was last modified in milliseconds since the epoch"
			}],
			"rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
			"mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
			"pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
			"response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
			"guests": "Number of guests the RSVP'd member will be bringing",
			"host": "Optional field, `true` if RSVP is for an event host",
			"member": ["Member who RSVP'd", {
				"member_id": "Member's ID",
				"other_services": ["Third-party services associated with the member account", {
					"[service-name]": ["This element is flickr, tumblr, twitter, or linkedin", {
						"identifier": "identifier for the service, a username or URL"
					}]
				}],
				"member_state": "Optional field",
				"member_city": "Optional field",
				"name": "Name of the member",
				"bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
				"member_country": "Optional field"
			}],
			"event": ["The event associated with the RSVP", {
				"name": "Name of the event",
				"id": "String ID of the event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"event_url": "URL of the event's page on meetup.com"
			}],
			"attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
			"group": ["Group hosting the event", {
				"join_mode": "\"open\", \"approval\", or \"closed\"",
				"created": "Date and time that the group was founded, in milliseconds since the epoch",
				"name": "Group name",
				"group_lon": "Approximate group longitude",
				"id": "Group id",
				"urlname": "Group URL name",
				"group_lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}]
		},
		"name": "RSVP Get",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only authorization parameters are needed.",
		"group": "rsvps",
		"desc": "Retrieve a single RSVP"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon recieving the response, some photos may not be immediately accesible. If this is desirable, use the \"await\" request parameter",
		"api_version": "2",
		"params": {
			"await": "If true, this ensures a response will not be returned until the upload is accessible",
			"main": "Set to 'true' to have this photo become the group's main photo. Set it to 'false' otherwise. Defaults to true",
			"*group_id": "Group ID for the target group. This may be used as an alternative to group_urlname",
			"*photo": "The photo, encoded as multipart\/form-data. The maximum file size allowed is 10MB",
			"*group_urlname": "Group urlname. This may be used as an alternative to group_id"
		},
		"path": "\/2\/group_photo",
		"http_method": "POST",
		"examples": "Upload a new primary group photo with curl\n\n    curl \"https:\/\/api.meetup.com\/2\/group_photo\" \\\n       -F \"photo=@\/path\/to\/photo.jpg\" \\\n       -F \"group_urlname=MY_GROUP\" \\\n       -F \"key=API_KEY\"\n    ",
		"response": {
			"photo_url": "Link to the uploaded group photo (same as in the Location header).",
			"title": "Request Completed",
			"group_photo_id": "Unique identifier of this photo "
		},
		"name": "Group Photo Upload",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "The request must be a POST of content-type multipart\/form-data. The supplied photo will be added to the provided groups general photo album. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string. You must be an organizer of the group in order to load a photo.",
		"group": "groups",
		"desc": "Uploads a new Meetup Group photo. To change other Group settings use the [Group Edit](\/meetup_api\/docs\/:urlname\/#edit) endpoint"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon receiving the response, some photos may not be immediately accessible. If this is desirable, use the \"await\" request parameter",
		"api_version": "2",
		"params": {
			"await": "If true, this ensures a response will not be returned until the upload is accessible",
			"main": "Set to \"true\" to have this photo become the member's main profile photo. Otherwise, it will become the main photo only when none other is selected. If the authenticated member does not already have a main profile photo set it will remain so.",
			"sync_matching_photo": "When set to true and main is set to true, this will replace all group profile photos matching the current photo with the provided replacement",
			"*photo": "The photo, encoded as multipart\/form-data. The maximum file size allowed is 10MB",
			"sync_photo": "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id"
		},
		"path": "\/2\/member_photo",
		"http_method": "POST",
		"examples": "",
		"response": {
			"photo_url": "Link to the uploaded member photo (same as in the Location header).",
			"title": "Request Completed",
			"member_photo_id": "Unique identifier of this photo "
		},
		"name": "Member Photo Upload",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "The request must be a POST of content-type multipart\/form-data. The supplied photo will be added to the currently authenticated user's member profile. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string.",
		"group": "members",
		"desc": "Uploads a photo to be associated with a Member"
	}, {
		"formats": ["json", "xml"],
		"response_notes": "When successful, this method responds with a status of \"201 Created\" and a Location header with the uploaded photo's URL. The response body contains the following elements in JSON or XML. Upon recieving the response, some photos may not be immediately accesible. If this is desirable, use the \"await\" request parameter",
		"api_version": "2",
		"params": {
			"await": "If true, this ensures a response will not be returned until the upload is accessible",
			"caption": "Caption for the photo",
			"*photo_album_id": "Identifier of an existing photo album, which may be an event or group album",
			"*photo": "The photo, encoded as multipart\/form-data. The maximum file size allowed is 10MB",
			"*event_id": "Identifier of an event. If there is no album for this event, one will be created."
		},
		"path": "\/2\/photo",
		"http_method": "POST",
		"examples": "",
		"response": {
			"site_link": "URL for photo in photo album on meetup.com",
			"event_photo_id": "Unique identifier of this photo",
			"created": "Created time in milliseconds since the epoch",
			"member": ["Member that uploaded the photo", {
				"member_id": "Identifier of member",
				"name": "Name of member"
			}],
			"album_id": "Identifier of the photo's  album",
			"photo_url": "Link to the uploaded event photo (same as in the Location header).",
			"title": "Request Completed",
			"updated": "Last updated time in milliseconds since the epoch"
		},
		"name": "Event Photo Upload",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "A photo album or event ID must be supplied with the request, which must be a POST of content-type `multipart\/form-data`. The currently authenticated user must be a member of the group that is hosting the event. Parameters other than photo may be passed in as a query string or within the posted content. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string",
		"group": "photos",
		"desc": "Uploads a photo for a given event"
	}, {
		"formats": ["json", "rss", "atom", "xml", "kml"],
		"prefer": "\/2\/groups",
		"params": {
			"*topic, groupnum": "Return the group with this topic and number",
			"*zip": "A valid US zip code, limits the returned groups to those within radius miles.",
			"*lat,lon": "A valid latitude and longitude, limits the returned groups to those within radius miles",
			"visibility": "Set to \"members\" or \"public\" to restrict to groups of a particular visibility",
			"*id": "Only return groups with the specified ID's [separate ID numbers with commas]",
			"*topic": "Only return groups in the specified topic [one topic allowed]",
			"*group_urlname": "Return the group with this custom url path (e.g., the string \"teaneck-archaeologists\" would refer to the group located at http:\/\/www.meetup.com\/teaneck-archaeologists)",
			"*member_id": "A member id number, limits results set to only those groups that the member specified by this id is currently a member of (excludes private groups, unless the member_id is the same as that of the member making the request)",
			"radius": "Radius, in miles for geographic requests, default 25 -- maximum 100",
			"fields": "Set to \"short_link\" to include shortened group URLs in response items. Set to \"join_info\" to get a list of questions and requirements used when joining the group.",
			"*country, city, state": "A valid country code, city and for the US, State. limits the returned groups to those within radius miles"
		},
		"path": "\/groups",
		"http_method": "GET",
		"examples": "\nGet a list of all groups near Williamsburg, Brooklyn ordered oldest first, in xml format.\n\n    https:\/\/api.meetup.com\/groups.xml\/?zip=11211&order=ctime&desc=true&key=ABDE12456AB2324445\n\nList all the pug groups in Reno, Nevada return json.\n\n    https:\/\/api.meetup.com\/groups.json\/?&topic=pug&country=us&state=nv&city=reno&key=ABDE12456AB2324445\n    ",
		"response": {
			"zip": "The zip code where this group is located",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"questions": ["List of questions asked by organizer", {
					"question": "The text of the question",
					"id": "Unique identifier for the questions."
				}],
				"questions_required": "\"1\" if required, \"0\" otherwise"
			}],
			"visibility": "Set to \"members\" or \"public\". Only authenticated group members can retrieve event and membership details for private groups",
			"topics": ["Topics related to this group", {
				"urlkey": "Unique keyword used to identify this topic",
				"name": "Topic name",
				"id": "Topic ID"
			}],
			"created": "The date the group was created",
			"link": "Link to the groups page",
			"rating": "Group rating",
			"description": "Description of the group",
			"lon": "Longitude coordinates of group location",
			"daysleft": "If this group is in need of an organizer, number of days until it expires (otherwise blank)",
			"name ": "The groups's name",
			"group_urlname": "The group's url name",
			"short_link": "short version of the group's link",
			"members": "The number of members in the group",
			"organizerName": "Name of the group's organizer",
			"id": "The groups's id",
			"photo_url": "Url of the group's photo",
			"updated": "The last date and time that the group was updated",
			"country, city, state": "Country, City, (and for the US, State) where this group is located",
			"lat": "Latitude coordinates of group location",
			"organizerProfileURL": "Profile url of group organizer",
			"who": "what the group calls its members"
		},
		"name": "Groups",
		"orders": {
			"name": "the name of the group",
			"ctime": "group creation time [newest first]",
			"location": "group location, country, state [if present], city",
			"members": "number of members [largest first]"
		},
		"scopes": ["basic"],
		"param_notes": "At least one of the required parameter(s) must be supplied with the request. Answers to questions are expected to follow the naming convention: answer_{question_id}=myanswer when joining.",
		"group": "deprecated",
		"desc": "API method for accessing meetup groups"
	}, {
		"formats": ["json", "xml"],
		"prefer": "2\/photo\/#create",
		"response_notes": "For this method, response data will only consist of either a success or failure message. If the upload was successful, the following properties will be returned",
		"params": {
			"caption": "Caption for the photo",
			"*photo_album_id": "Identifier of an existing photo album, which may be an event or group album",
			"*photo": "The photo, encoded as multipart\/form-data. The maxiumum file size allowed is __10MB__",
			"*event_id": "Identifier of an event. If there is no album for this event, one will be created."
		},
		"path": "\/photo",
		"http_method": "POST",
		"examples": "",
		"response": {
			"details": "photo id: and the Id of the photo",
			"album_id": "Id of the album posted to",
			"photo_id": "Id of the photo created",
			"title": "completed message"
		},
		"name": "Photo Upload",
		"scopes": ["basic"],
		"param_notes": "A photo album or event ID must be supplied with the request, which must be a POST of content-type `multipart\/form-data`. The currently authenticated user must be a member of the group that is hosting the event. Parameters other than photo may be passed in as a query string or within the posted content. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string",
		"group": "deprecated",
		"desc": "Uploads a new Event photo"
	}, {
		"path": "\/activity",
		"formats": ["json", "rss", "atom", "xml"],
		"http_method": "GET",
		"examples": "\nReturn latest group activities for member 1234.\n\n    https:\/\/api.meetup.com\/activity.json\/?member_id=1234&key=ABDE12456AB2324445\n    ",
		"response": {
			"member_id": "ID of member who performed the action.",
			"group_name": "Name of the group where the action took place.",
			"group_id": "Unique ID of the group where the action took place.",
			"item_type": "Type of activity that occurred. One of: new_member, photo_upload, new_discussion, new_reply, new_rsvp, edit_rsvp, photo_tag, photo_comment, new_checkin",
			"link": "URL to the content represented in the action.",
			"published": "Date and time of when the action occurred.",
			"id": "Unique identifier for the feed item.",
			"photo_url": "Link to the profile photo of the member represented (except in the case of photo actions, where the photo URL is used instead).",
			"title": "A short description of the action that occurred.",
			"member_name": "Member who performed the action."
		},
		"name": "ActivityFeed",
		"scopes": ["basic"],
		"api_version": "1",
		"params": {
			"member_id": "Returns activity from this member's groups. Must be authenticated as this member",
			"page_start": "Starting timestamp for item to return."
		},
		"desc": "API method for retrieving the activity feed for a member's groups",
		"group": "feeds"
	}, {
		"formats": ["json"],
		"response_notes": "\nReturns the `rich` type of oEmbed resources defined in [section 2](http:\/\/www.oembed.com\/#section2) of the oEmbed specification in JSON format.\n\n\nSending the `X-Meta-Photo-Host` header set to `secure` or making the omebed request over https will result in https photo links in the embedded content.\n",
		"api_version": "1",
		"params": {
			"*url": "url of resource to be embedded",
			"maxwidth": "maximum width to display"
		},
		"path": "\/oembed",
		"http_method": "GET",
		"examples": "\nReturn an embeddable representation of a the ny-scala group\n\n    https:\/\/api.meetup.com\/oembed?url=http:\/\/www.meetup.com\/ny-tech\n[Try it out](\/meetup_api\/console\/?path=\/oembed&url=http:\/\/www.meetup.com\/ny-tech#browser)\n",
		"name": "oEmbed",
		"scopes": [],
		"param_notes": "\nThis method does not require authentication. It requires only a url parameter and responds according to the [OEmbed specification](http:\/\/www.oembed.com\/). Any of the following base URLs may refer to embeddable content:\n\n* http:\/\/www.meetup.com\/\n* http:\/\/meetup.com\/\n* http:\/\/meetu.ps\/\n\nAn optional __maxwidth__ parameter may be provided.\n",
		"group": "oembed",
		"desc": "oEmbed implementation"
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/rsvps",
		"response_notes": "RSVP upload notification objects include these properties. This method's response is \nan array of zero or more of these, while Meetup's JS client calls your callback function\nwith exactly one object.",
		"params": {
			"*callback": "Name of a function to be called with an array of RSVP notification objects. If this \nparameter is not supplied, the chunked stream is joined instead.",
			"since_mtime": "Should be supplied for all but the first polling request, so that any missed notifications are can be sent in an immediate response",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/rsvps",
		"http_method": "GET",
		"examples": "\nInstall the Meetup stream client with [bower](http:\/\/bower.io\/)\n\n    $ bower install must\n\nThe HTML page draws a table of RSVPs as they are received.\n\n    <html>\n      <head>\n        <script src=\"components\/jquery\/jquery.min.js\"><\/script>\n        <script src=\"components\/must\/must.js\"><\/script>\n        <script>\n          must.Rsvps(function(rsvp) {\n            $('#rsvps').prepend(\n              '<tr><td>' + rsvp.member.member_name +\n              '<\/td><td>' + rsvp.group.group_name +\n              '<\/td><td>' + (rsvp.event.time ? new Date(rsvp.event.time) : '') +\n              '<\/td><td>' + rsvp.group.group_city + ', ' + rsvp.group.group_country +\n              '<\/td><\/tr>'\n            );\n          });\n        <\/script>\n      <\/head>\n      <body>\n        <table><thead>\n          <tr><th>Who<\/th><th>What<\/th><th>When<\/th><th>Where<\/th><\/tr>\n        <\/thead><tbody id=\"rsvps\">\n        <\/tbody><\/table>\n      <\/body>\n    <\/html>\n\nSee **map** in our [stream github project](https:\/\/github.com\/meetup\/stream) \nfor a more advanced example.\n",
		"response": {
			"venue": ["Venue, if public", {
				"venue_name": "-",
				"lon": "Longitude of the venue",
				"api_version": "2",
				"venue_id": "Unique numeric identifier",
				"lat": "Latitude of the venue"
			}],
			"response": "\"yes\" or \"no\"",
			"guests": "Number of guests the member is bringing",
			"member": ["Member who RSVP'd", {
				"other_services": "e.g. {\"twitter\": {\"identifier\": \"MeetupAPI\"}}",
				"member_id": "Unique numeric id",
				"photo": "Thumbnail URL for member photo if one exists",
				"api_version": "2",
				"member_name": "Full name given"
			}],
			"rsvp_id": "Unique numeric identifier",
			"event": ["Event for the RSVP", {
				"event_name": "Name of the event",
				"time": "Event time if set in milliseconds since the epoch",
				"event_id": "Unique alphanumeric identifier",
				"api_version": "2",
				"event_url": "URL to the full event page"
			}],
			"api_version": "2",
			"mtime": "Last modified time of this RSVP, in milliseconds since the epoch",
			"group": ["Group hosting the event", {
				"group_topics": ["Topics associated with this group", {
					"urlkey": "Unique keyword",
					"topic_name": "Longer name",
					"api_version": "2"
				}],
				"group_city": "Group's home city",
				"group_country": "two-letter code of group's home country",
				"group_id": "Numeric identifier of the group",
				"group_name": "-",
				"group_lon": "Longitude of group's approximate location",
				"api_version": "2",
				"group_urlname": "Unique portion of group's URL, no slashes",
				"group_state": "two-letter code of group's home state, if in US or CA",
				"group_lat": "Latitude of group's approximate location"
			}]
		},
		"host": "stream",
		"name": "Long-Polling RSVP Stream",
		"tag": "polling",
		"param_notes": "These parameters are set automatically by Meetup's [must.js](https:\/\/github.com\/meetup\/must.js#readme) client.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nThis [long-polling](http:\/\/en.wikipedia.org\/wiki\/Comet_%28programming%29#Script_tag_long_polling) \nstream can be easily consumed using JavaScript in any modern browser. RSVP\nnotifications are received when they happen, or as soon as your script finishes handling its\nlast notification."
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/rsvps",
		"response_notes": "This stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling), one per WebSocket frame.",
		"params": {
			"since_mtime": "Return recent RSVPs with an mtime greater than the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/rsvps",
		"http_method": "WS",
		"examples": "The [long-polling](#polling) stream examples will automatically use WebSockets, if available.",
		"host": "stream",
		"name": "WebSockets RSVP Stream",
		"tag": "websockets",
		"param_notes": "The full URL for this method is **`ws:\/\/stream.meetup.com\/2\/rsvps`**",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nFor browsers that support it, [WebSockets](http:\/\/dev.w3.org\/html5\/websockets\/) is a more\nefficient alternative to the long-polling stream. This is a **push only** endpoint and will discard\nany messages received from the client after the socket is open.\n\nBecause browser support for WebSockets is limited, we recommend that you consume this stream\nthrough the [must.js](https:\/\/github.com\/meetup\/must.js#readme) client, which can fallback to long-polling.\n    "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/rsvps",
		"response_notes": "\nThis stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling). These are served one per HTTP chunk and terminated\nby newlines.",
		"params": {
			"since_mtime": "Return recent RSVP with an mtime greater than the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/rsvps",
		"http_method": "GET",
		"examples": "\nTry out the RSVP stream on a command line:\n\n    curl -i http:\/\/stream.meetup.com\/2\/rsvps\n\nIf your system doesn't have curl, you can also use wget:\n\n    wget -qO- http:\/\/stream.meetup.com\/2\/rsvps\n\nAn application using the stream should keep track of the last RSVP **mtime** it has\nreceived, so that when disconnected it may resume where it left off:\n\n    curl -i http:\/\/stream.meetup.com\/2\/rsvps?since_mtime=1294435118533\n\nThe number of past rsvps the stream will return is limited. Applications that \nintend to consume all RSVP activity should reconnect within a few seconds to avoid \nmissing RSVP messages.\n    ",
		"host": "stream",
		"name": "Chunked HTTP RSVP Stream",
		"tag": "http",
		"param_notes": "This method does not require authentication, or any parameters. Applications should\n                           only need a single connection to the stream, and at most 10 connections are allowed\n                           per client IP address.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nLive HTTP stream of RSVPs within public Meetup groups. This method uses [chunked \ntransfer encoding](http:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding) \nto maintain a persistent connection with the client. This connection will only be \nterminated for server maintenance or a connection error.\n    "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/open_events",
		"response_notes": "\n A response message is one HTTP chunk, the body of which is a single json object,\n                           described below, terminated by a newline.\n\nClients of this method can expect to be pushed events when\n\n  * an event is created\n  * a drafted event is published\n  * the title, description, time, or venue of the event changes\n  * the state of the event changes to or from `canceled`, `deleted`, `upcoming`, etc.\n\nNote that in cases where an event is scheduled to recur over time, changes to that event and future events\nwill broadcast those changes for any repeated occurrences of those events in the next 20 days.\n\nFor example, if a user creates a recurring event, the first instance as well as the next `n` instances of that event\nthat fall within the next 20 days will be pushed to clients.\n\nIf a user chooses to update the title of all upcoming instances of an event, the next `n` instances of that event\nthat fall within the next 20 days will be pushed to clients.\n      ",
		"params": {
			"since_mtime": "Return events with an mtime greater than the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/open_events",
		"http_method": "GET",
		"examples": "\nTry out the open event stream on a command line:\n\n    curl -i http:\/\/stream.meetup.com\/2\/open_events \n\nIf your system doesn't have curl, you can also use wget:\n\n    wget -qO- http:\/\/stream.meetup.com\/2\/open_events\n\nAn application using the stream should keep track of the last event **mtime** it has\nreceived, so that when disconnected it may resume where it left off:\n\n    curl -i http:\/\/stream.meetup.com\/2\/open_events?since_mtime=1294435118533\n\nThe number of past events the stream will return is limited. Applications that\nintend to consume all event activity should reconnect within a few seconds to avoid\nmissing event messages. \n\nTo monitor RSVP activity, consider subscribing to the \/2\/rsvps stream\n      ",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"rsvp_limit": "The number of \"yes\" rsvps an event can have before members will be added to the waiting list",
			"venue": ["Venue, if selected and not hidden", {
				"zip": "if US or Canada",
				"lat, lon": "coordinates of venue",
				"city, status, country": "City, Country and if in US, State of the venue",
				"phone": "phone number of venue",
				"address_1": "line 1 of venue address",
				"address_2": "line 2 of venue address",
				"name": "venue name",
				"address_3": "line 3 of venue address",
				"id": "venue id",
				"api_version": "2"
			}],
			"venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\".",
			"fee": ["fee info returned when payment is required", {
				"description": "fee description",
				"amount": "amount of the fee",
				"currency": "currency accepted for fee",
				"api_version": "2"
			}],
			"description": "HTML Description of the event",
			"api_version": "2",
			"mtime": "Last modified time of this event, in milliseconds since the epoch",
			"event_url": "URL of the event's page on meetup.com",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
			"payment_required": " \"1\" if required \"0\" otherwise",
			"name": "The name of the event",
			"photo_url": "URL of the event photo, if any",
			"id": "The event id, May be numeric or alphanumeric, always served as a string",
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"status": " \"upcoming\", \"proposed\", \"suggested\", \"canceled\" or \"deleted\" ",
			"group": ["Group that is hosting", {
				"join_mode": " \"open\", \"approval\", or \"closed\" ",
				"name": "group name",
				"id": "group id",
				"group_lon": "group longitude, approximate",
				"urlname": "group url name",
				"api_version": "2",
				"category": ["Group category", {
					"name": "Display name of the category",
					"id": "Numeric identifier of the category",
					"api_version": "2",
					"shortname": "String identifier of the category"
				}],
				"group_photo": ["Group photo if one is set", {
					"highres_link": "Link to full sized photo",
					"photo_link": "Link to standard sized photo",
					"photo_id": "Numeric identifier of the photo",
					"api_version": "2",
					"thumb_link": "Link to thumbnail sized photo"
				}],
				"group_lat": "group latitude, approximate"
			}]
		},
		"host": "stream",
		"name": "OpenEvents Stream",
		"param_notes": "This method does not require authentication, or any parameters. Applications should\n                           only need a single connection to the stream, and at most 10 connections are allowed\n                           per client IP address.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nLive HTTP stream of events within public Meetup groups. This method uses [chunked\ntransfer encoding](http:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding)\nto maintain a persistent connection with the client. This connection will only be\nterminated for server maintenance or a connection error.\n      "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/photos",
		"response_notes": "Photo upload notification objects include these properties. This method's response is \nan array of zero or more of these, while Meetup's JS client calls your callback function\nwith exactly one object.",
		"params": {
			"*callback": "Name of a function to be called with an array of photo notification objects. If this \nparameter is not supplied, the chunked stream is joined instead.",
			"since_mtime": "Should be supplied for all but the first polling request, so that any missed notifications are can be sent in an immediate response",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/photos",
		"http_method": "GET",
		"examples": "\nInstall the Meetup stream client with [bower](http:\/\/bower.io\/)\n\n    $ bower install must\n\nThe HTML page below is empty until photos are inserted from the stream.\n\n    <html>\n      <head>\n        <script src=\"components\/jquery\/jquery.min.js\"><\/script>\n        <script src=\"components\/must\/must.js\"><\/script>\n        <script>\n          must.Photos(function(photo) {\n            $('#photos').prepend(\n              '<img src=\"' + photo.photo_link + '\"\/>'\n            );\n          });\n        <\/script>\n      <\/head>\n      <body>\n        <div id=\"photos\" \/>\n      <\/body>\n    <\/html>\n\nSee **picturethis** in our [stream github project](https:\/\/github.com\/meetup\/stream) \nfor a more advanced example.\n",
		"response": {
			"photo_album": ["Photo album this photo belongs to", {
				"photo_album_id": "ID for the photo album",
				"api_version": "2",
				"event": ["Event, when available, associated with the photo album", {
					"name": "Name of event",
					"id": "ID of the event",
					"api_version": "2"
				}],
				"group": ["Group associated with photo album", {
					"country": "Group country code",
					"join_mode": " \"open\", \"approval\", or \"closed\" ",
					"group_topics": ["Topics associated with this group", {
						"urlkey": "Unique keyword",
						"topic_name": "Longer name",
						"api_version": "2"
					}],
					"city": "Group city",
					"name": "Name of group",
					"state": "If in the US, the state of the group",
					"id": "ID of group",
					"group_lon": "Group longitude",
					"urlname": "Unique portion of group's URL, no slashes",
					"api_version": "2",
					"group_lat": "Group latitude"
				}]
			}],
			"highres_link": "URL for the original sized photo",
			"photo_id": "ID of the photo",
			"member": ["Member that uploaded the photo", {
				"member_id": "ID of the member",
				"name": "Name of the member",
				"api_version": "2"
			}],
			"caption": "Photo caption if available",
			"ctime": "Created time in millisseconds since the epoch",
			"photo_link": "URL for the standard sized photo",
			"api_version": "2",
			"mtime": "Last updated time in milliseconds since the epoch",
			"thumb_link": "URL for the thumbail sized photo"
		},
		"host": "stream",
		"name": "Long-Polling Photo Stream",
		"tag": "polling",
		"param_notes": "These parameters are set automatically by Meetup's [must.js](https:\/\/github.com\/meetup\/must.js#readme) client.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nThis [long-polling](http:\/\/en.wikipedia.org\/wiki\/Comet_%28programming%29#Script_tag_long_polling) \nstream can be easily consumed using JavaScript in any modern browser. Photo upload\nnotifications are received when they happen, or as soon as your script finishes handling its\nlast notification.\n      "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/photos",
		"response_notes": "This stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling), one per WebSocket frame.",
		"params": {
			"since_mtime": "Return recent photos with an mtime greater then the supplied time, in millisends since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/photos",
		"http_method": "WS",
		"examples": "The [long-polling](#polling) stream examples will automatically use WebSockets, if available.",
		"host": "stream",
		"name": "WebSocket Photo Stream",
		"tag": "websockets",
		"param_notes": "The full url for this method is **`ws:\/\/stream.meetup.com\/2\/photos`**",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nFor browsers that support it, [WebSockets](http:\/\/dev.w3.org\/html5\/websockets\/) is a more\nefficient alternative to the long-polling stream. This is a **push only** endpoint and will discard\nany messages received from the client after the socket is open.\n\nBecause browser support for WebSockets is limited, we recommend that you consume this stream\nthrough the [must.js](https:\/\/github.com\/meetup\/must.js#readme) client, which can fallback to long-polling.\n    "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/photos",
		"response_notes": "\nThis stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling). These are served one per HTTP chunk and terminated\nby newlines.",
		"params": {
			"since_mtime": "Return recent photos with an mtime greater then the supplied time, in millisends since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/photos",
		"http_method": "GET",
		"examples": "\nTry out the photo stream on the command line\n\n    curl -i http:\/\/stream.meetup.com\/2\/photos\n    ",
		"host": "stream",
		"name": "Chunked HTTP Photo Stream",
		"tag": "http",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nThis method serves photo notifications using\n[chunked encoding](http:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding)\nto maintian a persistent connection with a client. The connection will only be\nterminiated for server maintenance or a connection error. It is suitable for\nlow-level HTTP clients rather than web browsers.\n      "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/open_venues",
		"response_notes": "Responses will be in the format of JSON notification objects, served one per HTTP chuck terminated by newlines",
		"params": {
			"since_mtime": "Return recent open venues with an mtime greater then the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"api_version": "2",
			"trickle": "When supplied with a request, the Meetup API will push your client the entire Meetup database of public venues in batches of 512"
		},
		"api_version": "2",
		"path": "\/2\/open_venues",
		"http_method": "GET",
		"examples": "\nTry out the open venues stream on the command line\n\n    curl -i http:\/\/stream.meetup.com\/2\/open_venues\n\nOr stream all Meetup public venues using the trickle request parameter\n\n    curl -i http:\/\/stream.meetup.com\/2\/open_venues?trickle\n    ",
		"response": {
			"zip": "If available, the venue's zipcode",
			"country": "If available, the name of the venue's country code",
			"city": "If available, the name of the venue's city",
			"address_1": "If available, the first address line of the venue",
			"address_2": "If available, the second address line of the venue",
			"address_3": "If available, the third address line of the venue",
			"lon": "If available, the venue's longitude",
			"api_version": "2",
			"phone": "If available, the venue's phone number",
			"name": "If available, the venue's name",
			"state": "If available and the venue's country is within the US or Canada, the venue's state",
			"id": "ID of the venue",
			"lat": "If available, the venue's latitude"
		},
		"host": "stream",
		"name": "Chunked HTTP Open Venues Stream",
		"tag": "http",
		"param_notes": "This method does not require authentication, or any parameters. Applications should\n                           only need a single connection to the stream, and at most 10 connections are allowed\n                           per client IP address. This method can also be used to download all of Meetup's public venues by passing in the URL request parameter 'trickle'",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nLive HTTP stream of the creation and modification of public Meetup venues using\n[chunked encoding](http:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding)\nto maintian a persistent connection with a client. The connection will only be\nterminiated for server maintenance or a connection error. It is suitable for\nlow-level HTTP clients rather than web browsers.\n      "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/event_comments",
		"response_notes": "Event Comment notification objects include these properties. This method's response is\nan array of zero or more of these, while Meetup's JS client calls your callback function\nwith exactly one object.",
		"params": {
			"*callback": "Name of a function to be called with an array of Event Comment notification objects. If this\nparameter is not supplied, the chunked stream is joined instead.",
			"since_mtime": "Should be supplied for all but the first polling request, so that any missed notifications are can be sent in an immediate response",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/event_comments",
		"http_method": "GET",
		"examples": "\nInstall the Meetup stream client with [bower](http:\/\/bower.io\/)\n\n    $ bower install must\n\nThe HTML page draws a table of Event Comments as they are received.\n\n    <html>\n      <head>\n         <script src=\"components\/jquery\/jquery.min.js\"><\/script>\n        <script src=\"components\/must\/must.js\"><\/script>\n        <script>\n          must.Comments(function(comment) {\n            $('#comments').prepend(\n              '<tr><td>' + comment.member.member_name +\n              '<\/td><td>' + new Date(comment.mtime) +\n              '<\/td><td>' + comment.comment +\n              '<\/td><\/tr>'\n            );\n          });\n        <\/script>\n      <\/head>\n      <body>\n        <table><thead>\n          <tr><th>Who<\/th><th>When<\/th><th>What<\/th><\/tr>\n        <\/thead><tbody id=\"comments\">\n        <\/tbody><\/table>\n      <\/body>\n    <\/html>\n",
		"response": {
			"member": ["Member who posted the comment", {
				"member_id": "Unique numeric id",
				"photo": "If available, the photo of the member posting the comment",
				"api_version": "2",
				"member_name": "Full name given"
			}],
			"comment": "The comment text",
			"id": "Unique numeric identifier",
			"event": ["Event comment was posted in", {
				"event_name": "Name of the event",
				"event_id": "Unique numeric id",
				"api_version": "2"
			}],
			"api_version": "2",
			"mtime": "Last modified time of this event comment, in milliseconds since the epoch",
			"status": "Set to 'active' or 'deleted'. Comments are republished to the stream when members delete them, so that apps may update their local comment display.",
			"group": ["Group hosting the event", {
				"group_city": "Group's home city",
				"group_country": "two-letter code of group's home country",
				"group_id": "Numeric identifier of the group",
				"group_name": "-",
				"group_lon": "Longitude of group's approximate location",
				"api_version": "2",
				"group_urlname": "Unique portion of group's URL, no slashes",
				"group_state": "two-letter code of group's home state, if in US or CA",
				"group_lat": "Latitude of group's approximate location"
			}]
		},
		"host": "stream",
		"name": "Long-Polling Event Comments Stream",
		"tag": "polling",
		"param_notes": "These parameters are set automatically by Meetup's [must.js](https:\/\/github.com\/meetup\/must.js#readme) client.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nThis [long-polling](http:\/\/en.wikipedia.org\/wiki\/Comet_%28programming%29#Script_tag_long_polling)\nstream can be easily consumed using JavaScript in any modern browser. Event Comment\nnotifications are received when they happen, or as soon as your script finishes handling its\nlast notification."
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/event_comments",
		"response_notes": "This stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling), one per WebSocket frame.",
		"params": {
			"since_mtime": "Return recent Event Comments with an mtime greater than the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/event_comments",
		"http_method": "WS",
		"examples": "The [long-polling](#polling) stream examples will automatically use WebSockets, if available.",
		"host": "stream",
		"name": "WebSockets Event Comments Stream",
		"tag": "websockets",
		"param_notes": "The full URL for this method is **`ws:\/\/stream.meetup.com\/2\/event_comments`**",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nFor browsers that support it, [WebSockets](http:\/\/dev.w3.org\/html5\/websockets\/) is a more\nefficient alternative to the long-polling stream. This is a **push only** endpoint and will discard\nany messages received from the client after the socket is open.\n\nBecause browser support for WebSockets is limited, we recommend that you consume this stream\nthrough the [must.js](https:\/\/github.com\/meetup\/must.js#readme) client, which can fallback to long-polling.\n    "
	}, {
		"formats": ["json"],
		"doc_path": "\/stream\/2\/event_comments",
		"response_notes": "\nThis stream includes the same JSON notification objects as its long-polling\n[counterpart](#polling). These are served one per HTTP chunk and terminated\nby newlines.",
		"params": {
			"since_mtime": "Return recent Event Comments with an mtime greater than the supplied time, in milliseconds since the epoch",
			"since_count": "Request that some number of recent messages be sent immediately, if available. May not be specified in the same request as since_mtime.",
			"event_id": "Limit notifications to a specific event id. Use alphanumeric ids for repeating events.",
			"api_version": "2"
		},
		"api_version": "2",
		"path": "\/2\/event_comments",
		"http_method": "GET",
		"examples": "\nTry out the Event Comments stream on a command line:\n\n    curl -i http:\/\/stream.meetup.com\/2\/event_comments\n\nIf your system doesn't have curl, you can also use wget:\n\n    wget -qO- http:\/\/stream.meetup.com\/2\/event_comments\n\nAn application using the stream should keep track of the last Event Comment **mtime** it has\nreceived, so that when disconnected it may resume where it left off:\n\n    curl -i http:\/\/stream.meetup.com\/2\/event_comments?since_mtime=1294435118533\n\nThe number of past Event Comments the stream will return is limited. Applications that\nintend to consume all Event Comment activity should reconnect within a few seconds to avoid\nmissing Event Comment messages.\n    ",
		"host": "stream",
		"name": "Chunked HTTP Event Comments Stream",
		"tag": "http",
		"param_notes": "This method does not require authentication, or any parameters. Applications should\n                           only need a single connection to the stream, and at most 10 connections are allowed\n                           per client IP address.",
		"errors": {
			"api_version": "2",
			"connection_limit": "the client IP has exceeded its maximum number of connections"
		},
		"group": "streams",
		"desc": "\nLive HTTP stream of Event Comments  within public meetup groups. This method uses [chunked\ntransfer encoding](http:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding)\nto maintain a persistent connection with the client. This connection will only be\nterminated for server maintenance or a connection error.\n    "
	}, {
		"path": "\/status",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"title": "Optional title for display. May be absent",
			"message": "Optional message for display. May be absent",
			"swagger_type": "ServiceStatus",
			"status": "May be one of \"ok\", \"notice\", or \"unavailable\""
		},
		"response_notes": "Returns a JSON-encoded object reprsenting the current API service status",
		"name": "API Status",
		"scopes": ["basic"],
		"param_notes": "No parameters are needed",
		"api_version": "3",
		"group": "meta",
		"desc": "Returns the current API service status"
	}, {
		"path": "\/self\/blocks\/:member_id",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"status": "The block status for the target member. This may be one of 'blocked' or 'none'"
		},
		"name": "Block status",
		"tag": "status",
		"scopes": ["reporting"],
		"param_notes": "A valid member_id path parameter for the target member is required.",
		"api_version": "3",
		"group": "abuse",
		"desc": "Checks the block status for a target member relative to the authenticated member"
	}, {
		"formats": ["json"],
		"response_notes": "A successful block request will result in a 204 No Content response",
		"params": {
			"report": "An optional value that represents a type of abuse the target member is being blocked for. Acceptable values include one of the following: fake, impersonation, inappropriate_photo, offsite, underage",
			"comments": "An optional string of text describing why you have chosen to block this member"
		},
		"api_version": "3",
		"path": "\/self\/blocks\/:member_id",
		"http_method": "POST",
		"examples": "\nBlock a member {member_id} as a member authorized with the token {token} and the scope \"abuse\"\n\n    curl -X POST -H \"Authorization: Bearer {token}\" \\\n      \"https:\/\/api.meetup.com\/self\/blocks\/{member_id}\"",
		"name": "Block member",
		"tag": "block",
		"scopes": ["reporting"],
		"param_notes": "A valid member_id path parameter for the target member is required. This method requires the oauth `reporting` scope for oauth-authenticated requests",
		"group": "abuse",
		"desc": "Blocks a target member from various interactions with the authenticated member on the platform"
	}, {
		"formats": ["json"],
		"response_notes": "A successful abuse report request will result in a 202 Accepted response",
		"params": {
			"member_id": "A numeric identifier for the member being reported. If not provided, this will be infered by the author of the content associated with the provided `content_tag`",
			"*type": "A required identifier for type of abuse you are reporting. Acceptable values include abuse, cron, dangerous, dislike_photo, fake, graphic_content, graphic_photo, impersonation, inappropriate, inappropriate_photo, join, licensed_services, not_accurate, not_irl, offsite, other, photo, sex, spam, transactional, underage",
			"comments": "An optional string of text that describes why you are submitting this report",
			"url": "An optional URL for the location of the reported content if one exists",
			"content_tag": "An optional identifier for flagged content that identifies both the type and id, where possible, of the content reported. The type and id should be separated by a ':' character, e.g `event_comment:{event_comment_id}`. Valid content_tag types include conversation, conversation_message, convo, custom_list, email, event_comment, event_photo, group, group_communication, group_communication_message, mailing_list, member_photo, member_profile, message_board, pro_megaphone, reply. If member_id is not provided, content_tag should be provided to imply member_id"
		},
		"api_version": "3",
		"path": "\/self\/abuse_reports",
		"http_method": "POST",
		"examples": "\n\n Submit an abuse report for member {member_id} for posting inappropriate comments\n\n    curl -H \"Authorization: Bearer {token}\" \\\n      \"https:\/\/api.meetup.com\/self\/abuse_reports\" \\\n      -d \"member_id={member_id}&type=inappropriate&comment=This member has been posting inappropriate comments on my Meetups\"",
		"name": "Report Abuse",
		"scopes": ["reporting"],
		"param_notes": "This method requires the oauth `reporting` scope for oauth-authenticated requests",
		"group": "abuse",
		"desc": "Submits a new abuse report for a target member. Abuse reports will be followed up on by our Community Support team."
	}, {
		"formats": ["json"],
		"response_notes": "A successful abuse report request will result in a 202 Accepted response",
		"params": {
			"*type": "A required identifier for type of abuse you are reporting. Acceptable values include dangerous, graphic_content, graphic_photo, licensed_services, not_accurate, not_irl, other, sex, transactional"
		},
		"api_version": "3",
		"path": "\/:urlname\/abuse_reports",
		"http_method": "POST",
		"examples": "\n\n Submit an abuse report for a group {urlname} that doesn't appear to be fostering a health community\n\n    curl -H \"Authorization: Bearer {token}\" \\\n      \"https:\/\/api.meetup.com\/{urlname}\/abuse_reports\" \\\n      -d \"type=not_community\"",
		"name": "Report Group",
		"scopes": ["reporting"],
		"param_notes": "This method requires the oauth `reporting` scope for oauth-authenticated requests",
		"group": "abuse",
		"desc": "Submits a new abuse report for a target group. Abuse reports will be followed up on by our Community Support team."
	}, {
		"formats": ["json"],
		"response_notes": "A successful unblock request will result in a 204 No Content response",
		"api_version": "3",
		"path": "\/self\/blocks\/:member_id",
		"http_method": "DELETE",
		"examples": "\nBlock a member {member_id} as a member authorized with the token {token} and scope \"abuse\"\n\n    curl -X DELETE -H \"Authorization: Bearer {token}\" \\\n      \"https:\/\/api.meetup.com\/self\/blocks\/{member_id}\"",
		"name": "Unblock member",
		"tag": "unblock",
		"scopes": ["reporting"],
		"param_notes": "A valid member_id path parameter for the target member is required. This method requires the oauth `reporting` scope for oauth-authenticated requests.",
		"group": "abuse",
		"desc": "Unblocks a previously blocked member from various interactions with the authenticated member on the platform"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will result in a simple JSON-encoded message with an HTTP 200 response.",
		"params": {
			"member": "Comma-delimited numeric pending member IDs. The maximum allowed is 200",
			"welcome_message": "Optional message to send to the members being approved. If not provided, the groups default welcome message will be sent. Max message size is 2000",
			"send_copy": "Optional boolean value indicating whether or not the org should receive a copy of the message sent to the approved members"
		},
		"api_version": "3",
		"path": "\/:urlname\/member\/approvals",
		"http_method": "POST",
		"examples": "\n Approve requests for membership in your group\n\n    curl -H \"Authorization: Bearer $OAUTH2_ACCESS_TOKEN\" 'https:\/\/api.meetup.com\/your-group\/member\/approvals' -d 'member=123,456'\n    {\"message\":\"ok\"}\n\n Members 123 and 456 will get an email notification\n          ",
		"name": "Membership Approval",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. If you need access to your group's welcome message, you can access it from the [\/2\/groups](\/meetup_api\/docs\/2\/groups\/#response) method, providing a value of `welcome_message` for the fields parameter. To get a list of pending members, as an organizer, you can request the status `pending` in the [\/2\/profiles](\/meetup_api\/docs\/2\/profiles\/#params) method.",
		"errors": {
			"member_limit_error": "returned when an attempt to approve members goes over the maximum number of active members for the group",
			"permission_error": "returned when a non-organizer attempts to approve members"
		},
		"group": "profiles",
		"desc": "Approves one or more requests for group membership"
	}, {
		"formats": ["json"],
		"params": {
			"filter": "A named filter to apply to the attendance list. These are roughly equivalent to the set of filters you will see in the attendance tool on the site. These filters correspond with attendance records as well as each member's original RSVP status. The filter value be one of: legacy, maybe, waitlist, yes, absent, all, attended, noshow, excused, relevant, no. The default is 'attended'. The 'absent' filter represents all members not in attendance including members with a 'noshow' status. An 'excused' absence is an absent member marked as such by an administrative member",
			"member": "Raw text used to search for member by name. This may only be applied when the filter parameter is set to 'all'. The provided text must consist of at least 2 characters."
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:id\/attendance",
		"http_method": "GET",
		"response": {
			"member": ["Member in, or not in, attendance", {
				"name": "Name of the member",
				"photo": ["Member's photo, if available", {
					"thumb": "Thumbnail photo url"
				}],
				"id": "Numeric member ID"
			}],
			"rsvp": ["RSVP, if member originally RSVP'd", {
				"guests": "number of guests",
				"response": "Member's original RSVP response. May be one of: maybe, waitlist, yes, no, havent"
			}],
			"status": "The member's attendance status. May be one of: noshow, absent, attended"
		},
		"name": "Attendance",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. The :id path element must be a valid alphanumeric Meetup event identifier",
		"group": "events",
		"desc": "Lists attendance records for Meetup events. Limited for use by administrative members."
	}, {
		"formats": ["json"],
		"response_notes": "If successful, this method will return a 200 response with a JSON-encoded success message, otherwise failures will result a 400 response",
		"params": {
			"guests": "The number of guests accompanying member. Maximum of 99 is allowed. When providing multiple values in the `member` field, this value is ignored",
			"headcount": "Sets the overall headcount for the event. This may not necessarily correlate with the list of attendees in this group if the event is part of a joint Meetup event. When providing multiple values in the `member` field, this value is ignored",
			"*member": "A comma-delimited list of valid ids associated with members RSVP'd to the event",
			"*status": "An attendance status for the provided members. Must be one of: noshow, absent, attended"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:id\/attendance",
		"http_method": "POST",
		"name": "Attendance Taking",
		"tag": "edit",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. The :id path element must be a valid alphanumeric Meetup event identifier. Highlighted fields are required.",
		"group": "events",
		"desc": "Takes member attendance for an event. Limited for use by administrative members."
	}, {
		"formats": ["json"],
		"response_notes": "The response will be a JSON-encoded array of responses to requests defined in the batch request",
		"params": {
			"*requests": "JSON-encoding of multiple request objects as described in the parameter notes"
		},
		"api_version": "3",
		"path": "\/batch",
		"http_method": "POST",
		"examples": "Below is an example of making batch request issued by the command line program, curl\n\n<pre>\n# define a file containing the request body containing the requests to execute\ncat batch.requests\nrequests=[{\n  \"path\":\"\/2\/member\/self\"\n},{\n  \"path\": \"\/2\/events\",\n  \"params\": {\n    \"member_id\":\"self\",\n    \"rsvp\": \"yes\",\n    \"only\":\"name,time\"\n  }\n}]\n\n# perform an HTTP POST request with the body set to the contents of the batch.requests file\ncurl -H \"Authorization: Bearer $OAUTH2_ACCESS_TOKEN\" https:\/\/api.meetup.com\/batch -d @batch.requests\n<\/pre>\n\n You may also discard fields as you can do with any other method. Below is an example of only fetching the bodies of the responses\n to the requests.\n\n<pre>\ncurl -H \"Authorization: Bearer $OAUTH2_ACCESS_TOKEN\" https:\/\/api.meetup.com\/batch?only=body -d @batch.requests\n<\/pre>\n",
		"name": "batch",
		"scopes": ["basic"],
		"param_notes": " You may supply a limited number of API requests, typically 1 to 4, in one batch request using the required \"requests\" parameter.\n Each of these individual batched requests will be tallied separately the same way they would when making individual requests.\n The batch request itself will not be tallied. As such, batch requests can not be rate limited.\n The only failures that you should account for are an authentication failure or a malformed JSON encoding of requests provided with the \"requests\" parameter.\n\n#### Composing batch requests\n\n Requests should be provided within a JSON-encoded array in the following format attached the `requests` parameter\n within a POST body\n\n<pre>\n [{\n   \"path\": \"\/2\/member\/self\",\n   \"ref\":  \"me\",\n   \"params\": {\n     \"only\": \"name,id\"\n   }\n }]\n<\/pre>\n\n Only \"path\" is required for HTTP GET requests. \"path\" represents the API path for the method. \"ref\" provides a way to tag a request in a batch\n with a label that you can associated with its response in the body of the batch response. This will default to the\n provided \"path\". You may also supply a \"params\" key with a JSON object representing the parameters provided for the\n request. At this time only HTTP GET, DELETE, and POST requests are supported. You may specify one of these as a \"method\" property of the request.\n Methods requiring a multipart form POST are currently not supported. You may also supply headers on a per request basis by adding a \"headers\" field to the\n JSON object representing the request as key value pairs of strings.\n\n#### Interpreting batch responses\n\n A response to a batch request will be in the format\n\n<pre>\n [{\n   \"path\": \"\/2\/member\/self\"\n   \"status\": 200,\n   \"ref\": \"me\",\n   \"body\": {\n     \"id\": 1234,\n     \"name\": \"Noah\"\n   },\n   \"headers\": {\n     \"key\": \"value\"\n    }\n }]\n<\/pre>\n\n \"path\" is the path of the method invoked. \"status\" represents the HTTP status code returned for the request.\n \"ref\" is the name provided for the inbound request. \"body\" is the JSON-encoded response from the given API request.\n \"headers\" is a JSON-encoded object representing the headers returned for that request.\n These requests may fail the same way they would when making individual requests. The response will indicate these\n failures.\n\n In order to preserve server resources and return batch responses within a reasonable amount of time, individual requests may timeout\n if a response is not computed within a reasonable amount of time. This allows for some requests to fail and others to pass which is a nicer\n alternative to an all or nothing response timeout.\n A timed out request can be identified by inspecting its response's \"status\" field for a value of 504. A timed out response may look like.\n\n<pre>\n [{\n   \"status\" : 504,\n   \"body\" : {\n    \"errors\" : [{\"code\": \"request_timeout\", \"message\":\"request timed out\"}]\n   },\n   \"headers\" : { ... },\n   \"path\" : \"\/end\/point\",\n   \"ref\" : \"request_ref\"\n }]\n<\/pre>\n",
		"group": "batch",
		"desc": "Performs multiple API requests in batch, useful for reducing HTTP network requests. This method is only available for OAuth authentication"
	}, {
		"path": "\/:urlname\/boards",
		"formats": ["json"],
		"http_method": "GET",
		"examples": "\nGet a list of the current [Dashing Whippet's boards](http:\/\/www.meetup.com\/dashing-whippets\/messages\/boards\/)\n\n    curl 'https:\/\/api.meetup.com\/dashing-whippets\/boards?key=API_KEY'\n\n [Try it in the console](\/meetup_api\/console\/?path=\/:urlname\/boards&:urlname=dashing-whippets)\n",
		"response": {
			"created": "Time board was created in milliseconds since the epoch",
			"name": "Discussion board name",
			"post_count": "Number of posts in discussions on this board",
			"id": "Numeric ID of discussion board",
			"updated": "Time board was updated in milliseconds since the epoch",
			"discussion_count": "Number of discussions on this board",
			"latest_reply": ["The latest reply on this board", {
				"member": ["The posting member", {
					"name": "Member name"
				}],
				"created": "Time reply was posted in milliseconds since the epoch"
			}],
			"group": ["The group associated with this board", {
				"id": "Numeric ID of group"
			}]
		},
		"name": "Discussion Boards",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name",
		"api_version": "3",
		"group": "boards",
		"desc": "Listings of Group discussion boards"
	}, {
		"formats": ["json"],
		"response_notes": "Meetup venue data comes from varying sources and may not contain all documented parameters",
		"api_version": "3",
		"path": "\/:urlname\/venues",
		"http_method": "GET",
		"response": {
			"zip": "If available, the venue's ZIP code",
			"country": "If available, the name of the venue's country code",
			"localized_country_name": "If available, the localized name of the venue's country",
			"visibility": "'private' if this venue is a private home, otherwise 'public'",
			"city": "If available, the name of the venue's city",
			"address_1": "If available, the first address line of the venue",
			"address_2": "If available, the second address line of the venue",
			"address_3": "If available, the third address line of the venue",
			"lon": "If available, the venue's longitude",
			"phone": "If available, the venue's photo number",
			"name": "If available, the venue's name",
			"state": "If available, and the venue's country id is within the US or Canada, the venue's state",
			"id": "Id, of the venue",
			"lat": "If available, the venue's latitude"
		},
		"name": "Group Venues",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. All parameters are optional",
		"group": "venues",
		"desc": "Returns venues a group has previously hosted events at"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will result in a simple JSON-encoded message with an HTTP 200 response",
		"params": {
			"member": "Comma-delimited numeric pending member IDs. The maximum allowed is 200",
			"anon": "Optional Boolean value indicating whether the declining member's email address should be hidden in the resulting response. Default is true.",
			"send_copy": "Optional Boolean value indicating whether or not to send a copy to the member issuing the decline. Default is false",
			"explanation": "Optional explanation to send to the members being declined. Max message size is 2000",
			"ban": "Optional Boolean value indicating whether or not to ban the member in the future. Default is false"
		},
		"api_version": "3",
		"path": "\/:urlname\/member\/approvals",
		"http_method": "DELETE",
		"examples": "\n Decline requests for membership in your group\n\n    curl -H \"Authorization: Bearer $OAUTH2_ACCESS_TOKEN\" -X DELETE 'https:\/\/api.meetup.com\/your-group\/member\/approvals?member=123,456'\n    {\"message\":\"ok\"}\n\n Members 123 and 456 will get an email notification\n          ",
		"name": "Membership Decline",
		"tag": "delete",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. To get a list of pending members, as an organizer, you can request the status `pending` in the [\/2\/profiles](\/meetup_api\/docs\/2\/profiles\/#params) method.",
		"errors": {
			"permission_error": "returned when a non-organizer attempts to decline members"
		},
		"group": "profiles",
		"desc": "Declines one or more requests for group membership"
	}, {
		"formats": ["json"],
		"api_version": "3",
		"path": "\/:urlname\/boards\/:bid\/discussions",
		"http_method": "GET",
		"examples": "\nGet a list of the current discussions going on in\nThe Dashing Whippet's [Whippet lounge](http:\/\/www.meetup.com\/dashing-whippets\/messages\/boards\/forum\/1061014)\n\n    curl 'https:\/\/api.meetup.com\/dashing-whippets\/boards\/1061014\/discussions?key=API_KEY'\n\n [Try it in the console](\/meetup_api\/console\/?path=\/:urlname\/boards\/:bid\/discussions&:urlname=dashing-whippets&:bid=1061014)\n",
		"response": {
			"subject": "The subject of the first post in this discussion",
			"created": "Time board was created in milliseconds since the epoch",
			"last_post": ["The last post made in this discussion", {
				"member": ["The posting member", {
					"name": "Member name"
				}],
				"created": "Time post was made in milliseconds since the epoch"
			}],
			"id": "Numeric discussion ID",
			"body": "The contents of the first post in this discussion",
			"reply_count": "Number of replies this discussion has",
			"started_by": ["The member that started this discussion", {
				"name": "Member name"
			}],
			"updated": "Time board was updated in milliseconds since the epoch",
			"board": ["The board this discussion belongs to", {
				"id": "Numeric ID of this discussion's board"
			}]
		},
		"name": "Discussions",
		"orders": {
			"thread_reply_count": "by the threads reply count",
			"member_name": "by posting member's name",
			"last_post_date": "(default) by post date",
			"thread_view_count": "by the number of views a thread has"
		},
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. The :bid path element may be any valid board ID for this group.",
		"group": "boards",
		"desc": "Listings of group discussions"
	}, {
		"path": "\/:urlname\/boards\/:bid\/discussions\/:did",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"subject": "subject of the post",
			"created": "Time post was created in milliseconds since the epoch",
			"member": ["The member that started this discussion", {
				"country": "Country, if provided, for the member",
				"city": "City, if provided, for the member",
				"name": "Member name",
				"photo": ["Photo object for active member", {
					"thumb": "Thumbnail photo url"
				}],
				"state": "State if in the US",
				"id": "Member ID"
			}],
			"id": "Numeric post ID",
			"discussion": ["The discussion this was posted in", {
				"id": "Numeric discussion ID"
			}],
			"body": "content of the post",
			"updated": "Time post was updated in milliseconds since the epoch",
			"in_reply_to": "ID of the post this was in reply to"
		},
		"name": "Discussion Posts",
		"scopes": ["basic"],
		"api_version": "3",
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. The :bid path element maybe any valid board ID for this group. The :did may be any valid discussion ID for this board",
		"desc": "Listing Group discussion posts",
		"group": "boards"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of Events the authenticated Member has RSVP'd in order of oldest to most recent",
		"params": {
			"scroll": "A string representing a scroll target.\n\nSupported values are as follows.\n\n__recent_past__: Scroll to the last RSVP'd Meetup Event that has passed.\n If there is no recent RSVP, this defaults to __next_upcoming__\n\n__next_upcoming__: Scroll to the next upcoming Meetup Event the authenticated member\nRSVP'd to.\n\nAlternatively the server may generate a scroll value used for pagination Link headers.\nClients should treat the contents of those as a transparent string. Its\ncontents are subject to change in the future",
			"page": "Number of results to return. Defaults to 200.",
			"fields": "A comma-delimited list of optional fields names which may be appended to the response",
			"rsvp": "Comma-delimited list of RSVP responses.\nValid values are \"waitlist\" or \"yes\". The default is \"yes\"",
			"desc": "When true, sorts results in descending order. Defaults to false",
			"status": "Comma-delimited list of event statuses.\nValid values are \"past\" or \"upcoming\""
		},
		"api_version": "3",
		"path": "\/self\/events",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "Status of the event. May be one of\n\"upcoming\" or \"past\""
		},
		"name": "Member Events",
		"scopes": ["basic"],
		"param_notes": "This endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json). Clients may\nuse the scroll request parameter to jump to a target scroll location.\nValid values for scroll targets are defined below.\nA 'page' parameter may be provided to control the number of results returned.",
		"group": "events",
		"desc": "Gets a listing of all scheduled Meetup Events the authenticated member has RSVP'd to\nthat have been announced to the group.\nThis listing is ordered from oldest to most recent by default"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will return a 201 response with a body containing the new event information.\n\nAn HTTP Location header will also be set containing the URL to fetch future updates to the event information",
		"params": {
			"rsvp_limit": "Total number of RSVPs slots available for the event",
			"rsvp_open_time": "Sets the time when members can starting RSVPing to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\nTo remove this RSVP restriction, set this parameter to 0",
			"question": "Sets or edits the RSVP survey question for the event.\nA maximum of 250 characters is permitted",
			"venue_visibility": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\"",
			"description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters.",
			"rsvp_close_time": "Sets the time when members can no longer RSVP to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\nTo remove this RSVP restriction, set this parameter to 0",
			"lon": "Adjusted venue longitude. Must be accompanied by 'lat' request parameter.",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"announce": "Boolean value indicating whether or not Meetup should announce this event to interested group members",
			"duration": "Event duration in milliseconds. When not specified, a default of 3 hours from the event `time` may be assumed by applications.\nTo clear event duration, set this to 0",
			"event_hosts": "Up to 5 comma-separated valid member ids to be hosts for the event.",
			"*name": "Display name of the event. May not be longer than 80 characters",
			"guest_limit": "Number of guests members may include in their RSVP, 0 or more. This defaults to 2 when undefined.",
			"self_rsvp": "The authenticated member will be RSVP'd to the created event. If `event_hosts` is not provided or is empty, the authenticated member will also be the event host. Defaults to \"true\".",
			"time": "Event start time in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\n\nScheduling Meetup events without a time will result in events in \"proposed\" status",
			"venue_id": "Numeric identifier of a venue",
			"publish_status": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on \/2\/event queries",
			"lat": "Adjusted venue latitude. Must be accompanied by a 'lon' request parameter."
		},
		"api_version": "3",
		"path": "\/:urlname\/events",
		"http_method": "POST",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Create Event",
		"tag": "create",
		"scopes": ["event_management"],
		"param_notes": "A valid path parameter for __:urlname__ is required.\n\nOnly members of the lead team may post new Meetup events\n\nCreating an event without a `time` will result in an event with a \"proposed\"\nstatus.\n\nEvent descriptions only support a subset of HTML, `B`, `I`, `A` in particular. Response bodies will include a description field that\nreturns a full HTML rendering of the provided description. Links to images will be rendered in `IMG` tags, but when editing, you should omit the `IMG` tag markup.\nTo get back the simplified markup, append 'simple_html_description' to the 'fields' request parameter.\n\nOAuth authenticated applications should request the [event_management](\/meetup_api\/auth\/#event_management_scope) OAuth scope.",
		"errors": {
			"publish_status_error": "Cannot mark an event as a draft",
			"venue_id_error": "Invalid venue_id",
			"name_error": "name is required",
			"event_error": "This event appears to contain spam material",
			"announce_error": "Cannot announce a draft event or an event that's already been announced",
			"question_error": "Invalid question value",
			"rsvp_open_time_error": "Cannot set rsvp_open_time without an event time",
			"duration_error": "Invalid event duration",
			"description_error": "description is over 50000 characters",
			"member_error": "Member has gone beyond their limit for posting events",
			"time_error": "Invalid event time",
			"rsvp_close_time_error": "Cannot set rsvp_close_time without an event time",
			"how_to_find_us_error": "how_to_find_us is over 250 characters"
		},
		"group": "events",
		"desc": "Creates a new Meetup group event"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will return a 200 response with a body including the updated event information",
		"params": {
			"rsvp_limit": "Total number of RSVPs slots available for the event",
			"rsvp_open_time": "Sets the time when members can starting RSVPing to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\nTo remove this RSVP restriction, set this parameter to 0",
			"question": "Sets or edits the RSVP survey question for the event.\nA maximum of 250 characters is permitted",
			"venue_visibility": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\"",
			"description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters.",
			"rsvp_close_time": "Sets the time when members can no longer RSVP to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\nTo remove this RSVP restriction, set this parameter to 0",
			"lon": "Adjusted venue longitude. Must be accompanied by 'lat' request parameter.",
			"how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
			"announce": "Boolean value indicating whether or not Meetup should announce this event to interested group members",
			"duration": "Event duration in milliseconds. When not specified, a default of 3 hours from the event `time` may be assumed by applications.\nTo clear event duration, set this to 0",
			"event_hosts": "Up to 5 comma-separated valid member ids to be hosts for the event.",
			"*name": "Display name of the event. May not be longer than 80 characters",
			"guest_limit": "Number of guests members may include in their RSVP, 0 or more. This defaults to 2 when undefined.",
			"time": "Event start time in milliseconds since the epoch, or relative to the current time in the d\/w\/m format.\n\nScheduling Meetup events without a time will result in events in \"proposed\" status",
			"venue_id": "Numeric identifier of a venue",
			"publish_status": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on \/2\/event queries",
			"lat": "Adjusted venue latitude. Must be accompanied by a 'lon' request parameter."
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:id",
		"http_method": "PATCH",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Update Event",
		"tag": "edit",
		"scopes": ["event_management"],
		"param_notes": "Valid path parameters for __:urlname__ and event __:id__ are required.\n\nEvent descriptions only support a subset of HTML. Please see the [Event Create](\/meetup_api\/docs\/:urlname\/events\/#createparams) \ndocumentation for more information.\n\nOAuth authenticated applications should request the [event_management](\/meetup_api\/auth\/#event_management_scope) OAuth scope.",
		"errors": {
			"publish_status_error": "Cannot mark an event as a draft",
			"venue_id_error": "Invalid venue_id",
			"name_error": "name is required",
			"event_error": "This event appears to contain spam material",
			"announce_error": "Cannot announce a draft event or an event that's already been announced",
			"question_error": "Invalid question value",
			"rsvp_open_time_error": "Cannot set rsvp_open_time without an event time",
			"duration_error": "Invalid event duration",
			"description_error": "description is over 50000 characters",
			"member_error": "Member has gone beyond their limit for posting events",
			"time_error": "Invalid event time",
			"rsvp_close_time_error": "Cannot set rsvp_close_time without an event time",
			"how_to_find_us_error": "how_to_find_us is over 250 characters"
		},
		"group": "events",
		"desc": "Updates an existing Meetup group event's details"
	}, {
		"path": "\/:urlname\/events\/:id",
		"formats": ["json"],
		"http_method": "DELETE",
		"response_notes": "A successful request will result in an HTTP 204 NoContent response",
		"name": "Event Delete",
		"tag": "delete",
		"scopes": ["event_management"],
		"param_notes": "Valid path parameters for __:urlname__ and event __:id__ are required.\n\nOnly organizers and the poster of the Meetup event may delete the event\n\nOAuth authenticated applications should request the [event_management](\/meetup_api\/auth\/#event_management_scope) OAuth scope.",
		"api_version": "3",
		"group": "events",
		"desc": "Removes an event from a groups calendar"
	}, {
		"formats": ["json"],
		"response_notes": "Response a list of group member profile objects encoded as JSON. This list is not paginated",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/hosts",
		"http_method": "GET",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"localized_country_name": "Name of country associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"swagger_type": "Profile",
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Event Hosts",
		"scopes": ["basic"],
		"param_notes": "A valid __:urlname__ and __:event_id__ is required.",
		"group": "hosts",
		"desc": "Returns the list of hosts for a given event"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of comments and their replies.\n\nIf the organizer\nof the Meetup group hosting the event these comments were posted in\nhas chosen to restrict the visibility of their group to members,\nand the authenticated member is not a member of that group, a 403\nForbidden response will be returned.",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response.\nCurrently only \"self\" is supported"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/comments",
		"http_method": "GET",
		"response": {
			"like_count": "The number of likes the comment has",
			"replies": "A list of replies, with the same structure as a comment.\nThis field may be absent in cases where there are no replies",
			"created": "Time the comment was posted in milliseconds since the epoch",
			"member": ["The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member", {
				"actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__flag_spam__ mark this comment as spam\n\n__delete__ delete this comment\n\n__unlike__ unlike this comment\n\n__like__ like this comment",
				"liked": "A boolean indicator of whether or not the authenticated member has liked the comment",
				"notifications": "Indicator of whether or not the authenticated member may\n              receive notifications about related comments. May be one of 'on' or 'off'"
			}],
			"comment": "The comment the member left for the event",
			"id": "Comment id",
			"swagger_type": "EventComment",
			"in_reply_to": "The id of the comment a reply was in relation to"
		},
		"name": "Event Comments List",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for __:urlname__ and __:event_id__\nis required.",
		"group": "comments",
		"desc": "Lists the comments and replies posted in a given Meetup Event.\n\nTo view the list of likes for a comment or reply\nsee the [likes](\/meetup_api\/docs\/:urlname\/events\/:event_id\/comments\/:comment_id\/likes\/)\nendpoint"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will yield a new comment or reply encoded in JSON",
		"params": {
			"*comment": "The text of the comment in at most 1024 characters",
			"notifications": "A boolean value indicating whether or not you wish to recieve future notifications about updates to this comment thread",
			"in_reply_to": "If posting a reply, set this to the numeric identifier of the associated top level comment"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/comments",
		"http_method": "POST",
		"response": {
			"like_count": "The number of likes the comment has",
			"replies": "A list of replies, with the same structure as a comment.\nThis field may be absent in cases where there are no replies",
			"created": "Time the comment was posted in milliseconds since the epoch",
			"member": ["The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member", {
				"actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__flag_spam__ mark this comment as spam\n\n__delete__ delete this comment\n\n__unlike__ unlike this comment\n\n__like__ like this comment",
				"liked": "A boolean indicator of whether or not the authenticated member has liked the comment",
				"notifications": "Indicator of whether or not the authenticated member may\n              receive notifications about related comments. May be one of 'on' or 'off'"
			}],
			"comment": "The comment the member left for the event",
			"id": "Comment id",
			"swagger_type": "EventComment",
			"in_reply_to": "The id of the comment a reply was in relation to"
		},
		"name": "Event comment and reply",
		"tag": "create",
		"scopes": ["group_content_edit"],
		"param_notes": "A path parameter for __:urlname__, __:event_id__,\nand __:comment_id__ is required.\n\nIn addition,\nauthorized oauth applications should request the\n[group_content_edit](\/meetup_api\/auth\/#group_content_edit_scope) permission scope.",
		"errors": {
			"post_error": "Over daily limit of 20",
			"event_error": "Invalid event",
			"in_reply_to_error": "in_reply_to not a valid comment",
			"comment_error": "Comment appeared to contain spam"
		},
		"group": "comments",
		"desc": "Creates new comments and replies to existing comments within an Meetup event"
	}, {
		"path": "\/:urlname\/events\/:event_id\/comments\/:comment_id",
		"formats": ["json"],
		"http_method": "DELETE",
		"response_notes": "A successful request will result in an HTTP 204 NoContent response",
		"name": "Event comment delete",
		"tag": "delete",
		"scopes": ["group_content_edit"],
		"param_notes": "A path parameter for __:urlname__, __:event_id__,\nand __:comment_id__ is required.\n\nThe __:comment_id__ path parameter should be formatted as `comment:{comment_id}`\nfor top level comments or `reply:{reply_id}` for comment replies\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](\/meetup_api\/docs\/:urlname\/events\/:event_id\/comments\/) endpoint\n\nOnly organizers or the member that posted the comment may delete the comment\n\nIn addition,\nauthorized oauth applications should request the\n[group_content_edit](\/meetup_api\/auth\/#group_content_edit_scope) permission scope.",
		"api_version": "3",
		"group": "comments",
		"desc": "Deletes comments posted in events"
	}, {
		"formats": ["json"],
		"response_notes": "Some Meetup group organizers may choose to limit the visibility of their group's content. In these cases,\nsome fields may be omitted from the response if the authenticated member is not\na member of the group hosting a given Event.\n\nRequesting an invalid event will result in a `404` not found error.\n\nRequesting a previously deleted event will result in a `410` Gone error",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:id",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"comment_sample": ["A sampling of recently past event comments.\n               Returned when the 'fields' request parameter\n               value contains 'comment_sample' and the group's\n               'visibility' setting permits it", {
				"like_count": "The number of likes the comment has",
				"replies": "A list of replies, with the same structure as a comment.\nThis field may be absent in cases where there are no replies",
				"created": "Time the comment was posted in milliseconds since the epoch",
				"member": ["The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"self": ["Context for the authenticated member", {
					"actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__flag_spam__ mark this comment as spam\n\n__delete__ delete this comment\n\n__unlike__ unlike this comment\n\n__like__ like this comment",
					"liked": "A boolean indicator of whether or not the authenticated member has liked the comment",
					"notifications": "Indicator of whether or not the authenticated member may\n              receive notifications about related comments. May be one of 'on' or 'off'"
				}],
				"comment": "The comment the member left for the event",
				"id": "Comment id",
				"swagger_type": "EventComment",
				"in_reply_to": "The id of the comment a reply was in relation to"
			}],
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Get Event",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname.\n The :id path element must be a valid alphanumeric Meetup Event identifier",
		"group": "events",
		"desc": "Fetches a Meetup Event by group urlname and event_id"
	}, {
		"formats": ["json"],
		"params": {
			"*amount": "The monetary amount of money the member submitted",
			"quantity": "The number of payments made. Defaults to 1",
			"*member": "Member Id of member who made a payment",
			"paid_on": "The time the payment was made in milliseconds from the epoc. Defaults to now"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:id\/payments",
		"http_method": "POST",
		"examples": "\n Collect a payment in my-group for event 123 by member 456\n\n    curl 'https:\/\/api.meetup.com\/my-group\/events\/123\/payments' \\\n         -d 'key=ORG_API_KEY&member=456&amount=10.00'\n",
		"response": {
			"confirm_code": "Confirmation code for the payment",
			"id": "Unique identifier for the payment"
		},
		"name": "Event Payments",
		"scopes": ["basic"],
		"param_notes": "Only organizer may submit payment information for members and only one payment may be submitted for a member for a given event",
		"group": "events",
		"desc": "Allows organizers of a group to note payments made by members for an event. This is the 'Mark Paid' feature seen in the RSVP listings on event details pages and affects the 'pay_status' response fields in [2\/rsvps](\/meetup_api\/docs\/2\/rsvps\/#response) for paid events"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of photo objects",
		"params": {
			"page": "Number of items to return per-page of results. Defaults to 200",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\"",
			"desc": "Controls directional order or listing. Default false"
		},
		"api_version": "3",
		"path": "\/:urlname\/photo_albums\/:album_id\/photos",
		"http_method": "GET",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Album Photos",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for\n__:urlname__ and __:album_id__ is required",
		"group": "photos",
		"desc": "Lists photos for a given photo album"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will respond with a Photo object\nIf a successful photo upload is immediately accessible, a 201 Created status is returned, otherwise a 202 Accepted status is returned",
		"params": {
			"await": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received.",
			"caption": "Caption for display. Max length 255",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"comment_count\"",
			"*photo": "Photo upload data, encoded as multipart\/form-data. The maximum file size allowed is 10MB"
		},
		"api_version": "3",
		"path": "\/:urlname\/photo_albums\/:album_id\/photos",
		"http_method": "POST",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Album Photo Upload",
		"tag": "upload",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter value for\n__:urlname__ and __:album_id__\nis required\n\nThis method expects an HTTP POST containing a Content-Type of `multipart\/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nA maximum of 500 photos are allowed for a given album.\n\nAuthentication credentials should be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
		"errors": {
			"upload_error": "The process of uploading the photo failed",
			"caption_error": "The provided caption was longer than 255 characters",
			"upload_limit_error": "A member uploaded more photos than allowed for this event",
			"photo_error": "Returned photo was either omitted from the request or was invalid",
			"upload_timeout_error": "A awaited response timed out"
		},
		"group": "photos",
		"desc": "Support for uploading new Album photos"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of event photo objects",
		"params": {
			"page": "Number of items to return per-page of results. Defaults to 200",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\"",
			"desc": "Controls directional order or listing. Default false"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/photos",
		"http_method": "GET",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Event Photos",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for\n__:urlname__ and __:event_id__ is required",
		"group": "photos",
		"desc": "Lists photos for a given event"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of Event Photo objects",
		"params": {
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\""
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/photos\/:photo_id",
		"http_method": "GET",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Event Photo",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter value for\n__:urlname__ and __:event_id__, and __:photo_id__\nis required",
		"group": "photos",
		"desc": "Gets information about a specific photo"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will respond with an Event Photo object\nIf a successful photo upload is immediately accessible, a 201 Created status is returned, otherwise a 202 Accepted status is returned",
		"params": {
			"await": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received.",
			"caption": "Caption for display. Max length 255",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"comment_count\"",
			"*photo": "Photo upload data, encoded as multipart\/form-data. The maximum file size allowed is 10MB"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/photos",
		"http_method": "POST",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Event Photo Upload",
		"tag": "upload",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter value for\n__:urlname__ and __:event_id__\nis required\n\nThis method expects an HTTP POST containing a Content-Type of `multipart\/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nA maximum of 500 photos are allowed for a given event.\n\nAuthentication credentials should be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
		"errors": {
			"upload_error": "The process of uploading the photo failed",
			"caption_error": "The provided caption was longer than 255 characters",
			"upload_limit_error": "A member uploaded more photos than allowed for this event",
			"photo_error": "Returned photo was either omitted from the request or was invalid",
			"upload_timeout_error": "A awaited response timed out"
		},
		"group": "photos",
		"desc": "Support for uploading new Event photos"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of event objects ordered chronologically",
		"params": {
			"lon": "Approximate target longitude",
			"fields": "A comma-delimited list of optional fields to populate in the response",
			"lat": "Approximate target latitude"
		},
		"api_version": "3",
		"path": "\/find\/events",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Find Events",
		"scopes": ["basic"],
		"param_notes": "By default, the events return will be based on the hosting groups near the authenticated member's location.\nTo customize this location, send a valid \"lat\" and \"lon\"\nparameter combination reflecting a desired location.\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).\nResults may page forward but never in reverse",
		"group": "events",
		"desc": "Returns list of upcoming events based on location"
	}, {
		"formats": ["json"],
		"params": {
			"zip": "Zipcode of location to limit search to",
			"country": "A valid two character country code, defaults to US",
			"upcoming_events": "If true, filters text and category based searches on groups that have upcoming events. Defaults to false",
			"lon": "Approximate longitude",
			"filter": "Determines which groups are returned. If 'all' (default), the text and category parameters are applied. If 'friends', groups your friends are in are returned. The value of this parameter may be one of all, friends",
			"fallback_suggestions": "boolean indicator of whether or not to return a list of curated suggestions for groups if we can't find groups matching your criteria",
			"location": "Raw text location query",
			"text": "Raw full text search query",
			"topic_id": "Comma-delimited list of numeric topic ids",
			"radius": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius",
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"category": "Comma-delimited list of numeric category ids",
			"self_groups": "set to 'include' or 'exclude' Meetups the authorized member belongs to; default is 'include'",
			"lat": "Approximate latitude"
		},
		"api_version": "3",
		"path": "\/find\/groups",
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"score": "A numeric value representing how the relevancy of the group in this search context",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Find Groups",
		"orders": {
			"distance": "Order by distance",
			"newest": "Order by date group was founded",
			"most_active": "Order by group with most active members",
			"members": "Order by number of members"
		},
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. If you do not supply some explicit form of location, the results will be based on your registered Meetup profile location, falling back on your IP's geographic location.\n\nIf we can't find find Meetup groups matching your criteria you may optionally request that a small set of suggestions are returned in their place.\nTo do so, send a request parameter named `fallback_suggestions` set to `true`. You can infer that a list of Meetup groups return are fallback suggestions when\nthe `X-Total-Count` pagination response header has a `0` value.\n\nSee the 'filter' parameter for more information controlling the results returned. Ordering does not apply to friend-filtered queries.",
		"group": "groups",
		"desc": "Text, location, category and friend-based group searches"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of photo objects",
		"params": {
			"page": "Number of items to return per-page of results. Defaults to 200",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\"",
			"desc": "Controls directional order or listing. Default false"
		},
		"api_version": "3",
		"path": "\/:urlname\/photos",
		"http_method": "GET",
		"response": {
			"utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
			"comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
			"highres_link": "Link for full sized photo",
			"created": "Time photo was uploaded, in milliseconds since the epoch",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"link": "Link to photo on meetup.com",
			"caption": "Photo caption, if defined",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo",
			"short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
			"swagger_type": "EventPhoto",
			"photo_album": ["Photo album the photo is associated with", {
				"photo_count": "Number of photos uploaded",
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "EventPhotoSummary"
			}],
			"member": ["Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.", {
				"actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
			}],
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"updated": "Time photo was last updated, in milliseconds since the epoch"
		},
		"name": "Album Photos",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for\n__:urlname__ and __:album_id__ is required\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json)",
		"group": "photos",
		"desc": "Lists of all photos uploaded for the group"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of profile objects encoded as JSON",
		"params": {
			"filter": "May be set to 'stepup_eligible' to return only members eligible to step up as organizer",
			"role": "May be set to \"leads\" to filter returned members on the lead team",
			"page": "Number of requested members to return. Defaults to 200",
			"fields": "A comma-delimited list of optional fields to append to the response",
			"desc": "Boolean value controling sort order of results.\nCurrently this parameter is only supported for \"joined\"\nand \"name\" sorted results.\nDefaults to true",
			"order": "Orders results according to definitions listed below. May be one of \"interesting\", \"name\", \"joined\", or \"stepup_recommended\"",
			"status": "A comma-delimited list of member statuses. Valid values include \"active\" or \"pending\".\nDefaults to \"active\". Organizers may request pending"
		},
		"api_version": "3",
		"path": "\/:urlname\/members",
		"http_method": "GET",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"localized_country_name": "Name of country associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"swagger_type": "Profile",
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Group Profile list",
		"orders": {
			"name": "The name of the member",
			"joined": "Time member joined this group",
			"stepup_recommended": "Sorts by likelikhood to step up as organizer",
			"interesting": "Order which may be interesting to the authorized member"
		},
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "A valid __:urlname__ path parameter is required\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).\n\nThis endpoint returns active members by default.\nGroup organizers may request pending members using the 'status' request parameter",
		"group": "profiles",
		"desc": "Get a list of Meetup group members"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of profile objects encoded as JSON",
		"params": {
			"page": "Number of requested members to return. Defaults to 50",
			"fields": "A comma-delimited list of optional fields to append to the response",
			"*query": "The name to search for",
			"order": "Orders results according to definitions listed below. May be one of \"name\" or \"closest_match\""
		},
		"api_version": "3",
		"path": "\/find\/:urlname\/members",
		"http_method": "GET",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"localized_country_name": "Name of country associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"swagger_type": "Profile",
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Group Profile search",
		"orders": {
			"name": "Orded by the name of the member",
			"closest_match": "Ordered by closest match to the provided query"
		},
		"scopes": ["basic"],
		"param_notes": "A valid __:urlname__ path parameter is required\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).",
		"group": "profiles",
		"desc": "Find group member profiles by name.\nMember's who very recently joined or left the group may not be immediately searchable"
	}, {
		"formats": ["json"],
		"response_notes": "A successful response will include a\nrepresentation of the group as a JSON object",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response"
		},
		"api_version": "3",
		"path": "\/:urlname",
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"event_sample": ["A small sampling of recent past events with photos.\nReturned when the \"fields\" request parameter\nvalue contains \"event_sample\"\n and the group's \"visibility\" setting permits it", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch"
			}],
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"member_sample": ["A small sampling of active members. Returned when the\n'fields' request parameter\nvalue contains 'member_sample'\nand the group's 'visibility' setting permits it", {
				"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
					"month": "Numeric month member was born. May be absent if not defined",
					"year": "Year member was born",
					"day": "Numeric day member was born. May be absent if not defined"
				}],
				"country": "Country code associated with Member's location",
				"localized_country_name": "Name of country associated with Member's location",
				"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
				"city": "City associated with Member's location",
				"joined": "Time member joined, represented as milliseconds since the epoch",
				"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
				"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
					"groups": "may be 'hidden' or 'visible",
					"bio": "may be 'hidden' or 'visible'",
					"topics": "may be 'hidden' or 'visible'",
					"swagger_type": "MemberPrivacy",
					"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
				}],
				"lon": "Geographic longitude associated with Member's location",
				"swagger_type": "Profile",
				"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
					"identifier": "A unique string identifier",
					"url": "A url for this identity. May be the same as identifier in some cases",
					"swagger_type": "SocialNetwork"
				}],
				"name": "Display name for the member",
				"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
					"common": ["Information the authenticated member has in common with this member", {
						"groups": ["List of common groups", {
							"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
							"photo_gradient": ["Color combination used generate group duotone", {
								"dark_color": "Dark color in hexidecimal format",
								"id": "Unique numeric identifier",
								"composite_color": "Composite color in hexidecimal format",
								"light_color": "Light color in hexidecimal format",
								"swagger_type": "Duotone"
							}],
							"name": "Name of the group",
							"key_photo": ["Group primary photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"id": "Numeric group ID",
							"urlname": "Urlname used to identify the group on meetup.com",
							"group_photo": ["Group photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"swagger_type": "GroupSummary",
							"who": "What the group calls its members"
						}]
					}],
					"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
					"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
					"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
					"swagger_type": "MemberSelf"
				}],
				"state": "State associated with Member's location, where available",
				"id": "Unique numeric identifier for the member",
				"lat": "Geographic latitude associated with Member's location",
				"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
			}],
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Get Group",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Only the path parameter :urlname is required",
		"group": "groups",
		"desc": "Fetches a Meetup group by urlname"
	}, {
		"formats": ["json"],
		"response_notes": "A successful response will include a representation of the updated group as a JSON object",
		"params": {
			"zip": "The ZIP code of the city",
			"country": "The ISO_3166-1 country code for the country which contains the city",
			"list_mode": "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list",
			"dryrun": "Boolean parameter that will cause this endpoint to apply all validation rules without actually saving changes in which case the response will only reflect the group's current attributes",
			"ga_code": "Google Analytics code for group",
			"remove_topics": "Comma-delimited list of topic ids to disassociate with group",
			"visibility": "Restricts group visibility for non-members. May be one of 'public', 'public_limited' or 'members'. Note, the 'members' option is only available to groups that already have 'members' visibility",
			"question_{index}": "A new profile question defined in the order of index provided in the request parameter name",
			"key_photo": "Group's primary photo. Must be ID of an existing album photo",
			"photo_req": "Indicates that a member must provide a photo before joining. Expects true or false values",
			"description": "Summary of what the Meetup group is about in simple HTML format",
			"questions_req": "Indicates that provided questions are required before joining. Expects true or false values",
			"welcome_message": "Message sent to members after they join. Can be at most 2000 characters",
			"join_mode": "Controls how member's are let into the group. May be one of 'open' meaning any Meetup member my join, 'closed' meaning group is not currently accepting new members, or 'approval' meaning members must be approved by an organizer. Note, the 'closed' options is only available to groups that already have a 'closed' join_mode",
			"list_addr": "Mailing list prefix. By default this is the group's urlname.",
			"add_topics": "Comma-delimited list of topic ids to associate with group",
			"{service}_uri": "A URI for a social network service. Service must be one of facebook, flickr, linkedin, other, tumblr, twitter",
			"name": "Display name of the group. Can be at most 60 characters",
			"question_edit_{id}": "Edits a current profile question identified by an id in the parameter name. The index updated index should also be encoded in the parameter name. To delete a question, set this to an empty string. Groups that require profile questions must have at least one question",
			"urlname": "Name used for the groups web address on meetup.com. Must be between 6 and 60 characters",
			"who": "What members of the group will be called. Can be at most 32 characters"
		},
		"api_version": "3",
		"path": "\/:urlname",
		"http_method": "POST",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Group Edit",
		"tag": "edit",
		"scopes": ["group_edit"],
		"param_notes": "All parameters are optional.",
		"group": "groups",
		"desc": "Allows organizers to edit their Meetup group information. To change group topics, see the [add](\/meetup_api\/docs\/:urlname\/topics\/#add) and [remove](\/meetup_api\/docs\/:urlname\/topics\/#remove) topics endpoints. To change group photo use the [Group photo upload](\/meetup_api\/docs\/2\/group_photo\/#create) endpoint. OAuth authenticated requests require an additional [group_edit](\/meetup_api\/auth\/#oauth2-scopes) permission."
	}, {
		"formats": ["json"],
		"response_notes": "A successful response will include a representation of the group topics were added to",
		"params": {
			"*topic_id": "Comma-delimited list of topic ids to associate with group"
		},
		"api_version": "3",
		"path": "\/:urlname\/topics",
		"http_method": "POST",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Group Topics Add",
		"tag": "add",
		"scopes": ["group_edit"],
		"param_notes": "A group can have at most 15 topics",
		"group": "groups",
		"desc": "Associates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional [group_edit](\/meetup_api\/auth\/#oauth2-scopes) permission."
	}, {
		"formats": ["json"],
		"response_notes": "A successful response will include a representation of the group topics were removed from",
		"params": {
			"*topic_id": "Comma-delimited list of topic ids to disassociate with group"
		},
		"api_version": "3",
		"path": "\/:urlname\/topics",
		"http_method": "DELETE",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Group Topics Remove",
		"tag": "remove",
		"scopes": ["group_edit"],
		"param_notes": "Groups must have at least one topic. Attempts to remove all topics will result in a failed request",
		"group": "groups",
		"desc": "Disassociates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional [group_edit](\/meetup_api\/auth\/#oauth2-scopes) permission."
	}, {
		"formats": ["json"],
		"response_notes": "The order the results are returned in is based on the request parameters provided.\nBy default, the nearest results based on \"lat\" and\n\"lon\" provided will be returned first,\notherwise location with the highest member density will be returned first.",
		"params": {
			"lon": "Search for locations based on location longitude.\nMust be provided with \"lat\"",
			"page": "The desired number of locations to return in a single set of results.\nDefaults to 200",
			"offset": "The current offset in the paginated set, represented as an incrementing value",
			"lat": "Search for locations based on location latitude.\nMust be provided with \"lon\"",
			"query": "Search for locations based on city name or zip code"
		},
		"api_version": "3",
		"path": "\/find\/locations",
		"http_method": "GET",
		"response": {
			"zip": "The location's zip code. For locations in countries without zip codes, a placeholder will be returned",
			"country": "Two character country code",
			"localized_country_name": "Localized name of country based on request's language information",
			"city": "Name of city",
			"lon": "Approximate location longitude",
			"state": "Enclosing location state, if the location's country declares one",
			"name_string": "The full name of the location as preformatted string",
			"swagger_type": "Location",
			"lat": "Approximate location latitude"
		},
		"name": "Find locations",
		"scopes": ["basic"],
		"param_notes": "This endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).",
		"group": "geo",
		"desc": "Provides a query interface for finding known locations"
	}, {
		"formats": ["json"],
		"params": {
			"fields": "A comma-delimited list of optional fields names which may be appended to the response",
			"page": "Number of results to return in a page. Defaults to 200"
		},
		"api_version": "3",
		"path": "\/self\/calendar",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Member Calendar",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional.\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json)",
		"group": "events",
		"desc": "Get a listing of all upcoming Meetup events for the authenticated member"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of group objects encoded as JSON",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response",
			"page": "Number of groups to return in a single page of results.\nBy default, this is 200"
		},
		"api_version": "3",
		"path": "\/self\/groups",
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"event_sample": ["A small sampling of upcoming events.\nReturned when the \"fields\" request parameter\nvalue contains \"event_sample\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \n\"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of event",
				"self": ["Represents details particular to the authorized user, only present\nif requested and authenticated member is a member of the hosting group,\nreturned when \"fields\" request parameter value\nincludes \"self\"", {
					"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
					"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
					"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
					"rsvp": ["Member's RSVP, if any", {
						"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
							"question": "Question text",
							"answer": "Answer text for question",
							"updated": "The last time this answer was updated",
							"question_id": "Unique number identifier for question",
							"swagger_type": "SurveyQuestionAnswer"
						}],
						"guests": "Number of guests the RSVP'd member will be bringing",
						"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
					}],
					"swagger_type": "EventSelf"
				}],
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Member groups",
		"scopes": ["basic"],
		"param_notes": "This endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).",
		"group": "groups",
		"desc": "Lists the authenticated member's groups in the order of leadership,\nnext upcoming event, then alphabetical order by name"
	}, {
		"path": "\/:urlname\/events\/:event_id\/comments\/:comment_id\/likes",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"member": ["Member associated with the like", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"updated": "Time like was updated, in milliseconds since the epoch",
			"swagger_type": "MemberLike",
			"created": "Time of like, in milliseconds since the epoch"
		},
		"response_notes": "Returns a list of likes",
		"name": "Event Comment and Reply Likes",
		"scopes": ["basic"],
		"param_notes": "A path parameter for __:urlname__,  __:event_id__,\nand __:comment_id__ is required\n\nThe __:comment_id__ should be formatted as `comment:{comment_id}` for top level comments\nor `reply:{reply_id}` for comment replies.\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](\/meetup_api\/docs\/:urlname\/events\/:event_id\/comments\/) endpoint",
		"api_version": "3",
		"group": "comments",
		"desc": "Returns lists of likes for an event comment or reply"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will respond with a Photo object\nIf a successful photo upload is immediately accessible, a 201 Created status is returned, otherwise a 202 Accepted status is returned",
		"params": {
			"await": "Optional boolean parameter that, when set to true, will defer a request's a response until confirmation that photo is immediately displayable is received.",
			"sync_photo": "Optional boolean parameter that, when set to true, will sync all of the group profile photos for the member with the provided photo_id",
			"*photo": "Photo upload data, encoded as a multipart\/form-data file. The maximum file size allowed is 10MB"
		},
		"api_version": "3",
		"path": "\/members\/:member_id\/photos",
		"http_method": "POST",
		"response": {
			"highres_link": "Link for full sized photo",
			"base_url": "A base url that can be use to construct a photo url from its components",
			"id": "Numeric photo ID",
			"photo_link": "Link for standard sized photo",
			"type": "Type of photo. One of \"event\" or \"member\"",
			"thumb_link": "Link for thumbnail sized photo"
		},
		"name": "Member Photo Upload",
		"tag": "post",
		"scopes": ["profile_edit"],
		"param_notes": "A valid path parameter value for __:member_id__ is required. This value must match the authenticated\nmember's id or \"self\".\n\nSince this method can change properties of your member profile, OAuth authenticated applications must\nrequest the [profile_edit](\/meetup_api\/auth\/#profile_edit_scope)\npermission scope.\n\nThis method expects an HTTP POST containing a body with Content-Type of `multipart\/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nAuthentication credentials must be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
		"errors": {
			"upload_error": "The process of uploading the photo failed",
			"photo_error": "Returned photo was either omitted from the request or was invalid",
			"upload_timeout_error": "An awaited response timed out"
		},
		"group": "photos",
		"desc": "Support for uploading new Member photos"
	}, {
		"formats": ["json"],
		"params": {
			"country": "String: Country",
			"past_rsvps_min": "Positive Integer: Minumum range of the total number of past RSVPs",
			"past_events_min": "Positive Integer: Minumum range of the number of the past events held",
			"member_count_max": "Positive Integer: Maximum range of the number of members",
			"upcoming_events_min": "Positive Integer: Minumum range of the number of the upcoming events",
			"lon": "Float: Longitude",
			"last_event_min": "Milliseconds since epoch: Minumum range of the date that the last meetup happened",
			"repeat_rsvpers_min": "Positive Integer: Minumum range of the average number of repeat rsvpers",
			"average_age_min": "Positive Integer: Minumum range of the average age of the members",
			"last_event_max": "Milliseconds since epoch: Maximum range of the date that the last meetup happened",
			"radius": "String: `global`, `smart`, or search radius in Float",
			"lat": "Float: Latitude",
			"founded_date_min": "Milliseconds since epoch: Minumum range of the founded dates of the groups",
			"order": "List of String: attributes to sort on",
			"zip": "String: Zip code",
			"inactive_within_days": "Positive Integer: including only those groups that did not have event in the last specified days",
			"offset": "Positive Integer: the page offset",
			"topics": "List of Integers: the ids of topic of the group",
			"upcoming_events_max": "Positive Integer: Maximum range of the number of the upcoming events",
			"average_age_max": "Positive Integer: Maximum range of the average age of the members",
			"pro_join_date_max": "Milliseconds since epoch: Maximum range of the dates the groups joined Pro organization",
			"next_event_min": "Milliseconds since epoch: Minumum range of the date that the next meetup is scheduled",
			"past_rsvps_max": "Positive Integer: Maximum range of the total number of past RSVPs",
			"active_within_days": "Positive Integer: including only those groups that had event in the last specified days",
			"rsvps_per_event_min": "Positive Integer: Minumum range of the average number of RSVPs per event",
			"founded_date_max": "Milliseconds since epoch: Maximum range of the founded dates of the groups",
			"member_count_min": "Positive Integer: Minimum range of the number of members",
			"past_events_max": "Positive Integer: Maximum range of the number of the past events held",
			"name": "String: Name of the group looking for",
			"next_event_max": "Milliseconds since epoch: Maximum range of the date that the next meetup is scheduled",
			"repeat_rsvpers_max": "Positive Integer: Maximum range of the average number of repeat rsvpers",
			"location": "String: Raw location",
			"page": "Positive Integer: the size of page window",
			"pro_join_date_min": "Milliseconds since epoch: Minumum range of the dates the groups joined Pro organization",
			"rsvps_per_event_max": "Positive Integer: Maximum range of the average number of RSVPs per event",
			"category": "List of Integers: the ids of the category of the group",
			"desc": "List of Boolean: whether to sort ascending or decending on each attributes in `order`"
		},
		"api_version": "3",
		"path": "\/pro\/:urlname\/groups",
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"gender_female": "Proportion of members who identify as female",
			"city": "City of the group",
			"past_events": "Number of the past meetup events",
			"description": "Description of the group",
			"past_rsvps": "Number of total RSVPs in the past",
			"lon": "Longitude",
			"founded_date": "Date when the group was founded",
			"pro_join_date": "Date when the group joined the Pro organization",
			"gender_other": "Proportion of members who identify as gender other than male or female",
			"state": "State of the group, if in US or Canada",
			"id": "Id of the group",
			"urlname": "Urlname used to identify the group on meetup.com",
			"member_count": "Number of the group members",
			"average_age": "Average age of the group members",
			"lat": "Latitude",
			"next_event": "Date of the next meetup event, not present if the group has no event scheduled",
			"repeat_rsvpers": "Number of members who RSVPed to a past event and RSVPs to a new event",
			"topics": ["Topics that are assigned to the group", {
				"name": "Name of the topic",
				"urlkey": "Urlkey used to identify the topic on meetup.com",
				"id": "Id of the topic",
				"lang": "Locale of the topic"
			}],
			"gender_unknown": "Proportion of members whose gender is unknown",
			"gender_male": "Proportion of members who identify as male",
			"rsvps_per_event": "Average number of RSVPs per event",
			"last_event": "Date of the last meetup event, not present if the group never had a meetup event",
			"name": "Name of the group",
			"category": ["Categories that the group belongs to", {
				"name": "Name of the category",
				"id": "Id of the category",
				"shortname": "Abbreviated name of the category"
			}]
		},
		"name": "Search Pro Groups",
		"orders": {
			"repeat_rsvpers": "By the number of members RSVPing subsequent events",
			"gender_female": "By the proportion of people who identify themselves as female",
			"past_events": "By the number of past meetups held",
			"past_rsvps": "By the total number of past RSVPs",
			"gender_unknown": "By the proportion of people whose gender info is unknown",
			"gender_male": "By the proportion of people who identify themselves as male",
			"founded_date": "By the founded date of the group",
			"pro_join_date": "By the date the group joined the Pro org",
			"rsvps_per_event": "By the average number of RSVPs per event",
			"last_event": "By the date of the last event happened",
			"gender_other": "By the proportion of people who identify themselves as gender other than female or male",
			"member_count": "By the number of members",
			"average_age": "By the average age of members",
			"next_event": "By the date of the next event scheduled"
		},
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. `order` and `desc` can take multiple items in a comma-delimited list.",
		"group": "pro",
		"desc": "Name and statistics range search for the meetup groups belonging to Pro organization."
	}, {
		"formats": ["json"],
		"params": {
			"zip": "String: Zip code",
			"country": "String: Country",
			"events_attended_max": "Positive Integer: Maximum number of attended events",
			"offset": "Positive Integer: the page offset",
			"chapters": "List of Integers: The chapters which the member belongs to",
			"is_organizer": "Boolean: To limit to only organizers or non-organizers",
			"lon": "Float: Longitude",
			"member_name": "String: Name of the member",
			"active_within_days": "Positive Integer: The range of date from the past until today, for the recent activity",
			"join_time_min": "Milliseconds since epoch: The oldest time limit for member join",
			"email_received": "Integers: The id of a previous emails that the member received",
			"events_attended_min": "Positive Integer: Minimum number of attended events",
			"location": "String: Raw location",
			"page": "Positive Integer: the size of page window",
			"radius": "String: `global`, `smart`, or search radius in Float",
			"join_time_max": "Milliseconds since epoch: The latest time limit for member join",
			"lat": "Float: Latitude",
			"desc": "Boolean: whether to sort ascending or decending",
			"order": "String: attribute to sort on"
		},
		"api_version": "3",
		"path": "\/pro\/:urlname\/members",
		"http_method": "GET",
		"response": {
			"member_id": "Id of the member",
			"photo_thumb_url": "Url of the photo thumbnail of the member",
			"country": "Country of the member",
			"city": "City of the member",
			"chapters": ["Pro organization groups that the member belongs to", {
				"name": "Name of the group",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com"
			}],
			"is_organizer": "Organizer status of the member",
			"lon": "Longitude",
			"member_name": "Name of the member",
			"join_time": "The time when the member joined Meetup",
			"last_access_time": "The time when the last activity occured",
			"events_attended": "The number of attended events",
			"state": "State of the member, if in US or Canada",
			"lat": "Latitude"
		},
		"name": "Search Pro Members",
		"orders": {
			"is_organizer": "By whether the member is an organizer or not",
			"member_name": "By the member name",
			"join_time": "By the time when the member joined Meetup",
			"last_access_time": "By the time of most recent visit",
			"events_attended": "By the number of events attended"
		},
		"scopes": ["basic"],
		"param_notes": "All parameters are optional.",
		"group": "pro",
		"desc": "Name, location, and time based search for the members of the meetups belonging to Pro organization."
	}, {
		"formats": ["json"],
		"params": {
			"country": "String: two-letter country code of the redeemed chapters",
			"chapter_name": "String: partial or full name of the redeemed chapter",
			"ticket_key": "String: full matching string of an issued ticket key",
			"chapters": "Comma delimited positive integers: ids of redeemed chapters",
			"status": "Comma delimited strings: ticket status, among the following: inactive, available, claimed, redeemed"
		},
		"api_version": "3",
		"path": "\/pro\/:urlname\/tickets",
		"http_method": "GET",
		"response": {
			"chapter": ["Pro organization chapter that redeemed the ticket, if the ticket is redeemed", {
				"name": "Name of the chapter",
				"country": "Country of the Chapter",
				"id": "Id of the chapter",
				"urlname": "Urlname used to identify the chapter on meetup.com"
			}],
			"created": "Ticket creation time",
			"member": ["Member who claimed the ticket, if the ticket is claimed", {
				"name": "Name of the member",
				"id": "Id of the member"
			}],
			"ticket_key": "Ticket key",
			"updated": "Last update time of ticket",
			"status": "The status of ticket, one of the following: inactive, available, claimed, redeemed"
		},
		"name": "Search Issued Pro Tickets",
		"orders": {
			"chapter_name": "By the name of the chapter that redeemed the ticket",
			"updated": "By the update timestamp of ticket",
			"created": "By the creation timestamp of ticket",
			"status": "By the redeemed status of the ticket"
		},
		"scopes": ["basic"],
		"param_notes": "All parameters are optional.",
		"group": "pro",
		"desc": "Redeemed chapter, redeemed member, status, and timestamp for tickets belonging to Pro organization."
	}, {
		"formats": ["json"],
		"response_notes": "The response includes a JSON-encoded list of current notification items.",
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output."
		},
		"api_version": "3",
		"path": "\/notifications",
		"http_method": "GET",
		"response": {
			"read": "True or False indicating whether a notification has been read",
			"kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
			"link": "Link to resource notification was triggered by",
			"photo": ["A photo related to the notifications. Potentially absent", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"setting": ["The setting that controls the member's preference for receiving sendings of this kind of notification", {
				"email": ["A push setting if available", {
					"name": "display code"
				}],
				"push": ["An email setting if available", {
					"name": "display code"
				}]
			}],
			"target": ["kind specific properties which may be used to navigate back to the source of the notification", {
				"event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
				"group_id": "If needed, the numeric ID of the group which relates to this notification",
				"comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
				"comment_id": "If needed, the numeric ID of the comment which relates to this notification",
				"type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location",
				"group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
			}],
			"important": "True or False indicating a notification's level of importance",
			"photo_type": "Type of photo, event or member",
			"self": ["Information pertaining the authorized member associated with this notification", {
				"action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
			}],
			"text": "Notification content as text",
			"id": "A unique identifier for a notification",
			"category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
			"updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
		},
		"name": "Notifications",
		"scopes": ["basic"],
		"param_notes": "No parameters are required",
		"group": "notifications",
		"desc": "Returns all recent Meetup notifications for the authorized member. To mark notifications read use [\/notifications\/read](\/meetup_api\/docs\/notifications\/read\/) endpoint. To get the authenticated Member's current unread count, request it in an [HTTP header](\/meetup_api\/docs\/#meta-headers)."
	}, {
		"path": "\/notifications\/read",
		"formats": ["json"],
		"http_method": "POST",
		"response": {
			"read": "True or False indicating whether a notification has been read",
			"kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
			"link": "Link to resource notification was triggered by",
			"photo": ["A photo related to the notifications. Potentially absent", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"setting": ["The setting that controls the member's preference for receiving sendings of this kind of notification", {
				"email": ["A push setting if available", {
					"name": "display code"
				}],
				"push": ["An email setting if available", {
					"name": "display code"
				}]
			}],
			"target": ["kind specific properties which may be used to navigate back to the source of the notification", {
				"event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
				"group_id": "If needed, the numeric ID of the group which relates to this notification",
				"comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
				"comment_id": "If needed, the numeric ID of the comment which relates to this notification",
				"type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location",
				"group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
			}],
			"important": "True or False indicating a notification's level of importance",
			"photo_type": "Type of photo, event or member",
			"self": ["Information pertaining the authorized member associated with this notification", {
				"action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
			}],
			"text": "Notification content as text",
			"id": "A unique identifier for a notification",
			"category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
			"updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
		},
		"response_notes": "The response includes a JSON-encoded list of current notification items",
		"name": "Read Notifications",
		"scopes": ["basic"],
		"params": {
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"since_id": "The id of the newest notification item, typically the first in the list returned by the notifications endpoint"
		},
		"api_version": "3",
		"group": "notifications",
		"desc": "Marks groups of [notifications](\/meetup_api\/docs\/notifications\/) as read."
	}, {
		"formats": ["json"],
		"response_notes": "Returns a photo album object",
		"params": {
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"short_link\""
		},
		"api_version": "3",
		"path": "\/:urlname\/photo_albums\/:album_id",
		"http_method": "GET",
		"response": {
			"photo_sample": ["A small collection of photos uploaded for this event", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"created": "Time photo album was created, in milliseconds since the epoch",
			"link": "Link to photo album on meetup.com",
			"title": "Album title",
			"short_link": "Shortened link to photo album on meetup.com.\nReturned when 'short_link' is present\nin the 'fields' request parameter",
			"swagger_type": "Photo Album Full",
			"photo_count": "Number of photos uploaded",
			"self": ["Contextual information related to the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter", {
				"actions": "List of actions the member may perform.\n\nCurrently only \"upload_photo\" may be expected",
				"swagger_type": "PhotoAlbumSelf"
			}],
			"id": "Unique numeric identifier for photo album",
			"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"album_photo": ["Cover photo for this photo album", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"updated": "Time photo album was last updated in milliseconds since the epoch",
			"group": ["Group associated with this photo album", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"photo_gradient": ["Color combination used generate group duotone", {
					"dark_color": "Dark color in hexidecimal format",
					"id": "Unique numeric identifier",
					"composite_color": "Composite color in hexidecimal format",
					"light_color": "Light color in hexidecimal format",
					"swagger_type": "Duotone"
				}],
				"name": "Name of the group",
				"key_photo": ["Group primary photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Numeric group ID",
				"urlname": "Urlname used to identify the group on meetup.com",
				"group_photo": ["Group photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"swagger_type": "GroupSummary",
				"who": "What the group calls its members"
			}]
		},
		"name": "Photo Album",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter value for\n__:urlname__ and __:album_id__ is required",
		"group": "photos",
		"desc": "Gets information about a specific photo album"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of album objects",
		"params": {
			"page": "Number of albums to return per page of results",
			"offset": "Incrementing number used for pagination offsets",
			"fields": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"short_link\""
		},
		"api_version": "3",
		"path": "\/:urlname\/photo_albums",
		"http_method": "GET",
		"response": {
			"photo_sample": ["A small collection of photos uploaded for this event", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"created": "Time photo album was created, in milliseconds since the epoch",
			"link": "Link to photo album on meetup.com",
			"title": "Album title",
			"short_link": "Shortened link to photo album on meetup.com.\nReturned when 'short_link' is present\nin the 'fields' request parameter",
			"swagger_type": "Photo Album Full",
			"photo_count": "Number of photos uploaded",
			"self": ["Contextual information related to the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter", {
				"actions": "List of actions the member may perform.\n\nCurrently only \"upload_photo\" may be expected",
				"swagger_type": "PhotoAlbumSelf"
			}],
			"id": "Unique numeric identifier for photo album",
			"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"album_photo": ["Cover photo for this photo album", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"updated": "Time photo album was last updated in milliseconds since the epoch",
			"group": ["Group associated with this photo album", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"photo_gradient": ["Color combination used generate group duotone", {
					"dark_color": "Dark color in hexidecimal format",
					"id": "Unique numeric identifier",
					"composite_color": "Composite color in hexidecimal format",
					"light_color": "Light color in hexidecimal format",
					"swagger_type": "Duotone"
				}],
				"name": "Name of the group",
				"key_photo": ["Group primary photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Numeric group ID",
				"urlname": "Urlname used to identify the group on meetup.com",
				"group_photo": ["Group photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"swagger_type": "GroupSummary",
				"who": "What the group calls its members"
			}]
		},
		"name": "Photo Album List",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter value for\n__:urlname__ is required\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).",
		"group": "photos",
		"desc": "Gets a list a group photo albums in ascending order based on the time they were created"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a single Member Profile object",
		"params": {
			"fields": "A comma-delimited string of optional response field names.\nThis may include groups, privacy, and topics"
		},
		"api_version": "3",
		"path": "\/members\/:member_id",
		"http_method": "GET",
		"examples": " Fetch your own profile with all your groups\n\n    curl -H \"Authorization: bearer {ACCESS_TOKEN}\" \\\n        \"https:\/\/api.meetup.com\/members\/self?fields=groups\"\n          ",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"localized_country_name": "Name of country associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"topics": ["List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"memberships": ["Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.", {
				"member": ["Memberships where member holds a basic membership", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"organizer": ["Memberships where member is on the group's lead team", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}]
			}],
			"swagger_type": "Profile",
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"stats": ["High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'", {
				"groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
				"rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
				"topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
			}],
			"last_event": ["Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"next_event": ["Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Get Member Profile",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id",
		"group": "profiles",
		"desc": "Gets Member Profiles.\nFor Group Profiles, see [this endpoint](\/meetup_api\/docs\/:urlname\/members\/:member_id)"
	}, {
		"formats": ["json"],
		"response_notes": "A successful HTTP PATCH request will return an\nupdated representation of the Member Profile",
		"params": {
			"birthday": "Member's date or year of birth.\nMay be specified in one of the following formats.\nyyyy, mmddyyy or alternatively -1, which indicates that birthday\ndata should be cleared",
			"zip": "A valid zip code to associate with the member.\nThis parameter must be accompanied by \"lat\" and \"lon\"",
			"remove_topics": "Comma-delimited list of topic ids to remove from members interest list",
			"photo_id": "A valid photo id to this member has previously updated to use as profile photo",
			"gender": "Member's gender.\nValue may be one of \"female\", \"male\", \"none\", or \"other\"",
			"topics_privacy": "Preference for hiding or showing member interests to others.\nValue may be one of \"hidden\" or \"visible\"",
			"bio": "Member bio of up to 250 characters",
			"facebook_privacy": "Preference for hiding showing information member's facebook connection.\nValue may be one of \"hidden\" or \"visible\"",
			"lon": "A valid longitude to resolve the closest location to associate with the member\nThis parameter must be accompanied by \"lat\" and \"zip\"",
			"groups_privacy": "Preference for hiding or showing group memberships to others.\nValue may be one of \"hidden\" or \"visible\"",
			"add_topics": "Comma-delimited list of topic ids to add to members interest list",
			"sync_photo": "When set to true, this parameter will sync all the group\nprofile photos for the member with the provided photo_id",
			"name": "Member name",
			"bio_privacy": "Preference for hiding or showing member bio to others.\nValue may be one of \"hidden\" or \"visible\"",
			"lang": "Member's language preference.\nValue may be one of \"de-DE\", \"en-AU\", \"en-US\", \"es\", \"es-ES\", \"fr-FR\", \"it-IT\", \"ja-JP\", \"ko-KR\", \"nl-NL\", or \"pt-BR\"",
			"lat": "A valid latitude to resolve the closest location to associate with the member.\nThis parameter must be accompanied by \"lon\" and \"zip\"",
			"city_id": "Valid Meetup city identifier that indicates the city in which the member resides",
			"messaging_pref": "Preference for which members may contact you via the Meetup platform.\nValue may be one of \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"api_version": "3",
		"path": "\/members\/:member_id",
		"http_method": "PATCH",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"localized_country_name": "Name of country associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"topics": ["List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"memberships": ["Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.", {
				"member": ["Memberships where member holds a basic membership", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"organizer": ["Memberships where member is on the group's lead team", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}]
			}],
			"swagger_type": "Profile",
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"stats": ["High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'", {
				"groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
				"rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
				"topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
			}],
			"last_event": ["Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"next_event": ["Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Member Profile Edit",
		"tag": "edit",
		"scopes": ["profile_edit"],
		"param_notes": "All parameters are optional.\n\nOAuth authenticated applications should\nrequest the [profile_edit](\/meetup_api\/auth\/#profile_edit_scope)\npermission scope\n\nSome Meetup group organizers may define a set of profile questions\nthey'd like their members to answer. You can obtain that question\nlist using the [Get Group](\/meetup_api\/docs\/:urlname\/#get) by sending\n a \"fields\" request parameter containing\n\"join_info\"\n\nThe authenticated member may set their currently location by either supplying a valid\n\"city_id\" or a valid \"lat\", \"lon\", or \"zip\".\nYou can resolve a coordinate-based \"zip\" by using the\n[Find locations](\/meetup_api\/docs\/find\/locations) API",
		"group": "profiles"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will return a Profile with embedded group_profile.\nThe group-specific information provided in this request should be visible there.\n\nNote that successful attempts to join groups that require organizer approval\nwill require additional action taken by the organizer to complete your membership.\nYou can inspect the group_profile.status field to know if you are active or pending.\nIf the organizer declines your request they may optionally choose to ban you from future attempts to join",
		"api_version": "3",
		"path": "\/:urlname\/members",
		"http_method": "POST",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"memberships": ["Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.", {
				"member": ["Memberships where member holds a basic membership", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"organizer": ["Memberships where member is on the group's lead team", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}]
			}],
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"stats": ["High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'", {
				"groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
				"rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
				"topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"next_event": ["Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"localized_country_name": "Name of country associated with Member's location",
			"topics": ["List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"swagger_type": "Profile",
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"last_event": ["Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Group Join",
		"tag": "create",
		"scopes": ["group_join"],
		"param_notes": "This method requires https and an HTTP POST. All required parameters must be supplied.\nAn intro and answers to group profile questions may be required based for the group the member is joining.\n\nOAuth authenticated applications should\nrequest the [group_join](\/meetup_api\/auth\/#group_join_scope)\npermission scope\n\nTo find out if a group requires an intro or answers to questions, query for the group\nthrough one of the groups methods providing setting the fields parameter to join_info and\ninspecting the join_info in the results.\nAnswers to the questions must be named using the convention answer_{question_id}.",
		"errors": {
			"join_closed_error": "The organizer of this group has turned off new member joins",
			"member_email": "The email associated with this account is invalid",
			"member_unapproved": "Your membership approval was declined",
			"membership_error": "Authenticated member was already an active member of this group",
			"intro_error": "Intro was required but absent or appeared to contain spam",
			"unjoinable_group": "This group is no longer joinable",
			"join_error": "A catch all join error for any additional error states",
			"photo_error": "Photo was required but absent",
			"missing_dues_error": "Member did not meet group membership dues requirements",
			"member_banned": "You have been banned from this group",
			"member_removed": "You have been removed from this group",
			"pending_payment": "Your current membership is pending a payment"
		},
		"group": "profiles",
		"desc": "This method allows an authenticated member to join a group by creating a profile"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a single Member Profile object with embedded group Profile information.\nIf the group's content is restricted to groups members and the authenticated member\nis not a member of the group, a 403 Forbidden error response will be returned.",
		"params": {
			"fields": "A comma-delimited string of optional response field names.\nThis may include birthday, gender, groups, privacy, self and topics"
		},
		"api_version": "3",
		"path": "\/:urlname\/members\/:member_id",
		"http_method": "GET",
		"examples": "Fetch your own group profile\n\n    curl -H \"Authorization: bearer {ACCESS_TOKEN}\" \\\n      \"https:\/\/meetup.com\/meetup-api-testing\/members\/self\"\n         ",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"memberships": ["Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.", {
				"member": ["Memberships where member holds a basic membership", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"organizer": ["Memberships where member is on the group's lead team", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}]
			}],
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"stats": ["High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'", {
				"groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
				"rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
				"topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"next_event": ["Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"localized_country_name": "Name of country associated with Member's location",
			"topics": ["List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"swagger_type": "Profile",
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"last_event": ["Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Get Group Member Profile",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id",
		"group": "profiles",
		"desc": "Gets Group Profiles.\nFor Member Profiles, see [this endpoint](\/meetup_api\/docs\/members\/:member_id)"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a single Member Profile object with embedded group profile information.\nIf a request is made that violates one of the field restrictions mentioned above,\na 403 Forbidden error response will be returned.",
		"params": {
			"add_role": "Allows those with permission to assign one of the following roles:\n\"assistant_organizer\", \"coorganizer\", or \"event_organizer\"",
			"photo_id": "Numeric id of the photo to use for this profile. Send a value of 0 to unset the current photo",
			"intro": "Provides a Member an opportunity to tell the group about themselves,\nin at most 255 characters",
			"fields": "A comma-delimited string of optional response field names.\nThis may include birthday, gender, groups, privacy, self and topics",
			"title": "An organizer-defined title,\nin at most 255 characters",
			"remove_role": "Allows those with permission to remove one of the following roles:\n\"assistant_organizer\", \"coorganizer\", or \"event_organizer\"",
			"answer_{qid}": "Answers to questions from group's API join_info question fields.\n\nThe name of these parameters must contain a suffix of _ + the numeric\nquestion id from the Meetup group's join info question list\n\nAnswers may not be longer than 1000\ncharacters in length"
		},
		"api_version": "3",
		"path": "\/:urlname\/members\/:member_id",
		"http_method": "PATCH",
		"examples": "Edit your own group profile\n\n    curl -X PATCH -H \"Authorization: bearer {ACCESS_TOKEN}\" \\\n      \"https:\/\/meetup.com\/meetup-api-testing\/members\/self\" \\\n       -d \"answer_222854=building community\"\n         ",
		"response": {
			"birthday": ["Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined", {
				"month": "Numeric month member was born. May be absent if not defined",
				"year": "Year member was born",
				"day": "Numeric day member was born. May be absent if not defined"
			}],
			"country": "Country code associated with Member's location",
			"gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
			"city": "City associated with Member's location",
			"bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
			"privacy": ["Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"", {
				"groups": "may be 'hidden' or 'visible",
				"bio": "may be 'hidden' or 'visible'",
				"topics": "may be 'hidden' or 'visible'",
				"swagger_type": "MemberPrivacy",
				"facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
			}],
			"lon": "Geographic longitude associated with Member's location",
			"memberships": ["Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.", {
				"member": ["Memberships where member holds a basic membership", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"organizer": ["Memberships where member is on the group's lead team", {
					"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"created": "The time this member joined the Group, represented as milliseconds since the epoch",
					"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
					"title": "Organizer defined title of member. May be absent if not defined",
					"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
					"swagger_type": "GroupProfileListEntry",
					"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
					"group": ["The group associated with this membership", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}]
			}],
			"other_services": ["An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"", {
				"identifier": "A unique string identifier",
				"url": "A url for this identity. May be the same as identifier in some cases",
				"swagger_type": "SocialNetwork"
			}],
			"stats": ["High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'", {
				"groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
				"rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
				"topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
			}],
			"state": "State associated with Member's location, where available",
			"id": "Unique numeric identifier for the member",
			"lat": "Geographic latitude associated with Member's location",
			"next_event": ["Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"localized_country_name": "Name of country associated with Member's location",
			"topics": ["List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"joined": "Time member joined, represented as milliseconds since the epoch",
			"photo": ["Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"swagger_type": "Profile",
			"group_profile": ["Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts", {
				"role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"created": "The time this member joined the Group, represented as milliseconds since the epoch",
				"intro": "Member intro, may be omitted if member opted to hide their intro from other members",
				"visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
				"answers": ["Array of answers to Group Profile questions", {
					"question": "Question text",
					"answer": "Answer text",
					"question_id": "Unique numeric question identifier"
				}],
				"title": "Organizer defined title of member. May be absent if not defined",
				"updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
				"swagger_type": "GroupProfile",
				"status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
				"group": ["The group associated with this membership", {
					"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
					"photo_gradient": ["Color combination used generate group duotone", {
						"dark_color": "Dark color in hexidecimal format",
						"id": "Unique numeric identifier",
						"composite_color": "Composite color in hexidecimal format",
						"light_color": "Light color in hexidecimal format",
						"swagger_type": "Duotone"
					}],
					"name": "Name of the group",
					"key_photo": ["Group primary photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Numeric group ID",
					"urlname": "Urlname used to identify the group on meetup.com",
					"group_photo": ["Group photo", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"swagger_type": "GroupSummary",
					"who": "What the group calls its members"
				}]
			}],
			"last_event": ["Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
				"venue": ["The event venue, present only if selected and not hidden by an organizer", {
					"zip": "ZIP code if, venue is in US or Canada",
					"country": "Country code of venue",
					"localized_country_name": "The localized name of the venue's country",
					"city": "City of venue",
					"address_1": "Line 1 of venue address",
					"address_2": "Line 2 of venue address",
					"address_3": "Line 3 of venue address",
					"lon": "Approximate longitude",
					"phone": "Phone number of venue",
					"name": "Venue name",
					"state": "State of venue where available",
					"id": "Unique numeric venue id",
					"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
					"lat": "Approximate latitude"
				}],
				"survey_questions": ["Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"", {
					"question": "Question text",
					"id": "Numeric question identifier"
				}],
				"waitlist_count": "Number of members on the waitlist, if one exists",
				"created": "Creation time of the event, in milliseconds since the epoch",
				"fee": ["Ticketing fee information for events that support payments", {
					"amount": "Amount of the fee",
					"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
					"description": "Fee description, typically \"per-person\"",
					"currency": "Currency accepted for fee",
					"label": "Label for fee, typically \"Price\"",
					"required": "Boolean flag indicating if this fee is required to RSVP"
				}],
				"swagger_type": "EventSummary",
				"yes_rsvp_count": "Number of yes RSVPs including guests",
				"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
				"photo_album": ["Information about photo uploads for this event", {
					"photo_count": "Number of photos uploaded",
					"photo_sample": ["A small collection of photos uploaded for this event", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"id": "Unique numeric identifier for photo album",
					"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
						"utc_offset": "The local offset from UTC time, in milliseconds",
						"name": "Name of event",
						"id": "Alphanumeric event ID",
						"time": "UTC start time of the event, in milliseconds since the epoch",
						"swagger_type": "BasicEvent",
						"yes_rsvp_count": "Number of yes RSVPs"
					}],
					"title": "Album title",
					"swagger_type": "PhotoAlbumSummary"
				}],
				"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"", {
					"member": ["Member who RSVP'd", {
						"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
						"name": "Name of member",
						"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
							"common": ["Information the authenticated member has in common with this member", {
								"groups": ["List of common groups", {
									"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
									"photo_gradient": ["Color combination used generate group duotone", {
										"dark_color": "Dark color in hexidecimal format",
										"id": "Unique numeric identifier",
										"composite_color": "Composite color in hexidecimal format",
										"light_color": "Light color in hexidecimal format",
										"swagger_type": "Duotone"
									}],
									"name": "Name of the group",
									"key_photo": ["Group primary photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"id": "Numeric group ID",
									"urlname": "Urlname used to identify the group on meetup.com",
									"group_photo": ["Group photo", {
										"highres_link": "Link for full sized photo",
										"base_url": "A base url that can be use to construct a photo url from its components",
										"id": "Numeric photo ID",
										"photo_link": "Link for standard sized photo",
										"type": "Type of photo. One of \"event\" or \"member\"",
										"thumb_link": "Link for thumbnail sized photo"
									}],
									"swagger_type": "GroupSummary",
									"who": "What the group calls its members"
								}]
							}],
							"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
							"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
							"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
							"swagger_type": "MemberSelf"
						}],
						"bio": "Intro of member",
						"id": "Numeric member ID",
						"title": "Organizer defined title of member. May be absent if not defined",
						"event_context": ["Member's context within the event. Only returned in the context of an event", {
							"host": "Boolean indicator for whether this member is a host for the event"
						}],
						"swagger_type": "AttendanceSummary"
					}],
					"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
					"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
					"swagger_type": "RSVPSummary",
					"created": "Creation time of the RSVP, in milliseconds since the epoch"
				}],
				"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
					"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
					"description": "Human displayable description of how often events in this series occur",
					"id": "Unique numeric identifier for the series",
					"swagger_type": "RecurrenceSchedule",
					"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
				}],
				"name": "Name of the event",
				"id": "A unique alphanumeric identifier for event",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"updated": "Last modified time for the event in milliseconds since the epoch",
				"group": ["Group hosting the event", {
					"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
					"name": "Name of the group",
					"lon": "Approximate group longitude",
					"id": "Numeric identifier for the group",
					"urlname": "Alphanumeric urlname identifier for the group",
					"lat": "Approximate group latitude",
					"who": "What the group calls its members"
				}]
			}],
			"name": "Display name for the member",
			"self": ["Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member", {
				"common": ["Information the authenticated member has in common with this member", {
					"groups": ["List of common groups", {
						"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
						"photo_gradient": ["Color combination used generate group duotone", {
							"dark_color": "Dark color in hexidecimal format",
							"id": "Unique numeric identifier",
							"composite_color": "Composite color in hexidecimal format",
							"light_color": "Light color in hexidecimal format",
							"swagger_type": "Duotone"
						}],
						"name": "Name of the group",
						"key_photo": ["Group primary photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"id": "Numeric group ID",
						"urlname": "Urlname used to identify the group on meetup.com",
						"group_photo": ["Group photo", {
							"highres_link": "Link for full sized photo",
							"base_url": "A base url that can be use to construct a photo url from its components",
							"id": "Numeric photo ID",
							"photo_link": "Link for standard sized photo",
							"type": "Type of photo. One of \"event\" or \"member\"",
							"thumb_link": "Link for thumbnail sized photo"
						}],
						"swagger_type": "GroupSummary",
						"who": "What the group calls its members"
					}]
				}],
				"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
				"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
				"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
				"swagger_type": "MemberSelf"
			}],
			"messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
		},
		"name": "Edit Group Member Profile",
		"tag": "edit",
		"scopes": ["profile_edit"],
		"param_notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id.\n\nOAuth authenticated applications should\nrequest the [profile_edit](\/meetup_api\/auth\/#profile_edit_scope)\npermission scope\n\nOnly organizers of the Meetup group may edit the member's __title__ and __role__ within the group.\n\nAll other fields are restricted to the owner of the group profile.\n\nSome Meetup group organizers may define a set of profile questions\nthey'd like their members to answer. You can obtain that question\nlist using the [Get Group](\/meetup_api\/docs\/:urlname\/#get) by sending\n a \"fields\" request parameter containing\n\"join_info\"",
		"group": "profiles",
		"desc": "Edits Group Profiles.\nTo fetch Group Member Profiles,\nsee [this endpoint](\/meetup_api\/docs\/:urlname\/members\/:member_id#get)"
	}, {
		"formats": ["json"],
		"response_notes": "A successful request will result in a 204 NoContent response.\n\nAttempts to delete profiles that do not belong to the authenticated member will result in a 403 Forbidden response\n\nAttempts to delete profiles in groups the authenticated member is an organizer of will result in a 400 BadRequest response",
		"params": {
			"exit_comment": "Optional message to the organizer when leaving"
		},
		"api_version": "3",
		"path": "\/:urlname\/members\/:member_id",
		"http_method": "DELETE",
		"name": "Delete Group Member Profile (Leave Group)",
		"tag": "delete",
		"scopes": ["profile_edit"],
		"param_notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id.\n\nOAuth authenticated applications should\nrequest the [profile_edit](\/meetup_api\/auth\/#profile_edit_scope)\npermission scope\n\nOnly the authenticated member is permitted to leave groups they do not organize. For groups they do organize,\nthey must first step down on the groups homepage on www.meetup.com",
		"errors": {
			"organizer_error": "Returned when an organizer attempts to delete their profile before stepping down"
		},
		"group": "profiles",
		"desc": "Deletes a member's group profiles."
	}, {
		"formats": ["json"],
		"params": {
			"*comment": "The text of the comment"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/photos\/:photo_id\/comments",
		"http_method": "POST",
		"response": {
			"member": ["The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member", {
				"actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__delete__ delete this comment"
			}],
			"comment": "The comment the member left for the photo",
			"id": "Comment id",
			"created": "Time the comment was posted in milliseconds since the epoch"
		},
		"name": "Photo Comment",
		"tag": "post",
		"scopes": ["group_content_edit"],
		"param_notes": "Valid path parameters for __:urlname__, __:event_id__, and __:photo_id__ are required.\n\nYou must be a member of the group to post comments on the photo.\n\nIn addition,\nauthorized oauth applications must request the\n[group_content_edit](\/meetup_api\/auth\/#group_content_edit_scope) permission scope.",
		"group": "photos",
		"desc": "Creates a new photo comment"
	}, {
		"path": "\/:urlname\/events\/:event_id\/photos\/:photo_id\/comments\/:comment_id",
		"formats": ["json"],
		"http_method": "DELETE",
		"response_notes": "A successful HTTP DELETE request will yield a 204 No Content response.\nOtherwise a 400 Bad Request response can be expected",
		"name": "Photo Comment Delete",
		"tag": "delete",
		"scopes": ["group_content_edit"],
		"param_notes": "A URI containing a valid group __urlname__,\n__event_id__, __photo_id__, and __comment_id__\nis required.\n\nThe authenticated member must\nbe the original poster of the comment or an admin of the group\n\nIn addition,\nauthorized oauth applications must request the\n[group_content_edit](\/meetup_api\/auth\/#group_content_edit_scope) permission scope.\n",
		"api_version": "3",
		"group": "photos",
		"desc": "Deletes photo comments"
	}, {
		"formats": ["json"],
		"response_notes": "Returns list of comments posted for a photo. This listing does not support pagination.",
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/photos\/:photo_id\/comments",
		"http_method": "GET",
		"response": {
			"member": ["The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"self": ["Context for the authenticated member", {
				"actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__delete__ delete this comment"
			}],
			"comment": "The comment the member left for the photo",
			"id": "Comment id",
			"created": "Time the comment was posted in milliseconds since the epoch"
		},
		"name": "Photo Comments",
		"tag": "get",
		"scopes": ["basic"],
		"param_notes": "Valid path parameters for __:urlname__, __:event_id__, and __:photo_id__ are required\n\nFor groups that have limited public visibilty on their content, you must be a member of the group to see these",
		"group": "photos",
		"desc": "Lists photo comments associated with a photo"
	}, {
		"formats": ["json"],
		"response_notes": "If successful, this endpoint returns a 201 Created response. A 400 Bad request response will be\nreturned if the authenticated Member can not attend this Meetup due any of the reasons defined in the\n[Errors](\/meetup_api\/docs\/:urlname\/events\/:event_id\/rsvps\/#errors) section below.\n\nIn cases where a member successfully RSVP's yes to a ticketed Event before\ntheir payment is processed, the response will be returned as an HTTP 202 Accepted\nstatus.",
		"params": {
			"guests": "The number of guests Member will be attending with.\nEvents may define guest limits which is 2 by default",
			"*response": "The authenticated Member's RSVP response. Supported values are either \"yes\" or \"no\"",
			"opt_to_pay": "A boolean indicator used for Events with ticketing fees to imply the Member has opted to pay as part of the RSVP request",
			"answer_{qid}": "Answers to Event survey questions.\nParameter names should have a suffix specifying the question's identifier.\nAnswers may not be longer than 250 characters.",
			"agree_to_refund": "A boolean indicator used for Events with ticketing feeds to imply the Member has agreed to the Event's refund policy"
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/rsvps",
		"http_method": "POST",
		"response": {
			"venue": ["Venue of event RSVP is hosted at.\nWill be omitted when venue is not yet defined or organizer has chosen to hide it from non-members.", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"created": "Creation time of the RSVP, in milliseconds since the epoch.",
			"answers": ["Answers to event survey questions.\nVisible only to the posting member, hosts and the lead team", {
				"question": "Question text",
				"answer": "Answer text for question",
				"updated": "The last time this answer was updated",
				"question_id": "Unique number identifier for question",
				"swagger_type": "SurveyQuestionAnswer"
			}],
			"swagger_type": "Rsvp",
			"pay_status": "The member's pay status for ticketed events returned with \"pay_status\"\nis requested with the \"fields\" parameter.\n\nVisible only to the member and the lead team.\nMay be one of \"refunded\", \"partial_refund\", \"refund_pending\", \"pending\", \"echeck_pending\", \"paid\", \"none\", or \"exempt\"",
			"response": "The response to the RSVP. May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse will be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment",
			"guests": "Number of guests the RSVP'd member will be bringing",
			"member": ["Member who RSVP'd", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
					"common": ["Information the authenticated member has in common with this member", {
						"groups": ["List of common groups", {
							"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
							"photo_gradient": ["Color combination used generate group duotone", {
								"dark_color": "Dark color in hexidecimal format",
								"id": "Unique numeric identifier",
								"composite_color": "Composite color in hexidecimal format",
								"light_color": "Light color in hexidecimal format",
								"swagger_type": "Duotone"
							}],
							"name": "Name of the group",
							"key_photo": ["Group primary photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"id": "Numeric group ID",
							"urlname": "Urlname used to identify the group on meetup.com",
							"group_photo": ["Group photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"swagger_type": "GroupSummary",
							"who": "What the group calls its members"
						}]
					}],
					"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
					"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
					"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
					"swagger_type": "MemberSelf"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"event": ["The Event associated with the RSVP", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"attendance_status": "Represents an attendance status for this RSVP,\nreturned when \"attendance_status\" is requested with the\n\"fields\" parameter and when the authorized member has\npermission to take attendance.\n\nValue may be \"attended\" when marked attending,\n\"absent\" when marked absent or \"noshow\" when marked noshow",
			"updated": "Last time the RSVP was updated, in milliseconds since the epoch.",
			"group": ["The Group associated with the RSVP", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"photo_gradient": ["Color combination used generate group duotone", {
					"dark_color": "Dark color in hexidecimal format",
					"id": "Unique numeric identifier",
					"composite_color": "Composite color in hexidecimal format",
					"light_color": "Light color in hexidecimal format",
					"swagger_type": "Duotone"
				}],
				"name": "Name of the group",
				"key_photo": ["Group primary photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Numeric group ID",
				"urlname": "Urlname used to identify the group on meetup.com",
				"group_photo": ["Group photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"swagger_type": "GroupSummary",
				"who": "What the group calls its members"
			}]
		},
		"name": "RSVP Create and Update",
		"scopes": ["rsvp"],
		"param_notes": "The RSVP with be attributed to the currently authenticated member.\n\nOrganizers may define a set of survey questions they intend members to answer when\nRSVPing. Members RSVPing may provide answers to those questions\nby supplying parameter names that correspond with question identifiers.\nTo resolve any defined survey questions, you can inspect the\n[Event Get](\/meetup_api\/docs\/:urlname\/events\/:id\/#get)'s\nresponse body for the 'survey_questions' field\n\nIf the Event requires payment, you are required to send an\n'agree_to_refund' parameter set to true. This represents\nthe authenticated Member's agreement to understanding the\nEvent's refund policy.\n\nNote: When space is not available, \"yes\" responses may be coerced into a\nwaitlist response. This indicates that the authenticated member\nhas expressed interest in attending when space becomes available.\n\nOAuth authenticated applications should\nrequest the [rsvp](\/meetup_api\/auth\/#rsvp_scope)\npermission scope",
		"errors": {
			"refund_agreement_error": "Failed to agree to a paid Event's refund policy",
			"invalid_event_error": "Event was invalid",
			"event_past_error": "The event is now in the past",
			"invalid_response_error": "Invalid RSVP response",
			"too_many_guests_error": "More than the permitted number of guests for this event was provided",
			"answer_error": "One or more of the provided answers were longer than 250 characters",
			"too_few_spots_error": "Event capacity has been reached",
			"rsvp_closed_error": "RSVPs have been closed for this event",
			"guests_error": "A negative number of guests was provided",
			"dues_required_error": "Membership dues are awaiting payment",
			"rsvp_error_error": "Catch all generic error"
		},
		"group": "rsvps",
		"desc": "Creates or updates an existing RSVP"
	}, {
		"formats": ["json"],
		"response_notes": "A list of RSVP objects encoded in JSON format",
		"params": {
			"fields": "A comma-delimited list of optional fields to append to the response",
			"response": "Filter returned list to one or more of the following RSVP responses.\n\"yes\" or \"no\". This defaults to \"yes,no\"",
			"order": "The sort order of returned RSVPs.\nValid values include \"name\" or \"social\".\nDefaults to \"name\""
		},
		"api_version": "3",
		"path": "\/:urlname\/events\/:event_id\/rsvps",
		"http_method": "GET",
		"response": {
			"venue": ["Venue of event RSVP is hosted at.\nWill be omitted when venue is not yet defined or organizer has chosen to hide it from non-members.", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"created": "Creation time of the RSVP, in milliseconds since the epoch.",
			"answers": ["Answers to event survey questions.\nVisible only to the posting member, hosts and the lead team", {
				"question": "Question text",
				"answer": "Answer text for question",
				"updated": "The last time this answer was updated",
				"question_id": "Unique number identifier for question",
				"swagger_type": "SurveyQuestionAnswer"
			}],
			"swagger_type": "Rsvp",
			"pay_status": "The member's pay status for ticketed events returned with \"pay_status\"\nis requested with the \"fields\" parameter.\n\nVisible only to the member and the lead team.\nMay be one of \"refunded\", \"partial_refund\", \"refund_pending\", \"pending\", \"echeck_pending\", \"paid\", \"none\", or \"exempt\"",
			"response": "The response to the RSVP. May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse will be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment",
			"guests": "Number of guests the RSVP'd member will be bringing",
			"member": ["Member who RSVP'd", {
				"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
				"name": "Name of member",
				"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
					"common": ["Information the authenticated member has in common with this member", {
						"groups": ["List of common groups", {
							"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
							"photo_gradient": ["Color combination used generate group duotone", {
								"dark_color": "Dark color in hexidecimal format",
								"id": "Unique numeric identifier",
								"composite_color": "Composite color in hexidecimal format",
								"light_color": "Light color in hexidecimal format",
								"swagger_type": "Duotone"
							}],
							"name": "Name of the group",
							"key_photo": ["Group primary photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"id": "Numeric group ID",
							"urlname": "Urlname used to identify the group on meetup.com",
							"group_photo": ["Group photo", {
								"highres_link": "Link for full sized photo",
								"base_url": "A base url that can be use to construct a photo url from its components",
								"id": "Numeric photo ID",
								"photo_link": "Link for standard sized photo",
								"type": "Type of photo. One of \"event\" or \"member\"",
								"thumb_link": "Link for thumbnail sized photo"
							}],
							"swagger_type": "GroupSummary",
							"who": "What the group calls its members"
						}]
					}],
					"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
					"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
					"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
					"swagger_type": "MemberSelf"
				}],
				"bio": "Intro of member",
				"id": "Numeric member ID",
				"title": "Organizer defined title of member. May be absent if not defined",
				"event_context": ["Member's context within the event. Only returned in the context of an event", {
					"host": "Boolean indicator for whether this member is a host for the event"
				}],
				"swagger_type": "AttendanceSummary"
			}],
			"event": ["The Event associated with the RSVP", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"attendance_status": "Represents an attendance status for this RSVP,\nreturned when \"attendance_status\" is requested with the\n\"fields\" parameter and when the authorized member has\npermission to take attendance.\n\nValue may be \"attended\" when marked attending,\n\"absent\" when marked absent or \"noshow\" when marked noshow",
			"updated": "Last time the RSVP was updated, in milliseconds since the epoch.",
			"group": ["The Group associated with the RSVP", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"photo_gradient": ["Color combination used generate group duotone", {
					"dark_color": "Dark color in hexidecimal format",
					"id": "Unique numeric identifier",
					"composite_color": "Composite color in hexidecimal format",
					"light_color": "Light color in hexidecimal format",
					"swagger_type": "Duotone"
				}],
				"name": "Name of the group",
				"key_photo": ["Group primary photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Numeric group ID",
				"urlname": "Urlname used to identify the group on meetup.com",
				"group_photo": ["Group photo", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"swagger_type": "GroupSummary",
				"who": "What the group calls its members"
			}]
		},
		"name": "Event RSVP list",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "This endpoint returns an un-paginated list of RSVPs. Standard pagination parameters will have no effect",
		"group": "rsvps",
		"desc": "Retrieves list of event RSVPs"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of topic category objects",
		"params": {
			"lon": "An optional approximate longitude to center a request for \"best_topics\"",
			"fields": "A comma-limited list of optional fields to append to the response",
			"radius": "An radius (in miles) to center a request for \"best_topics\"",
			"lat": "An optional approximate latitude to center a request for \"best_topics\""
		},
		"api_version": "3",
		"path": "\/find\/topic_categories",
		"http_method": "GET",
		"response": {
			"best_topics": ["Represents the best topic matches for this category, returned when the \"fields\"\nrequest parameter value includes \"best_topics\"", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"name": "Display name of the topic-category",
			"photo": ["Photo representing this category", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"sort_name": "Name used for sorting",
			"category_ids": "List of numeric category ids associated with this topic category",
			"id": "Numeric topic-category id",
			"shortname": "Unique string identifier for this category",
			"swagger_type": "TopicCategory"
		},
		"name": "Topic Categories",
		"scopes": ["basic"],
		"param_notes": "No parameters are required. Authenticated members may request \"best_topics\"\nusing the \"fields\" request parameter. By default these topics will selected\nbased on groups in the member's location. Alternatively you may supply a \"lat\",\n\"lon\", and \"radius\" to center these topic suggestions",
		"group": "topics",
		"desc": "Returns a list high level topic categories"
	}, {
		"formats": ["json"],
		"response_notes": "Returns a list of event objects",
		"params": {
			"lon": "Approximate target longitude",
			"page": "A target minimum number of events to return in a single page of results. The number returned is non-deterministic but a best-effort attempt will be made to return at least some. Defaults to 32",
			"fields": "A comma-delimited list of optional fields to populate in the response",
			"self_groups": "Boolean indicator of whether or not to include events within your existing Meetup network. This includes groups in locations that may differ from the target location. Defaults to true",
			"topic_category": "Numeric topic category identifier for filtering recommendations by a topic category",
			"lat": "Approximate target latitude"
		},
		"api_version": "3",
		"path": "\/recommended\/events",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Recommended Events",
		"scopes": ["basic"],
		"param_notes": "By default, the events returned will be based on the hosting groups near the authenticated member's location.\nTo customize this location, send a valid \"lat\" and \"lon\" parameter combination reflecting a desired location.\n\nYou may filter results using an topic category identifier from the [Topic Categories API](\/meetup_api\/docs\/find\/topic_categories\/)\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json). Results may page forward but never in reverse",
		"group": "events",
		"desc": "Returns a list of upcoming recommended events"
	}, {
		"path": "\/recommended\/group_topics",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"urlkey": "The unique keyword used to identify this topic",
			"group_count": "The number of groups using this topic",
			"name": "Display name of the topic",
			"description": "The description of the topic",
			"id": "Numeric topic id",
			"member_count": "The number of members interested in this topic",
			"lang": "Language topic originates from",
			"swagger_type": "Topic"
		},
		"response_notes": "Returns list of topic object",
		"name": "Recommend Group Topics",
		"scopes": ["basic"],
		"params": {
			"page": "Target number of recommendations to return. Defaults to 36.",
			"text": "Free form text search",
			"lang": "Defines a language preference for ordering results. Valid values are en-USen-AUde-DEeses-ESfr-FRit-ITpt-BRja-JPko-KRnl-NLen-aude-dept-bren-uses-esnl-nlit-itfr-frko-krja-jpendefritptjakonl. You may also substitute this with the Accept-Language header",
			"other_topics": "A comma-delimited list of topic ids to inform recommendations",
			"exclude_topics": "A comma-delimited list of topic ids to exclude from the recommendations"
		},
		"api_version": "3",
		"group": "topics",
		"desc": "Recommends suggestions for group topics based on a text search or other topics"
	}, {
		"path": "\/recommended\/groups",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"score": "A numeric value representing how the relevancy of the group in this search context",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"name": "Recommended Groups",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. You may change the 'location' and 'radius' for the request. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.",
		"params": {
			"zip": "Zip code you are searching for recommendations in",
			"country": "A valid two character country code, defaults to US",
			"instant_join_only": "Recommend only groups without join requirements and that can be joined instantly",
			"location": "Raw text location query",
			"lon": "Approximate longitude",
			"topic_id": "Comma delimited list of up to 100 topic ids to help inform recommendations",
			"radius": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius",
			"fields": "Request that additional fields (separated by commas) be included in the output.",
			"category": "A valid category id which limits recommended groups to a particular category",
			"lat": "Approximate latitude"
		},
		"api_version": "3",
		"group": "groups",
		"desc": "Returns groups Meetup finds relevant to you"
	}, {
		"path": "\/recommended\/groups\/ignores\/:urlname",
		"formats": ["json"],
		"http_method": "POST",
		"response_notes": "A successful request will result in a 201 Created or 204 No Content response. If you go over the rate limit documented for this service you will receive a 429 Too Many Requests responses. Otherwise, a 400 Bad Request response is returned",
		"name": "Recommended Groups Ignore",
		"scopes": ["basic"],
		"api_version": "3",
		"param_notes": "Only the path parameter :urlname is required. You are limited to 100 of these requests in a 24 hour period of time.",
		"desc": "Provides a form of feedback by requesting to remove a group from future recommendations",
		"group": "groups"
	}, {
		"path": "\/recommended\/venues",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"zip": "If available, the venue's ZIP code",
			"country": "If available, the name of the venue's country code",
			"localized_country_name": "If available, the localized name of the venue's country",
			"visibility": "'private' if this venue is a private home, otherwise 'public'",
			"city": "If available, the name of the venue's city",
			"address_1": "If available, the first address line of the venue",
			"address_2": "If available, the second address line of the venue",
			"address_3": "If available, the third address line of the venue",
			"lon": "If available, the venue's longitude",
			"phone": "If available, the venue's photo number",
			"name": "If available, the venue's name",
			"state": "If available, and the venue's country id is within the US or Canada, the venue's state",
			"id": "Id, of the venue",
			"lat": "If available, the venue's latitude"
		},
		"name": "Recommended Venues",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.",
		"params": {
			"zip": "Zip code you are searching for recommendations in",
			"country": "A valid two character country code, defaults to US",
			"used_between": "Return venues that have been used within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above).",
			"min_groups": "The minimum number of groups that have hosted events at this venue",
			"group_id": "Comma-delimited list of up to 200 group ids to help inform recommendations",
			"location": "Raw text location query",
			"lon": "Approximate longitude",
			"radius": "Radius in miles. Defaults to member's preferred radius",
			"category": "Comma-delimited list of up to 200 category ids to help inform recommendations",
			"group_urlname": "Comma-delimited list of up to 200 group urlnames to help inform recommendations",
			"lat": "Approximate latitude"
		},
		"api_version": "3",
		"group": "venues",
		"desc": "Returns venues Meetup finds relevant to you based on location and category. This method does not yet support sorting or pagination."
	}, {
		"path": "\/:urlname\/similar_groups",
		"formats": ["json"],
		"http_method": "GET",
		"response": {
			"country": "Country of the group",
			"pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"city": "City of the group",
			"similar_groups": ["Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to \/:urlname\/similar_groups", {
				"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
				"name": "Name of the group",
				"lon": "Longitude",
				"id": "Id of the group",
				"urlname": "Urlname used to identify the group on meetup.com",
				"photos": ["Optional fields parameter. A small set of photos from the group", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lat": "Latitude",
				"who": "What this group calls it's members"
			}],
			"timezone": "This represents the universal timezone identifier for the group",
			"link": "Link to group on meetup.com",
			"description": "Short description of group",
			"lon": "Longitude",
			"welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
			"is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
			"group_photo": ["Group photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"photos": ["A small set of photos from the group", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"short_link": "Optional field, a shorted URL for the group",
			"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
			"approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
			"contributions": ["Optional field containing the contribution details of the group", {
				"thanks": "The 'thank you' message to be given when a contribution is made",
				"reason": "The reason a member might consider contributing",
				"potential": "Boolean stating that potential contributions are enabled for the group",
				"enabled": "Boolean stating if contributions are enabled for the group"
			}],
			"members": "Number of Meetup members in this group",
			"state": "State of the group, if in US or Canada",
			"simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
			"id": "Numeric group ID",
			"urlname": "Urlname used to identify the group on meetup.com",
			"membership_dues": ["Optional field, returns membership dues for group if any", {
				"refund_policy": ["Conditions for refunds", {
					"group_closes": "refund applies when the group closes",
					"member_leaves": "refund applies when member leaves the group",
					"none": "indicates there is no refund policy",
					"member_banned": "refund applies when the member is banned",
					"custom": "Boolean indicator of a custom refund policy"
				}],
				"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
				"methods": ["Methods of payments", {
					"credit_card": "Boolean indicator that credit cards are accepted",
					"other": "Boolean indicator that other forms of payment are accepted",
					"paypal": "Boolean indicator that Paypal payments are accepted",
					"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
				}],
				"fee": "Numeric fee value",
				"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
				"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
				"required": "true if dues are required",
				"swagger_type": "MembershipDues",
				"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
				"currency": "Currency in which the fee is declared",
				"reasons_other": "An additional reason if specified.",
				"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
			}],
			"lat": "Latitude",
			"next_event": ["The current ongoing or next upcoming event, if one is scheduled", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
			"photo_gradient": ["Color combination used generate group duotone", {
				"dark_color": "Dark color in hexidecimal format",
				"id": "Unique numeric identifier",
				"composite_color": "Composite color in hexidecimal format",
				"light_color": "Light color in hexidecimal format",
				"swagger_type": "Duotone"
			}],
			"ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
			"localized_country_name": "Name of country of the group",
			"join_info": ["Optional field, lists any questions requested when joining and required fields", {
				"photo_req": "true if required, false otherwise",
				"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
					"question": "The text of the question",
					"id": "Unique numeric identifier for the question"
				}],
				"questions_req": "true if required, false otherwise",
				"swagger_type": "GroupJoinInfo"
			}],
			"visibility": "Who can see this group. One of members, public or public_limited",
			"topics": ["Optional fields parameter. Returns the group's topics", {
				"name": "Display name of the topic",
				"urlkey": "The unique keyword used to identify this topic",
				"id": "Numeric topic id",
				"lang": "Language topic originates from",
				"swagger_type": "TopicSummary"
			}],
			"created": "Time the group was created in milliseconds since the epoch",
			"key_photo": ["Group primary photo", {
				"highres_link": "Link for full sized photo",
				"base_url": "A base url that can be use to construct a photo url from its components",
				"id": "Numeric photo ID",
				"photo_link": "Link for standard sized photo",
				"type": "Type of photo. One of \"event\" or \"member\"",
				"thumb_link": "Link for thumbnail sized photo"
			}],
			"plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
			"list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
			"organizer": ["Group's primary organizer", {
				"name": "Name of member",
				"photo": ["Organizer photo, where defined", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"bio": "Bio of member",
				"id": "Numeric member ID",
				"swagger_type": "SimpleMember"
			}],
			"leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
			"last_event": ["Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"", {
				"utc_offset": "The local offset from UTC time, in milliseconds",
				"name": "Name of event",
				"id": "Alphanumeric event ID",
				"time": "UTC start time of the event, in milliseconds since the epoch",
				"swagger_type": "BasicEvent",
				"yes_rsvp_count": "Number of yes RSVPs"
			}],
			"name": "Name of the group",
			"member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
			"self": ["Optional field, contains details specific to the authorized user in this Meetup Group", {
				"visited": "Member's last visit to the group site, in milliseconds since the epoch",
				"role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
				"membership_dues": ["Member's membership dues if the group has membership dues", {
					"paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
					"total_amount": "Total amount paid",
					"cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
					"transaction_time": "Time the transaction was made in milliseconds since the epoch",
					"exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
					"trial": ["If the group offers a trial membership, this indicates information for unpaid members.", {
						"days": "The total number of trial days offered by the group",
						"days_remaining": "The number of days remaining in the member's trial period",
						"expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
					}],
					"period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
				}],
				"actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
				"status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
			}],
			"category": ["The primary category of the group, if the group has one", {
				"name": "Display name of the category",
				"sort_name": "Name used for sorting",
				"id": "Numeric category id",
				"shortname": "String identifier of the category",
				"swagger_type": "GroupCategory"
			}],
			"who": "What the group calls its members"
		},
		"response_notes": "The response includes a JSON-encoded list of similar groups.",
		"name": "Similar groups",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name.",
		"api_version": "3",
		"group": "groups",
		"desc": "Renders a list of similar groups"
	}, {
		"formats": ["json"],
		"response_notes": "Returns an array of Topics",
		"params": {
			"*query": "The text to topic text search for",
			"page": "Number of results to return in a single set of results"
		},
		"api_version": "3",
		"path": "\/find\/topics",
		"http_method": "GET",
		"response": {
			"urlkey": "The unique keyword used to identify this topic",
			"group_count": "The number of groups using this topic",
			"name": "Display name of the topic",
			"description": "The description of the topic",
			"id": "Numeric topic id",
			"member_count": "The number of members interested in this topic",
			"lang": "Language topic originates from",
			"swagger_type": "Topic"
		},
		"name": "Find Topics",
		"scopes": ["basic"],
		"param_notes": "This endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json).",
		"group": "topics",
		"desc": "Find topics by name"
	}, {
		"formats": ["json"],
		"params": {
			"*address_1": "Primary address of the venue",
			"*state": "If in the US or CA, the state code for the venue",
			"hours": "Open hours information about the venue",
			"*country": "2 character country code of the venue",
			"web_url": "Optional web url for the venue",
			"visibility": "Optional value indicating the venues visibility to others. May be one of private or public. Defaults to 'public'",
			"phone": "Optional phone number for the venue",
			"*name": "Unique name of the venue",
			"address_2": "Secondary address info",
			"*city": "City name of the venue"
		},
		"api_version": "3",
		"path": "\/:urlname\/venues",
		"http_method": "POST",
		"response": {
			"zip": "If available, the venue's ZIP code",
			"country": "If available, the name of the venue's country code",
			"localized_country_name": "If available, the localized name of the venue's country",
			"visibility": "'private' if this venue is a private home, otherwise 'public'",
			"city": "If available, the name of the venue's city",
			"address_1": "If available, the first address line of the venue",
			"address_2": "If available, the second address line of the venue",
			"address_3": "If available, the third address line of the venue",
			"lon": "If available, the venue's longitude",
			"phone": "If available, the venue's photo number",
			"name": "If available, the venue's name",
			"state": "If available, and the venue's country id is within the US or Canada, the venue's state",
			"id": "Id, of the venue",
			"lat": "If available, the venue's latitude"
		},
		"name": "Venue Create",
		"tag": "create",
		"scopes": ["basic"],
		"param_notes": "The :urlname path element may be any valid group urlname or domain name. The required parameters are highlighted below. To avoid creating duplicate Meetup venues, this endpoint will attempt to resolve potentially similar venues based on name and address before creating a new public venues. If potential matches are detected, this method will return a 409 Conflict response containing a list of potential matches",
		"group": "venues",
		"desc": "Interface for creating new Meetup venues"
	}, {
		"formats": ["json"],
		"params": {
			"scroll": "A string representing a scroll target\n\n__recent_past__: Scroll the the last past Meetup Event. If there are no recently events in the past,\nthis defaults to __next_upcoming__. Unless otherwise specified, this will apply a 'status' filter\nof \"upcoming\" and \"past\".\n\n__next_upcoming__: Scroll to the next upcoming Meetup event. Unless otherwise specified, this will apply a 'status'\nfilter of \"upcoming\" and \"past\"",
			"page": "Number of results to return in a page. Defaults to 200",
			"fields": "Comma-delimited list of optional fields to append to the response",
			"status": "A comma-delimited list of event statuses. This defaults to \"upcoming\" unless a scroll parameter is provided."
		},
		"api_version": "3",
		"path": "\/:urlname\/events",
		"http_method": "GET",
		"response": {
			"utc_offset": "The local offset from UTC time, in milliseconds",
			"comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
			"rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
			"venue": ["The event venue, present only if selected and not hidden by an organizer", {
				"zip": "ZIP code if, venue is in US or Canada",
				"country": "Country code of venue",
				"localized_country_name": "The localized name of the venue's country",
				"city": "City of venue",
				"address_1": "Line 1 of venue address",
				"address_2": "Line 2 of venue address",
				"address_3": "Line 3 of venue address",
				"lon": "Approximate longitude",
				"phone": "Phone number of venue",
				"name": "Venue name",
				"state": "State of venue where available",
				"id": "Unique numeric venue id",
				"repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
				"lat": "Approximate latitude"
			}],
			"featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
			"survey_questions": ["List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"", {
				"question": "Question text",
				"id": "Numeric question identifier"
			}],
			"venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
			"fee": ["Ticketing fee information for events that support payments", {
				"amount": "Amount of the fee",
				"accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
				"description": "Fee description, typically \"per-person\"",
				"currency": "Currency accepted for fee",
				"label": "Label for fee, typically \"Price\"",
				"required": "Boolean flag indicating if this fee is required to RSVP"
			}],
			"link": "Link to event on meetup.com",
			"why": "We should do this because...",
			"description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
			"short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
			"yes_rsvp_count": "Number of yes RSVPs including guests",
			"duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
			"event_hosts": ["List of members hosting the event, returned when fields request parameter value includes 'event_hosts'", {
				"name": "Host member's name",
				"photo": ["Member photo if one exists", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Host member's id"
			}],
			"simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
			"id": "A unique alphanumeric identifier for event",
			"group": ["Information about group hosting the event", {
				"join_info": ["Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"", {
					"photo_req": "true if required, false otherwise",
					"questions": ["List of profile questions organizer would like new members to answer prior to joining", {
						"question": "The text of the question",
						"id": "Unique numeric identifier for the question"
					}],
					"questions_req": "true if required, false otherwise",
					"swagger_type": "GroupJoinInfo"
				}],
				"topics": ["Topics related to the group, returned when fields request parameter value includes 'group_topics'", {
					"name": "Display name of the topic",
					"urlkey": "The unique keyword used to identify this topic",
					"id": "Numeric topic id",
					"lang": "Language topic originates from",
					"swagger_type": "TopicSummary"
				}],
				"photo": ["Photo associated with group, returned when fields request parameter value includes 'group_photo'", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"lon": "Approximate group longitude",
				"join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
				"name": "Name of the group",
				"self": ["Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'", {
					"actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
					"membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
					"status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
				}],
				"id": "Numeric identifier for the group",
				"urlname": "Alphanumeric urlname identifier for the group",
				"category": ["Category group belongs to, returned when fields request parameter value includes 'group_category'", {
					"name": "Display name of the category",
					"sort_name": "Name used for sorting",
					"id": "Numeric category id",
					"shortname": "String identifier of the category",
					"swagger_type": "GroupCategory"
				}],
				"membership_dues": ["Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'", {
					"refund_policy": ["Conditions for refunds", {
						"group_closes": "refund applies when the group closes",
						"member_leaves": "refund applies when member leaves the group",
						"none": "indicates there is no refund policy",
						"member_banned": "refund applies when the member is banned",
						"custom": "Boolean indicator of a custom refund policy"
					}],
					"reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
					"methods": ["Methods of payments", {
						"credit_card": "Boolean indicator that credit cards are accepted",
						"other": "Boolean indicator that other forms of payment are accepted",
						"paypal": "Boolean indicator that Paypal payments are accepted",
						"amazon_payments": "Boolean indicator that Amazon Payments are accepted"
					}],
					"fee": "Numeric fee value",
					"trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
					"self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
					"required": "true if dues are required",
					"swagger_type": "MembershipDues",
					"fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
					"currency": "Currency in which the fee is declared",
					"reasons_other": "An additional reason if specified.",
					"required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
				}],
				"lat": "Approximate group latitude",
				"who": "What the group calls its members"
			}],
			"rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
			"rsvp_rules": ["Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'", {
				"refund_policy": ["The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP", {
					"policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
					"days": "if member_cancellation is present, it's relative to this many days before the event",
					"notes": "additional refund policy notes"
				}],
				"closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
				"open_time": "UTC time that members may begin to RSVP",
				"waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
				"guest_limit": "Number of guests members may include in their RSVP, 0 or more",
				"close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
			}],
			"visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
			"waitlist_count": "Number of members on the waitlist, if one exists",
			"created": "Creation time of the event, in milliseconds since the epoch",
			"plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
			"how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
			"swagger_type": "EventSummary",
			"photo_album": ["Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'", {
				"photo_count": "Number of photos uploaded",
				"photo_sample": ["A small collection of photos uploaded for this event", {
					"highres_link": "Link for full sized photo",
					"base_url": "A base url that can be use to construct a photo url from its components",
					"id": "Numeric photo ID",
					"photo_link": "Link for standard sized photo",
					"type": "Type of photo. One of \"event\" or \"member\"",
					"thumb_link": "Link for thumbnail sized photo"
				}],
				"id": "Unique numeric identifier for photo album",
				"event": ["Event photo album belongs to. This will be absent if the album\nis not associated with an event", {
					"utc_offset": "The local offset from UTC time, in milliseconds",
					"name": "Name of event",
					"id": "Alphanumeric event ID",
					"time": "UTC start time of the event, in milliseconds since the epoch",
					"swagger_type": "BasicEvent",
					"yes_rsvp_count": "Number of yes RSVPs"
				}],
				"title": "Album title",
				"swagger_type": "PhotoAlbumSummary"
			}],
			"rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
			"rsvp_sample": ["A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'", {
				"member": ["Member who RSVP'd", {
					"role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
					"name": "Name of member",
					"photo": ["Member photo, if available.\nMembers who registered via Facebook may not have highres photos", {
						"highres_link": "Link for full sized photo",
						"base_url": "A base url that can be use to construct a photo url from its components",
						"id": "Numeric photo ID",
						"photo_link": "Link for standard sized photo",
						"type": "Type of photo. One of \"event\" or \"member\"",
						"thumb_link": "Link for thumbnail sized photo"
					}],
					"self": ["Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member", {
						"common": ["Information the authenticated member has in common with this member", {
							"groups": ["List of common groups", {
								"join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
								"photo_gradient": ["Color combination used generate group duotone", {
									"dark_color": "Dark color in hexidecimal format",
									"id": "Unique numeric identifier",
									"composite_color": "Composite color in hexidecimal format",
									"light_color": "Light color in hexidecimal format",
									"swagger_type": "Duotone"
								}],
								"name": "Name of the group",
								"key_photo": ["Group primary photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"id": "Numeric group ID",
								"urlname": "Urlname used to identify the group on meetup.com",
								"group_photo": ["Group photo", {
									"highres_link": "Link for full sized photo",
									"base_url": "A base url that can be use to construct a photo url from its components",
									"id": "Numeric photo ID",
									"photo_link": "Link for standard sized photo",
									"type": "Type of photo. One of \"event\" or \"member\"",
									"thumb_link": "Link for thumbnail sized photo"
								}],
								"swagger_type": "GroupSummary",
								"who": "What the group calls its members"
							}]
						}],
						"actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
						"blocks": "Boolean indication of whether or not the authenticated member blocks this member",
						"friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
						"swagger_type": "MemberSelf"
					}],
					"bio": "Intro of member",
					"id": "Numeric member ID",
					"title": "Organizer defined title of member. May be absent if not defined",
					"event_context": ["Member's context within the event. Only returned in the context of an event", {
						"host": "Boolean indicator for whether this member is a host for the event"
					}],
					"swagger_type": "AttendanceSummary"
				}],
				"id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
				"updated": "Last modified time of the RSVP, in milliseconds since the epoch",
				"swagger_type": "RSVPSummary",
				"created": "Creation time of the RSVP, in milliseconds since the epoch"
			}],
			"series": ["Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events", {
				"end_date": "Date when this series ends\/ended, in milliseconds since the epoch",
				"description": "Human displayable description of how often events in this series occur",
				"id": "Unique numeric identifier for the series",
				"swagger_type": "RecurrenceSchedule",
				"start_date": "Date when this series begins\/began, in milliseconds since the epoch"
			}],
			"name": "Name of the event",
			"self": ["represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'", {
				"pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
				"role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
				"actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
				"rsvp": ["Member's RSVP, if any", {
					"answers": ["List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers", {
						"question": "Question text",
						"answer": "Answer text for question",
						"updated": "The last time this answer was updated",
						"question_id": "Unique number identifier for question",
						"swagger_type": "SurveyQuestionAnswer"
					}],
					"guests": "Number of guests the RSVP'd member will be bringing",
					"response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
				}],
				"swagger_type": "EventSelf"
			}],
			"time": "UTC start time of the event, in milliseconds since the epoch",
			"updated": "Last modified time for the event in milliseconds since the epoch",
			"status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
		},
		"name": "Group Events",
		"tag": "list",
		"scopes": ["basic"],
		"param_notes": "All parameters are optional.\n\nThis endpoint uses HTTP [Link header based pagination](\/meetup_api\/docs\/#v3_json)",
		"group": "events",
		"desc": "Gets a listing of all Meetup Events hosted by a target group"
	}]
}